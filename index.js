require("dotenv").config();
const express = require("express");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");

console.log("üöÄ Starting 7-Day Money Flow Bot - Enhanced UI Edition");
console.log("BOT_TOKEN exists:", !!process.env.BOT_TOKEN);
console.log("DATABASE_URL exists:", !!process.env.DATABASE_URL);

// Database setup
const { drizzle } = require('drizzle-orm/node-postgres');
const { Pool } = require('pg');
const { pgTable, serial, text, integer, bigint, boolean, timestamp, jsonb } = require('drizzle-orm/pg-core');
const { eq } = require('drizzle-orm');

// Database Schema

const users = pgTable('users', {
  id: serial('id').primaryKey(),
  telegram_id: bigint('telegram_id', { mode: 'number' }).notNull().unique(),
  username: text('username'),
  first_name: text('first_name'),
  last_name: text('last_name'),
  phone_number: text('phone_number'),
  email: text('email'),
  joined_at: timestamp('joined_at').defaultNow(),
  is_paid: boolean('is_paid').default(false),
  payment_date: timestamp('payment_date'),
  transaction_id: text('transaction_id'),
  is_vip: boolean('is_vip').default(false),
  tier: text('tier').default('free'),
  tier_price: integer('tier_price').default(0),
  last_active: timestamp('last_active').defaultNow(),
  timezone: text('timezone').default('Asia/Phnom_Penh'),
  testimonials: jsonb('testimonials'),
  testimonial_requests: jsonb('testimonial_requests'),
  upsell_attempts: jsonb('upsell_attempts'),
  conversion_history: jsonb('conversion_history'),
  extended_progress: jsonb('extended_progress'),
});

const progress = pgTable('progress', {
  id: serial('id').primaryKey(),
  user_id: bigint('user_id', { mode: 'number' }).notNull().unique(),
  current_day: integer('current_day').default(0),
  ready_for_day_1: boolean('ready_for_day_1').default(false),
  day_0_completed: boolean('day_0_completed').default(false),
  day_1_completed: boolean('day_1_completed').default(false),
  day_1_completed_at: timestamp('day_1_completed_at'),
  day_1_accessed_at: timestamp('day_1_accessed_at'),
  day_2_completed: boolean('day_2_completed').default(false),
  day_2_completed_at: timestamp('day_2_completed_at'),
  day_2_accessed_at: timestamp('day_2_accessed_at'),
  day_3_completed: boolean('day_3_completed').default(false),
  day_3_completed_at: timestamp('day_3_completed_at'),
  day_3_accessed_at: timestamp('day_3_accessed_at'),
  day_4_completed: boolean('day_4_completed').default(false),
  day_4_completed_at: timestamp('day_4_completed_at'),
  day_4_accessed_at: timestamp('day_4_accessed_at'),
  day_5_completed: boolean('day_5_completed').default(false),
  day_5_completed_at: timestamp('day_5_completed_at'),
  day_5_accessed_at: timestamp('day_5_accessed_at'),
  day_6_completed: boolean('day_6_completed').default(false),
  day_6_completed_at: timestamp('day_6_completed_at'),
  day_6_accessed_at: timestamp('day_6_accessed_at'),
  day_7_completed: boolean('day_7_completed').default(false),
  day_7_completed_at: timestamp('day_7_completed_at'),
  day_7_accessed_at: timestamp('day_7_accessed_at'),
  program_completed: boolean('program_completed').default(false),
  program_completed_at: timestamp('program_completed_at'),
  completion_percentage: integer('completion_percentage').default(0),
  last_active_day: integer('last_active_day').default(1),
  responses: jsonb('responses'),
  created_at: timestamp('created_at').defaultNow(),
  updated_at: timestamp('updated_at').defaultNow(),
});

// Database Connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

const db = drizzle(pool, { schema: { users, progress } });

// Database initialization with enhanced fields
async function initDatabase() {
  try {
    await pool.query('SELECT 1 as test');
    console.log("‚úÖ Database connection successful");
    
    // Create enhanced users table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        telegram_id BIGINT UNIQUE NOT NULL,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone_number TEXT,
        email TEXT,
        joined_at TIMESTAMP DEFAULT NOW(),
        is_paid BOOLEAN DEFAULT FALSE,
        payment_date TIMESTAMP,
        transaction_id TEXT,
        is_vip BOOLEAN DEFAULT FALSE,
        tier TEXT DEFAULT 'free',
        tier_price INTEGER DEFAULT 0,
        last_active TIMESTAMP DEFAULT NOW(),
        timezone TEXT DEFAULT 'Asia/Phnom_Penh',
        testimonials JSONB,
        testimonial_requests JSONB,
        upsell_attempts JSONB,
        conversion_history JSONB,
        extended_progress JSONB
      )
    `);
    
    // Create enhanced progress table with completion timestamps
    await pool.query(`
      CREATE TABLE IF NOT EXISTS progress (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE NOT NULL,
        current_day INTEGER DEFAULT 0,
        ready_for_day_1 BOOLEAN DEFAULT FALSE,
        day_0_completed BOOLEAN DEFAULT FALSE,
        day_1_completed BOOLEAN DEFAULT FALSE,
        day_1_completed_at TIMESTAMP,
        day_1_accessed_at TIMESTAMP,
        day_2_completed BOOLEAN DEFAULT FALSE,
        day_2_completed_at TIMESTAMP,
        day_2_accessed_at TIMESTAMP,
        day_3_completed BOOLEAN DEFAULT FALSE,
        day_3_completed_at TIMESTAMP,
        day_3_accessed_at TIMESTAMP,
        day_4_completed BOOLEAN DEFAULT FALSE,
        day_4_completed_at TIMESTAMP,
        day_4_accessed_at TIMESTAMP,
        day_5_completed BOOLEAN DEFAULT FALSE,
        day_5_completed_at TIMESTAMP,
        day_5_accessed_at TIMESTAMP,
        day_6_completed BOOLEAN DEFAULT FALSE,
        day_6_completed_at TIMESTAMP,
        day_6_accessed_at TIMESTAMP,
        day_7_completed BOOLEAN DEFAULT FALSE,
        day_7_completed_at TIMESTAMP,
        day_7_accessed_at TIMESTAMP,
        program_completed BOOLEAN DEFAULT FALSE,
        program_completed_at TIMESTAMP,
        completion_percentage INTEGER DEFAULT 0,
        last_active_day INTEGER DEFAULT 1,
        responses JSONB,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      )
    `);
    
    // Add new columns if they don't exist
    const columnsToAdd = [
      'day_1_completed_at', 'day_1_accessed_at',
      'day_2_completed_at', 'day_2_accessed_at',
      'day_3_completed_at', 'day_3_accessed_at',
      'day_4_completed_at', 'day_4_accessed_at',
      'day_5_completed_at', 'day_5_accessed_at',
      'day_6_completed_at', 'day_6_accessed_at',
      'day_7_completed_at', 'day_7_accessed_at',
      'completion_percentage', 'last_active_day'
    ];
    
    for (const column of columnsToAdd) {
      try {
        if (column.includes('percentage') || column.includes('active_day')) {
          await pool.query(`ALTER TABLE progress ADD COLUMN IF NOT EXISTS ${column} INTEGER DEFAULT 0`);
        } else {
          await pool.query(`ALTER TABLE progress ADD COLUMN IF NOT EXISTS ${column} TIMESTAMP`);
        }
      } catch (error) {
        // Column might already exist
      }
    }
    
    console.log("‚úÖ Enhanced database tables verified/created");
  } catch (error) {
    console.error("‚ùå Database initialization failed:", error.message);
  }
}

// Enhanced MODULE LOADER with fallback
function safeRequire(modulePath, moduleName) {
  try {
    const module = require(modulePath);
    console.log(`‚úÖ ${moduleName} loaded successfully`);
    return module;
  } catch (error) {
    console.log(`‚ö†Ô∏è ${moduleName} not found, using fallback`);
    return null;
  }
}

// LOAD ALL MODULES
console.log("üì¶ Loading enhanced command modules...");

// ENHANCED COMMAND MODULES
const startCommand = safeRequire("./commands/start", "Start Command");
const dailyCommands = safeRequire("./commands/daily", "Enhanced Daily Commands"); // This is our new enhanced version
const paymentCommands = safeRequire("./commands/payment", "Payment Commands");
const vipCommands = safeRequire("./commands/vip", "VIP Commands");
const adminCommands = safeRequire("./commands/admin", "Admin Commands");
const badgesCommands = safeRequire("./commands/badges", "Badges Commands");
const quotesCommands = safeRequire("./commands/quotes", "Quotes Commands");
const bookingCommands = safeRequire("./commands/booking", "Booking Commands");
const financialQuiz = safeRequire("./commands/financial-quiz", "Financial Quiz");
const freeTools = safeRequire("./commands/free-tools", "Free Tools");
const previewCommands = safeRequire("./commands/preview", "Preview Commands");
const marketingCommands = safeRequire("./commands/marketing", "Marketing Commands");
const marketingContent = safeRequire("./commands/marketing-content", "Marketing Content");
const extendedContent = safeRequire("./commands/extended-content", "Extended Content");
const thirtyDayAdmin = safeRequire("./commands/30day-admin", "30 Day Admin");
const toolsTemplates = safeRequire("./commands/tools-templates", "Tools Templates");
const progressTracker = safeRequire("./commands/progress-tracker", "Progress Tracker");
const tierFeatures = safeRequire("./commands/tier-features", "Tier Features");
const adminConversion = safeRequire("./commands/admin-conversion", "Admin Conversion");
const adminDatabase = safeRequire("./commands/admin-database", "Admin Database");
const adminPerformance = safeRequire("./commands/admin-performance", "Admin Performance");
const adminTestimonials = safeRequire("./commands/admin-testimonials", "Admin Testimonials");
const AICommandHandler = safeRequire("./commands/ai-command-handler", "AI Command Handler");

console.log("üì¶ Loading service modules...");

// SERVICE MODULES (keeping your existing ones)
const scheduler = safeRequire("./services/scheduler", "Scheduler");
const analytics = safeRequire("./services/analytics", "Analytics");
const celebrations = safeRequire("./services/celebrations", "Celebrations");
const accessControl = safeRequire("./services/access-control", "Access Control");
const progressBadges = safeRequire("./services/progress-badges", "Progress Badges");
const emojiReactions = safeRequire("./services/emoji-reactions", "Emoji Reactions");
const contentScheduler = safeRequire("./services/content-scheduler", "Content Scheduler");
const conversionOptimizer = safeRequire("./services/conversion-optimizer", "Conversion Optimizer");
const databaseConnectionPool = safeRequire("./services/database-connection-pool", "Database Connection Pool");
const databaseIndexing = safeRequire("./services/database-indexing", "Database Indexing");
const databaseOptimizer = safeRequire("./services/database-optimizer", "Database Optimizer");
const databasePerformanceMonitor = safeRequire("./services/database-performance-monitor", "Database Performance Monitor");
const marketingAutomation = safeRequire("./services/marketing-automation", "Marketing Automation");
const messageQueue = safeRequire("./services/message-queue", "Message Queue");
const performanceMonitor = safeRequire("./services/performance-monitor", "Performance Monitor");
const responseCache = safeRequire("./services/response-cache", "Response Cache");
const revenueOptimizer = safeRequire("./services/revenue-optimizer", "Revenue Optimizer");
const salesFunnel = safeRequire("./services/sales-funnel", "Sales Funnel");
const smartAutomation = safeRequire("./services/smart-automation", "Smart Automation");
const smartInteractionManager = safeRequire("./services/smart-interaction-manager", "Smart Interaction Manager");
const testimonialCollector = safeRequire("./services/testimonial-collector", "Testimonial Collector");
const tierManager = safeRequire("./services/tier-manager", "Tier Manager");
const upsellAutomation = safeRequire("./services/upsell-automation", "Upsell Automation");
const botHealthMonitor = safeRequire("./services/bot-health-monitor", "Bot Health Monitor");
const khmerQuotes = safeRequire("./services/khmer-quotes", "Khmer Quotes");
const aiIntegration = safeRequire("./services/aiIntegration", "AI Integration");

console.log("üì¶ Loading utility modules...");

// UTILITY MODULES
const aiHelper = safeRequire("./utils/aiHelper", "AI Helper");
const messageSplitter = safeRequire("./utils/message-splitter", "Message Splitter");

console.log("üì¶ Loading model modules...");

// MODEL MODULES
const User = safeRequire("./models/User", "User Model");
const Progress = safeRequire("./models/Progress", "Progress Model");

console.log("üì¶ Loading config modules...");

// CONFIG MODULES
const aiConfig = safeRequire("./config/ai-config", "AI Config");

// Initialize bot with enhanced polling options
const bot = new TelegramBot(process.env.BOT_TOKEN, { 
  polling: false,
  request: {
    agentOptions: {
      keepAlive: true,
      family: 4
    }
  }
});

const app = express();

// Enhanced middleware
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true }));

// Enhanced message deduplication
const processedMessages = new Set();
function isDuplicateMessage(msg) {
  const messageId = `${msg.chat.id}-${msg.message_id}-${Date.now()}`;
  if (processedMessages.has(messageId)) return true;
  processedMessages.add(messageId);
  
  // Clean up old messages every 1000 entries
  if (processedMessages.size > 1000) {
    const oldEntries = Array.from(processedMessages).slice(0, 500);
    oldEntries.forEach(entry => processedMessages.delete(entry));
  }
  return false;
}

// Enhanced database context for all modules
const dbContext = { 
  db, 
  users, 
  progress, 
  eq, 
  pool,
  // Add helper functions for the enhanced daily commands
  findUser: async (telegramId) => {
    return await db.select().from(users).where(eq(users.telegram_id, telegramId)).limit(1);
  },
  findProgress: async (userId) => {
    return await db.select().from(progress).where(eq(progress.user_id, userId)).limit(1);
  },
  updateProgress: async (userId, updateData) => {
    return await db.update(progress).set(updateData).where(eq(progress.user_id, userId));
  },
  updateUser: async (telegramId, updateData) => {
    return await db.update(users).set(updateData).where(eq(users.telegram_id, telegramId));
  }
};

// Initialize AI Command Handler with enhanced database context
let aiHandler = null;
if (AICommandHandler) {
  try {
    aiHandler = new AICommandHandler(dbContext);
    console.log("‚úÖ AI Command Handler initialized with enhanced database context");
  } catch (error) {
    console.log("‚ö†Ô∏è AI Command Handler initialization failed:", error.message);
  }
}

console.log("üîå Setting up enhanced command routing...");

// ENHANCED ROUTE HANDLERS WITH BEAUTIFUL UI

// Route /start command
bot.onText(/\/start/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (startCommand && startCommand.handle) {
      await startCommand.handle(msg, bot, dbContext);
    } else {
      // Enhanced fallback start command
      const welcomeMessage = `üî± **·ûü·ûº·ûò·ûü·üí·ûú·û∂·ûÇ·ûò·ûì·üç·ûò·ûÄ·ûÄ·û∂·ûì·üã 7-Day Money Flow Reset‚Ñ¢!** üî±

üí∞ *·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô ·üß ·ûê·üí·ûÑ·üÉ ·ûá·û∂·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö*

üéØ **·ûè·ûò·üí·ûõ·üÉ·ûñ·û∑·ûü·üÅ·ûü:** $24 USD (·ûî·ûâ·üí·ûÖ·ûª·üá·ûñ·û∏ $47)
üè∑Ô∏è **·ûÄ·ûº·ûä:** LAUNCH50

**üìö ·û¢·üí·ûú·û∏·ûä·üÇ·ûõ·û¢·üí·ûì·ûÄ·ûì·ûπ·ûÑ·ûë·ûë·ûΩ·ûõ·ûî·û∂·ûì:**
‚úÖ ·ûò·üÅ·ûö·üÄ·ûì ·üß ·ûê·üí·ûÑ·üÉ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚úÖ ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô·ûî·û∂·ûì·ûõ·üí·û¢
‚úÖ ·ûÄ·û∂·ûö·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûÖ·üÜ·ûé·û∂·ûô
‚úÖ ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ
‚úÖ ·ûï·üÇ·ûì·ûÄ·û∂·ûö·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª·ûÖ·üí·ûî·û∂·ûü·üã

üöÄ **·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò:** /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûè·ûò·üí·ûõ·üÉ
üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`;

      await bot.sendMessage(msg.chat.id, welcomeMessage, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /start:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Enhanced /day commands with beautiful UI
bot.onText(/\/day([1-7])/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (dailyCommands && dailyCommands.handle) {
      // Use our enhanced daily commands with beautiful UI
      await dailyCommands.handle(msg, match, bot);
    } else {
      // Enhanced fallback with basic UI
      const dayNumber = match[1];
      const fallbackMessage = `üî± **·ûê·üí·ûÑ·üÉ·ûë·û∏ ${dayNumber}: ·ûò·üÅ·ûö·üÄ·ûì·ûÄ·üÜ·ûñ·ûª·ûÑ·ûò·ûÄ·ûä·ûõ·üã** üî±

üìö *·ûò·û∂·ûè·û∑·ûÄ·û∂·ûì·ûπ·ûÑ·ûò·ûÄ·ûä·ûõ·üã·ûÜ·û∂·ûî·üã·üó*

üíé **·ûè·ûò·üí·ûõ·üÉ·ûö·üÜ·ûñ·ûπ·ûÑ·ûë·ûª·ûÄ:** $300+
‚è±Ô∏è **·ûö·ûô·üà·ûñ·üÅ·ûõ:** 30 ·ûì·û∂·ûë·û∏
üìä **·ûÄ·ûò·üí·ûö·û∑·ûè:** ·ûÑ·û∂·ûô·ûü·üí·ûö·ûΩ·ûõ

üéØ **·ûü·ûº·ûò·ûö·ûÑ·üã·ûÖ·û∂·üÜ:** ·ûò·üÅ·ûö·üÄ·ûì·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·ûö·üÄ·ûî·ûÖ·üÜ

üìû **·ûë·û∂·ûÄ·üã·ûë·ûÑ:** @Chendasum ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûò·û∂·ûè·û∑·ûÄ·û∂`;

      await bot.sendMessage(msg.chat.id, fallbackMessage, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /day:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Enhanced callback query handler for beautiful UI interactions
bot.on('callback_query', async (query) => {
  try {
    if (dailyCommands && dailyCommands.handleCallback) {
      // Route to our enhanced daily commands callback handler
      await dailyCommands.handleCallback(query, bot);
    } else {
      // Basic fallback
      await bot.answerCallbackQuery(query.id, { 
        text: "·ûò·ûª·ûÅ·ûÑ·û∂·ûö·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç", 
        show_alert: false 
      });
    }
  } catch (error) {
    console.error("Error in callback query:", error);
    await bot.answerCallbackQuery(query.id, { 
      text: "·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûî·ûÖ·üí·ûÖ·üÅ·ûÄ·ûë·üÅ·ûü", 
      show_alert: true 
    });
  }
});

// Enhanced /pricing command
bot.onText(/\/pricing/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (paymentCommands && paymentCommands.pricing) {
      await paymentCommands.pricing(msg, bot, dbContext);
    } else {
      const pricingMessage = `üí∞ **·ûè·ûò·üí·ûõ·üÉ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ 7-Day Money Flow Reset‚Ñ¢**

üéØ **·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûü·û∂·ûò·ûâ·üí·ûâ (Essential Program)**
üíµ **·ûè·ûò·üí·ûõ·üÉ:** $24 USD

üíé **·ûú·û∑·ûí·û∏·ûë·ûº·ûë·û∂·ûè·üã:**
‚Ä¢ **ABA Bank:** 000 194 742
‚Ä¢ **ACLEDA Bank:** 092 798 169  
‚Ä¢ **Wing:** 102 534 677
‚Ä¢ **·ûà·üí·ûò·üÑ·üá:** SUM CHENDA

üöÄ **·ûÄ·û∂·ûö·ûí·û∂·ûì·û∂:** ·ûö·ûÄ·ûî·üí·ûö·û∂·ûÄ·üã·ûî·û∂·ûì $50+ ·ûÄ·üí·ûì·ûª·ûÑ ·üß ·ûê·üí·ûÑ·üÉ ·û¨ ·ûü·ûÑ·ûî·üí·ûö·û∂·ûÄ·üã·ûú·û∑·ûâ!

üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`;
      await bot.sendMessage(msg.chat.id, pricingMessage, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /pricing:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Enhanced /payment command
bot.onText(/\/payment/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (paymentCommands && paymentCommands.instructions) {
      await paymentCommands.instructions(msg, bot, dbContext);
    } else {
      const paymentMessage = `üí≥ **·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûë·ûº·ûë·û∂·ûè·üã**

üè¶ **ABA Bank:** 000 194 742
üì± **Wing:** 102 534 677
üè¶ **ACLEDA Bank:** 092 798 169
‚Ä¢ **·ûà·üí·ûò·üÑ·üá:** SUM CHENDA
‚Ä¢ **·ûÖ·üÜ·ûì·ûΩ·ûì:** $24 USD

üì∏ **·ûá·üÜ·û†·û∂·ûì:**
1. ·ûë·ûº·ûë·û∂·ûè·üã·ûè·û∂·ûò·ûÇ·ûé·ûì·û∏·ûÅ·û∂·ûÑ·ûõ·ûæ
2. ·ûê·ûè·ûö·ûº·ûî·ûî·ûÑ·üí·ûÄ·û∂·ûì·üã·ûä·üÉ
3. ·ûï·üí·ûâ·ûæ·ûö·ûº·ûî·ûó·û∂·ûñ·ûò·ûÄ @Chendasum
4. ·ûö·ûÑ·üã·ûÖ·û∂·üÜ·ûÄ·û∂·ûö·ûî·ûâ·üí·ûá·û∂·ûÄ·üã (1-2 ·ûò·üâ·üÑ·ûÑ)

üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`;
      await bot.sendMessage(msg.chat.id, paymentMessage, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /payment:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Enhanced /help command
bot.onText(/\/help/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (accessControl && accessControl.getTierSpecificHelp) {
      await accessControl.getTierSpecificHelp(msg, bot, dbContext);
    } else {
      const helpMessage = `üì± **·ûá·üÜ·ûì·ûΩ·ûô (Help)**

üåü **7-Day Money Flow Reset‚Ñ¢**

üì± **·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûü·üÜ·ûÅ·û∂·ûì·üã:**
‚Ä¢ \`/start\` - ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò
‚Ä¢ \`/pricing\` - ·ûò·ûæ·ûõ·ûè·ûò·üí·ûõ·üÉ
‚Ä¢ \`/payment\` - ·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã
‚Ä¢ \`/help\` - ·ûá·üÜ·ûì·ûΩ·ûô
‚Ä¢ \`/ai_help\` - ·ûá·üÜ·ûì·ûΩ·ûô AI

üìö **·ûò·üÅ·ûö·üÄ·ûì:**
‚Ä¢ \`/day1\` - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°
‚Ä¢ \`/day2\` - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢
‚Ä¢ ... ·ûä·ûõ·üã \`/day7\`

ü§ñ **AI Commands:**
‚Ä¢ \`/ask [·ûü·üÜ·ûé·ûΩ·ûö]\` - ·ûü·ûΩ·ûö AI
‚Ä¢ \`/analyze\` - ·ûú·û∑·ûó·û∂·ûÇ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª
‚Ä¢ \`/coach\` - ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûï·üí·ûë·û∂·ûõ·üã·ûÅ·üí·ûõ·ûΩ·ûì
‚Ä¢ \`/find_leaks\` - ·ûö·ûÄ·ûò·ûæ·ûõ Money Leaks

üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`;
      await bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /help:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Route VIP commands
bot.onText(/\/vip/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (vipCommands && vipCommands.info) {
      await vipCommands.info(msg, bot, dbContext);
    } else {
      await bot.sendMessage(msg.chat.id, "üëë **VIP Program** - ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum", { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /vip:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Enhanced admin commands
bot.onText(/\/admin_users/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (adminCommands && adminCommands.showUsers) {
      await adminCommands.showUsers(msg, bot, dbContext);
    } else {
      await bot.sendMessage(msg.chat.id, "üë®‚Äçüíº **Admin users** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî", { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /admin_users:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

bot.onText(/\/admin_analytics/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (adminCommands && adminCommands.showAnalytics) {
      await adminCommands.showAnalytics(msg, bot, dbContext);
    } else {
      await bot.sendMessage(msg.chat.id, "üìä **Admin analytics** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî", { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /admin_analytics:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Route badges and progress
bot.onText(/\/badges/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (badgesCommands && badgesCommands.showBadges) {
      await badgesCommands.showBadges(msg, bot, dbContext);
    } else {
      await bot.sendMessage(msg.chat.id, "üèÜ **Badges** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî", { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /badges:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

bot.onText(/\/progress/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (badgesCommands && badgesCommands.showProgress) {
      await badgesCommands.showProgress(msg, bot, dbContext);
    } else {
      // Enhanced progress fallback
      if (dailyCommands && dailyCommands.generateProgramOverview) {
        // Try to show progress using our enhanced daily commands
        const userId = msg.from.id;
        try {
          const userResult = await db.select().from(users).where(eq(users.telegram_id, userId)).limit(1);
          const progressResult = await db.select().from(progress).where(eq(progress.user_id, userId)).limit(1);
          
          if (userResult.length > 0 && progressResult.length > 0) {
            const userProgress = progressResult[0];
            const completedDays = [];
            for (let i = 1; i <= 7; i++) {
              if (userProgress[`day_${i}_completed`]) {
                completedDays.push(i);
              }
            }
            
            const overviewMessage = dailyCommands.generateProgramOverview({
              completedDays,
              currentDay: userProgress.current_day || 1
            });
            
            await bot.sendMessage(msg.chat.id, overviewMessage, { parse_mode: 'Markdown' });
          } else {
            await bot.sendMessage(msg.chat.id, "üìà **Progress** - ·ûü·ûº·ûò·ûÖ·ûª·ûÖ /start ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·üî", { parse_mode: 'Markdown' });
          }
        } catch (error) {
          await bot.sendMessage(msg.chat.id, "üìà **Progress** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî", { parse_mode: 'Markdown' });
        }
      } else {
        await bot.sendMessage(msg.chat.id, "üìà **Progress** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî", { parse_mode: 'Markdown' });
      }
    }
  } catch (error) {
    console.error("Error in /progress:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Route quotes
bot.onText(/\/quote/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (quotesCommands && quotesCommands.dailyQuote) {
      await quotesCommands.dailyQuote(msg, bot, dbContext);
    } else {
      const quotes = [
        "üí∞ \"·ûÄ·û∂·ûö·ûü·ûì·üí·ûü·üÜ·ûè·û∑·ûÖ·üó·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ ·ûì·û∂·üÜ·û±·üí·ûô·ûò·û∂·ûì·ûë·üí·ûö·ûñ·üí·ûô·ûü·ûò·üí·ûî·ûè·üí·ûè·û∑·ûí·üÜ\"",
        "üéØ \"·ûÇ·üÑ·ûõ·ûä·üÖ·ûä·üÑ·ûô·ûÇ·üí·ûò·û∂·ûì·ûï·üÇ·ûì·ûÄ·û∂·ûö ·ûÇ·üí·ûö·û∂·ûì·üã·ûè·üÇ·ûá·û∂·ûÄ·üí·ûè·û∏·ûü·üí·ûö·ûò·üÉ\"",
        "üìà \"·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûõ·ûæ·ûÅ·üí·ûõ·ûΩ·ûì·ûØ·ûÑ ·ûÇ·û∫·ûá·û∂·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûõ·üí·û¢·ûî·üÜ·ûï·ûª·ûè\"",
        "üíé \"·ûõ·ûª·ûô·ûò·û∑·ûì·û¢·û∂·ûÖ·ûë·û∑·ûâ·ûü·üÅ·ûÖ·ûÄ·üí·ûè·û∏·ûü·ûª·ûÅ ·ûè·üÇ·û¢·û∂·ûÖ·ûá·ûΩ·ûô·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûî·ûâ·üí·û†·û∂·ûî·û∂·ûì\"",
        "üöÄ \"·ûÄ·û∂·ûö·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÇ·û∫·ûñ·û∂·ûÄ·üã·ûÄ·ûé·üí·ûè·û∂·ûõ·ûì·üÉ·ûá·üÑ·ûÇ·ûá·üê·ûô\""
      ];
      const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
      await bot.sendMessage(msg.chat.id, `üìú **Quote ·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ**\n\n${randomQuote}\n\nüåü *7-Day Money Flow Reset‚Ñ¢*`, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /quote:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Route free tools
bot.onText(/\/financial_quiz/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (financialQuiz && financialQuiz.startQuiz) {
      await financialQuiz.startQuiz(msg, bot, dbContext);
    } else {
      await bot.sendMessage(msg.chat.id, "üìä **Financial Quiz** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî", { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /financial_quiz:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Enhanced /faq command
bot.onText(/\/faq|FAQ|faq/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (accessControl && accessControl.getFAQ) {
      await accessControl.getFAQ(msg, bot, dbContext);
    } else {
      const faqMessage = `‚ùì **·ûü·üÜ·ûé·ûΩ·ûö·ûâ·ûπ·ûÄ·ûâ·û∂·ûî·üã (FAQ)**

üì± **·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûü·üÜ·ûÅ·û∂·ûì·üã:**
‚Ä¢ \`/start\` - ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò
‚Ä¢ \`/pricing\` - ·ûò·ûæ·ûõ·ûè·ûò·üí·ûõ·üÉ
‚Ä¢ \`/payment\` - ·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã
‚Ä¢ \`/help\` - ·ûá·üÜ·ûì·ûΩ·ûô
‚Ä¢ \`/faq\` - ·ûü·üÜ·ûé·ûΩ·ûö·ûâ·ûπ·ûÄ·ûâ·û∂·ûî·üã

üí∞ **·û¢·üÜ·ûñ·û∏·ûè·ûò·üí·ûõ·üÉ:**
‚Ä¢ **·ûè·ûò·üí·ûõ·üÉ:** $24 USD (Essential)
‚Ä¢ **·ûë·ûº·ûë·û∂·ûè·üã·ûè·û∂·ûò:** ABA, ACLEDA, Wing
‚Ä¢ **·ûî·ûâ·üí·ûá·û∂·ûÄ·üã·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã:** 1-2 ·ûò·üâ·üÑ·ûÑ

üìö **·û¢·üÜ·ûñ·û∏·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏:**
‚Ä¢ **·ûö·ûô·üà·ûñ·üÅ·ûõ:** 7 ·ûê·üí·ûÑ·üÉ
‚Ä¢ **·ûó·û∂·ûü·û∂:** ·ûÅ·üí·ûò·üÇ·ûö 100%
‚Ä¢ **·ûÖ·üÜ·ûé·û∂·ûô·ûñ·üÅ·ûõ:** 15-20 ·ûì·û∂·ûë·û∏/·ûê·üí·ûÑ·üÉ

üîß **·ûî·ûÖ·üí·ûÖ·üÅ·ûÄ·ûë·üÅ·ûü:**
‚Ä¢ **·ûî·üí·ûö·ûæ:** Telegram app
‚Ä¢ **·ûë·û∑·ûì·üí·ûì·ûì·üê·ûô:** ·ûö·ûÄ·üí·ûü·û∂·ûë·ûª·ûÄ·ûü·ûª·ûú·ûè·üí·ûê·û∑·ûó·û∂·ûñ
‚Ä¢ **·ûá·üÜ·ûì·ûΩ·ûô:** 24/7

üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`;
      await bot.sendMessage(msg.chat.id, faqMessage, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /faq:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Route extended content
bot.onText(/\/extended(\d+)/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (extendedContent && extendedContent.handleExtendedDay) {
      await extendedContent.handleExtendedDay(msg, bot, parseInt(match[1]));
    } else {
      await bot.sendMessage(msg.chat.id, `üìö **Extended Day ${match[1]}** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî`, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /extended:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// ENHANCED AI COMMAND ROUTES - Updated with beautiful formatting
bot.onText(/\/ask\s+(.+)/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (aiHandler) {
      await aiHandler.handleAskCommand(bot, msg);
    } else {
      const question = match[1];
      const response = `ü§ñ **Claude AI ·ûá·üÜ·ûì·ûΩ·ûô**

**·ûü·üÜ·ûé·ûΩ·ûö:** "${question}"

üí° **·ûÄ·û∂·ûö·ûÜ·üí·ûõ·ûæ·ûô·ûè·ûî:** Claude AI ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·ûÄ·üÇ·ûõ·ûò·üí·û¢·üî ·ûü·ûº·ûò·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûá·üÜ·ûì·ûΩ·ûô·ûï·üí·ûë·û∂·ûõ·üã·üî

üéØ **·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûü·ûΩ·ûö·û¢·üÜ·ûñ·û∏:**
‚Ä¢ ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô
‚Ä¢ ·ûÄ·û∂·ûö·ûü·ûì·üí·ûü·üÜ
‚Ä¢ ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ
‚Ä¢ ·ûî·ûâ·üí·û†·û∂·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª

üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`;
      await bot.sendMessage(msg.chat.id, response, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /ask:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

bot.onText(/\/analyze/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (aiHandler) {
      await aiHandler.handleAnalyzeCommand(bot, msg);
    } else {
      await bot.sendMessage(msg.chat.id, "üìä **Financial Analysis** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum", { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /analyze:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

bot.onText(/\/coach/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (aiHandler) {
      await aiHandler.handleCoachCommand(bot, msg);
    } else {
      const coachMessage = `üéØ **AI Coach - ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûï·üí·ûë·û∂·ûõ·üã·ûÅ·üí·ûõ·ûΩ·ûì**

üí™ **·ûü·ûº·ûò·ûü·üí·ûú·û∂·ûÇ·ûò·ûì·üç·ûò·ûÄ·ûÄ·û∂·ûì·üã AI Coach!**

üìä **·ûî·ûÖ·üí·ûÖ·ûª·ûî·üí·ûî·ûì·üí·ûì AI Coach ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî**

üéØ **·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ:**
‚Ä¢ \`/ask [·ûü·üÜ·ûé·ûΩ·ûö]\` - ·ûü·ûΩ·ûö Claude AI
‚Ä¢ \`/help\` - ·ûá·üÜ·ûì·ûΩ·ûô·ûë·ûº·ûë·üÖ
‚Ä¢ @Chendasum - ·ûÄ·û∂·ûö·ûî·üí·ûö·ûπ·ûÄ·üí·ûü·û∂·ûï·üí·ûë·û∂·ûõ·üã

üí° **·ûß·ûë·û∂·û†·ûö·ûé·üç:** \`/ask ·ûè·ûæ·ûÅ·üí·ûâ·ûª·üÜ·ûÇ·ûΩ·ûö·ûü·ûì·üí·ûü·üÜ·ûô·üâ·û∂·ûÑ·ûé·û∂?\`

üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`;
      await bot.sendMessage(msg.chat.id, coachMessage, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /coach:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

bot.onText(/\/find_leaks/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (aiHandler) {
      await aiHandler.handleFindLeaksCommand(bot, msg);
    } else {
      await bot.sendMessage(msg.chat.id, "üîç **Money Leak Detection** - ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·û¢·ûó·û∑·ûú·ûå·üí·ûç·üî ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum", { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /find_leaks:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

bot.onText(/\/ai_help/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    if (aiHandler) {
      await aiHandler.handleAIHelpCommand(bot, msg);
    } else {
      const helpMessage = `ü§ñ **Claude AI ·ûá·üÜ·ûì·ûΩ·ûô**

üéØ **·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂ AI:**
‚Ä¢ \`/ask [·ûü·üÜ·ûé·ûΩ·ûö]\` - ·ûü·ûΩ·ûö Claude AI ·û¢·üí·ûú·û∏·ûÄ·üè·ûî·û∂·ûì
‚Ä¢ \`/analyze\` - ·ûú·û∑·ûó·û∂·ûÇ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª
‚Ä¢ \`/coach\` - ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûï·üí·ûë·û∂·ûõ·üã·ûÅ·üí·ûõ·ûΩ·ûì
‚Ä¢ \`/find_leaks\` - ·ûö·ûÄ·ûò·ûæ·ûõ Money Leaks
‚Ä¢ \`/ai_help\` - ·ûò·ûæ·ûõ·ûò·üÅ·ûì·ûª·ûì·üÅ·üá

üí° **·ûß·ûë·û∂·û†·ûö·ûé·üç·ûü·üÜ·ûé·ûΩ·ûö:**
‚Ä¢ \`/ask ·ûè·ûæ·ûÅ·üí·ûâ·ûª·üÜ·ûÇ·ûΩ·ûö·ûü·ûì·üí·ûü·üÜ·ûô·üâ·û∂·ûÑ·ûé·û∂?\`
‚Ä¢ \`/ask ·ûÖ·üÜ·ûé·û∂·ûô·û¢·üí·ûú·û∏·ûÅ·üí·ûõ·üá·ûä·üÇ·ûõ·û¢·û∂·ûÖ·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô?\`
‚Ä¢ \`/ask ·ûè·ûæ·ûí·üí·ûú·ûæ·ûô·üâ·û∂·ûÑ·ûé·û∂·ûä·ûæ·ûò·üí·ûî·û∏·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ?\`

üîÆ **Claude AI ·ûñ·û∑·ûü·üÅ·ûü·ûî·üÜ·ûï·ûª·ûè:**
‚Ä¢ ·ûÜ·üí·ûõ·û∂·ûè·ûú·üÉ ·ûì·û∑·ûÑ·ûô·ûõ·üã·ûñ·û∏·ûî·ûö·û∑·ûî·ûë
‚Ä¢ ·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª·ûï·üí·ûë·û∂·ûõ·üã·ûÅ·üí·ûõ·ûΩ·ûì
‚Ä¢ ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûè·û∂·ûò·ûü·üí·ûê·û∂·ûì·ûÄ·û∂·ûö·ûé·üç·ûñ·û∑·ûè
‚Ä¢ ·ûá·üÜ·ûì·ûΩ·ûô·ûá·û∂·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ

üöÄ **·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò:** \`/ask ·ûè·ûæ·ûÅ·üí·ûâ·ûª·üÜ·û¢·û∂·ûÖ·ûü·ûì·üí·ûü·üÜ·ûî·û∂·ûì·ûô·üâ·û∂·ûÑ·ûé·û∂?\`

üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`;
      await bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    console.error("Error in /ai_help:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Enhanced text message handling
bot.on("message", async (msg) => {
  if (!msg.text || msg.text.startsWith('/')) return;
  
  const text = msg.text.toUpperCase().trim();
  
  try {
    // Route completion messages to enhanced daily commands
    if (text.match(/^DAY\s*\d+\s*COMPLETE$/)) {
      if (dailyCommands && dailyCommands.markDayComplete) {
        const dayMatch = text.match(/^DAY\s*(\d+)\s*COMPLETE$/);
        if (dayMatch) {
          const dayNumber = parseInt(dayMatch[1]);
          const userId = msg.from.id;
          const success = await dailyCommands.markDayComplete(userId, dayNumber);
          if (success) {
            await bot.sendMessage(msg.chat.id, `üéâ **·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûê·üí·ûÑ·üÉ·ûë·û∏ ${dayNumber}!**\n\n‚úÖ **·ûÄ·û∂·ûö·ûú·ûå·üí·ûç·ûì·ûó·û∂·ûñ:** ·ûî·û∂·ûì·ûÄ·ûè·üã·ûè·üí·ûö·û∂·ûö·ûΩ·ûÖ·ûö·û∂·ûõ·üã\nüöÄ **·ûî·ûì·üí·ûë·û∂·ûî·üã:** /day${dayNumber + 1 <= 7 ? dayNumber + 1 : 7}`, { parse_mode: 'Markdown' });
          }
        }
      }
      return;
    }
    
    // Route VIP applications
    if (text === "VIP APPLY") {
      if (vipCommands && vipCommands.apply) {
        await vipCommands.apply(msg, bot, dbContext);
      }
      return;
    }
    
    // Route program completion
    if (text === "PROGRAM COMPLETE") {
      if (dailyCommands && dailyCommands.handleProgramComplete) {
        await dailyCommands.handleProgramComplete(msg, bot, dbContext);
      } else {
        await bot.sendMessage(msg.chat.id, `üéì **·û¢·ûî·û¢·ûö·ûü·û∂·ûë·ûö! ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏!**

üèÜ **Cambodia Money Flow Graduate**
üí∞ **·ûü·ûò·û∑·ûë·üí·ûí·ûï·ûõ:** ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûö·üÄ·ûì·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô·ûî·û∂·ûì·ûõ·üí·û¢
üöÄ **·ûî·ûì·üí·ûë·û∂·ûî·üã:** ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP ·ûì·ûπ·ûÑ·ûò·ûÄ·ûä·ûõ·üã·ûÜ·û∂·ûî·üã·üó

üí¨ **·ûá·üÜ·ûì·ûΩ·ûô:** @Chendasum`, { parse_mode: 'Markdown' });
      }
      return;
    }
    
    // Route ready for day 1
    if (text.includes("READY FOR DAY 1") || text === "READY") {
      if (dailyCommands && dailyCommands.handleReadyForDay1) {
        await dailyCommands.handleReadyForDay1(msg, bot, dbContext);
      } else {
        await bot.sendMessage(msg.chat.id, `üöÄ **·ûè·üí·ûö·üÄ·ûò·ûÅ·üí·ûõ·ûΩ·ûì·ûö·ûΩ·ûÖ·ûö·û∂·ûõ·üã!**

‚úÖ **·ûü·ûº·ûò·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò:** /day1
üéØ **·ûÇ·üÑ·ûõ·ûä·üÖ:** ·ûö·ûÄ·ûî·üí·ûö·û∂·ûÄ·üã $50+ ·ûÄ·üí·ûì·ûª·ûÑ ·ü£·ü† ·ûì·û∂·ûë·û∏

üí™ **·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûí·üí·ûú·ûæ·ûî·û∂·ûì!**`, { parse_mode: 'Markdown' });
      }
      return;
    }
    
  } catch (error) {
    console.error("Error in enhanced message handler:", error);
  }
});

// Enhanced Express routes for health checks
app.get("/", (req, res) => {
  const loadedModules = [
    startCommand ? 'start' : null,
    dailyCommands ? 'enhanced-daily' : null,
    paymentCommands ? 'payment' : null,
    vipCommands ? 'vip' : null,
    adminCommands ? 'admin' : null,
    badgesCommands ? 'badges' : null,
    quotesCommands ? 'quotes' : null,
    bookingCommands ? 'booking' : null,
    financialQuiz ? 'financial-quiz' : null,
    freeTools ? 'free-tools' : null,
    previewCommands ? 'preview' : null,
    extendedContent ? 'extended-content' : null,
    aiHandler ? 'ai-handler' : null,
    scheduler ? 'scheduler' : null,
    analytics ? 'analytics' : null,
    celebrations ? 'celebrations' : null,
    accessControl ? 'access-control' : null,
  ].filter(Boolean);

  res.json({
    status: "7-Day Money Flow Bot - Enhanced UI Edition",
    version: "4.0-enhanced-ui",
    mode: "Enhanced daily commands with beautiful interface",
    modules_loaded: loadedModules.length,
    loaded_modules: loadedModules,
    ai_status: aiHandler ? "active" : "fallback",
    ui_features: [
      "Interactive day navigation",
      "Beautiful progress bars",
      "Enhanced Markdown formatting",
      "Callback query handling",
      "Rich lesson overviews",
      "Visual completion tracking"
    ],
    architecture: "Enhanced orchestrator with beautiful UI and AI integration"
  });
});

app.get("/health", (req, res) => {
  res.json({ 
    status: "healthy",
    database: "connected",
    bot: "active",
    modules: "loaded",
    ai: aiHandler ? "active" : "fallback",
    ui: "enhanced",
    daily_commands: dailyCommands ? "enhanced" : "fallback"
  });
});

// Enhanced webhook endpoint
app.post(`/bot${process.env.BOT_TOKEN}`, async (req, res) => {
  try {
    await bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error("Enhanced webhook error:", error.message);
    res.sendStatus(500);
  }
});

// Initialize enhanced scheduler
if (scheduler && scheduler.sendDailyMessages) {
  cron.schedule("0 9 * * *", async () => {
    console.log("üïò Sending enhanced daily messages...");
    try {
      await scheduler.sendDailyMessages(bot);
    } catch (error) {
      console.error("Error sending enhanced daily messages:", error);
    }
  });
  console.log("‚úÖ Enhanced daily messages cron job scheduled");
}

// Initialize content scheduler
if (contentScheduler) {
  try {
    const contentSchedulerInstance = new contentScheduler(bot);
    contentSchedulerInstance.start();
    console.log("‚úÖ Enhanced content scheduler started");
  } catch (error) {
    console.log("‚ö†Ô∏è Content scheduler not started:", error.message);
  }
}

// Enhanced error handling
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// Enhanced server startup
async function startServer() {
  await initDatabase();
  
  // Set webhook
  const webhookUrl = `https://money7daysreset-production.up.railway.app/bot${process.env.BOT_TOKEN}`;
  try {
    await bot.setWebHook(webhookUrl);
    console.log("‚úÖ Enhanced webhook configured");
  } catch (error) {
    console.error("‚ùå Webhook setup failed:", error.message);
  }
  
  const PORT = process.env.PORT || 5000;
  app.listen(PORT, () => {
    console.log(`üöÄ Enhanced 7-Day Money Flow Bot running on port ${PORT}`);
    console.log("üìÅ All modules loaded with enhanced UI system");
    console.log("üîå Commands routed to enhanced modules with beautiful interface");
    console.log(`ü§ñ AI Integration: ${aiHandler ? 'Active' : 'Fallback Mode'}`);
    console.log("üé® UI Features: Interactive navigation, progress bars, rich formatting");
    console.log("üíé Enhanced daily commands with website-like experience");
  });
}

startServer();
