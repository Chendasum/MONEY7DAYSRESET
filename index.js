const programCelebration = celebrations?.programCompleteCelebration
          ? celebrations.programCompleteCelebration(`üéØ ·ûá·üÜ·û†·û∂·ûì·ûî·ûì·üí·ûë·û∂·ûî·üã:
1Ô∏è‚É£ ·û¢·ûì·ûª·ûú·ûè·üí·ûè·ûï·üÇ·ûì·ûÄ·û∂·ûö ·ü£·ü† ·ûê·üí·ûÑ·üÉ
2Ô∏è‚É£ ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö·ûî·üí·ûö·ûÖ·û∂·üÜ·ûü·ûî·üí·ûè·û∂·û†·üç
3Ô∏è‚É£ ·ûò·û∂·ûì·ûü·üÜ·ûé·ûΩ·ûö? ·ûë·û∂·ûÄ·üã·ûë·ûÑ·ûò·ûÄ·ûî·û∂·ûì!

üöÄ ·ûÖ·ûÑ·üã·ûî·ûì·üí·ûè·ûÄ·ûò·üí·ûö·û∑·ûè·ûî·ûì·üí·ûë·û∂·ûî·üã?
VIP Advanced Program ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÅ·üÇ·ûÄ·üí·ûö·üÑ·ûô!
·ûü·ûΩ·ûö: "VIP PROGRAM INFO"`)
          : `üéä ·û¢·ûî·û¢·ûö·ûü·û∂·ûë·ûö! ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ 7-Day Money Flow Reset‚Ñ¢!

üéØ ·ûá·üÜ·û†·û∂·ûì·ûî·ûì·üí·ûë·û∂·ûî·üã:
1Ô∏è‚É£ ·û¢·ûì·ûª·ûú·ûè·üí·ûè·ûï·üÇ·ûì·ûÄ·û∂·ûö ·ü£·ü† ·ûê·üí·ûÑ·üÉ
2Ô∏è‚É£ ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö·ûî·üí·ûö·ûÖ·û∂·üÜ·ûü·ûî·üí·ûè·û∂·û†·üç
3Ô∏è‚É£ ·ûò·û∂·ûì·ûü·üÜ·ûé·ûΩ·ûö? ·ûë·û∂·ûÄ·üã·ûë·ûÑ·ûò·ûÄ·ûî·û∂·ûì!

üöÄ ·ûÖ·ûÑ·üã·ûî·ûì·üí·ûè·ûÄ·ûò·üí·ûö·û∑·ûè·ûî·ûì·üí·ûë·û∂·ûî·üã?
VIP Advanced Program ·ûÖ·û∂·ûî·üã·ûï·üírequire("dotenv").config();

const express = require("express");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");

console.log("üöÄ Starting 7-Day Money Flow Bot with Full Features...");
console.log("BOT_TOKEN exists:", !!process.env.BOT_TOKEN);
console.log("PORT:", process.env.PORT || 5000);

// Database Models
const User = require("./models/User");
const Progress = require("./models/Progress");

// Command Modules - with error handling for each module
let startCommand, dailyCommands, paymentCommands, vipCommands, adminCommands;
let badgesCommands, quotesCommands, bookingCommands, tierFeatures;
let marketingCommands, marketingContent, extendedContent;
let previewCommands, freeTools, financialQuiz, toolsTemplates;
let progressTracker;

try { startCommand = require("./commands/start"); } catch(e) { console.log("‚ö†Ô∏è start.js not found"); }
try { dailyCommands = require("./commands/daily"); } catch(e) { console.log("‚ö†Ô∏è daily.js not found"); }
try { paymentCommands = require("./commands/payment"); } catch(e) { console.log("‚ö†Ô∏è payment.js not found"); }
try { vipCommands = require("./commands/vip"); } catch(e) { console.log("‚ö†Ô∏è vip.js not found"); }
try { adminCommands = require("./commands/admin"); } catch(e) { console.log("‚ö†Ô∏è admin.js not found"); }
try { badgesCommands = require("./commands/badges"); } catch(e) { console.log("‚ö†Ô∏è badges.js not found"); }
try { quotesCommands = require("./commands/quotes"); } catch(e) { console.log("‚ö†Ô∏è quotes.js not found"); }
try { bookingCommands = require("./commands/booking"); } catch(e) { console.log("‚ö†Ô∏è booking.js not found"); }
try { tierFeatures = require("./commands/tier-features"); } catch(e) { console.log("‚ö†Ô∏è tier-features.js not found"); }
try { marketingCommands = require("./commands/marketing"); } catch(e) { console.log("‚ö†Ô∏è marketing.js not found"); }
try { marketingContent = require("./commands/marketing-content"); } catch(e) { console.log("‚ö†Ô∏è marketing-content.js not found"); }
try { extendedContent = require("./commands/extended-content"); } catch(e) { console.log("‚ö†Ô∏è extended-content.js not found"); }
try { previewCommands = require("./commands/preview"); } catch(e) { console.log("‚ö†Ô∏è preview commands not found"); }
try { freeTools = require("./commands/free-tools"); } catch(e) { console.log("‚ö†Ô∏è free-tools not found"); }
try { financialQuiz = require("./commands/financial-quiz"); } catch(e) { console.log("‚ö†Ô∏è financial-quiz not found"); }
try { toolsTemplates = require("./commands/tools-templates"); } catch(e) { console.log("‚ö†Ô∏è tools-templates.js not found"); }
try { progressTracker = require("./commands/progress-tracker"); } catch(e) { console.log("‚ö†Ô∏è progress-tracker.js not found"); }

// Service Modules - with error handling
let scheduler, analytics, celebrations, progressBadges;
let emojiReactions, AccessControl, ContentScheduler, ConversionOptimizer;

try { scheduler = require("./services/scheduler"); } catch(e) { console.log("‚ö†Ô∏è scheduler.js not found"); }
try { analytics = require("./services/analytics"); } catch(e) { console.log("‚ö†Ô∏è analytics.js not found"); }
try { celebrations = require("./services/celebrations"); } catch(e) { console.log("‚ö†Ô∏è celebrations.js not found"); }
try { progressBadges = require("./services/progress-badges"); } catch(e) { console.log("‚ö†Ô∏è progress-badges.js not found"); }
try { emojiReactions = require("./services/emoji-reactions"); } catch(e) { console.log("‚ö†Ô∏è emoji-reactions.js not found"); }
try { AccessControl = require("./services/access-control"); } catch(e) { console.log("‚ö†Ô∏è access-control.js not found"); }
try { ContentScheduler = require("./services/content-scheduler"); } catch(e) { console.log("‚ö†Ô∏è content-scheduler.js not found"); }
try { ConversionOptimizer = require("./services/conversion-optimizer"); } catch(e) { console.log("‚ö†Ô∏è conversion-optimizer.js not found"); }

// Utility Modules - with fallback
let sendLongMessage;
try { 
  const utils = require("./utils/message-splitter");
  sendLongMessage = utils.sendLongMessage;
} catch(e) { 
  console.log("‚ö†Ô∏è message-splitter.js not found, using fallback");
  sendLongMessage = async (bot, chatId, text, options = {}, chunkSize = 4000) => {
    try {
      if (text.length <= chunkSize) {
        return await bot.sendMessage(chatId, text, options);
      }
      
      const chunks = [];
      for (let i = 0; i < text.length; i += chunkSize) {
        chunks.push(text.slice(i, i + chunkSize));
      }
      
      for (const chunk of chunks) {
        await bot.sendMessage(chatId, chunk, options);
      }
    } catch (error) {
      console.error("Error sending long message:", error);
      await bot.sendMessage(chatId, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûï·üí·ûâ·ûæ·ûü·û∂·ûö·üî");
    }
  };
}

const MESSAGE_CHUNK_SIZE = 800;

// Initialize Express app
const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Set UTF-8 headers
app.use((req, res, next) => {
  res.setHeader("Content-Type", "application/json; charset=utf-8");
  next();
});

// Initialize services with error handling
let accessControl = { getTierSpecificHelp: async () => "Help text", getTierSpecificFAQ: async () => "FAQ text" };
let conversionOptimizer = {};

if (AccessControl) {
  try {
    accessControl = new AccessControl();
  } catch(e) {
    console.log("‚ö†Ô∏è Could not initialize AccessControl");
  }
}

if (ConversionOptimizer) {
  try {
    conversionOptimizer = new ConversionOptimizer();
  } catch(e) {
    console.log("‚ö†Ô∏è Could not initialize ConversionOptimizer");
  }
}

// Duplicate prevention system
const processedMessages = new Set();
let lastProcessTime = {};

function isDuplicateMessage(msg) {
  const messageId = `${msg.chat.id}-${msg.message_id}`;
  const now = Date.now();

  if (processedMessages.has(messageId) && lastProcessTime[messageId] && now - lastProcessTime[messageId] < 3000) {
    console.log(`[isDuplicateMessage] Blocking duplicate: ${messageId}`);
    return true;
  }

  processedMessages.add(messageId);
  lastProcessTime[messageId] = now;

  // Clean up old entries
  if (processedMessages.size > 50) {
    const cutoff = now - 30000;
    Object.keys(lastProcessTime).forEach((id) => {
      if (lastProcessTime[id] < cutoff) {
        processedMessages.delete(id);
        delete lastProcessTime[id];
      }
    });
  }

  return false;
}

// Initialize bot
let bot = null;
if (process.env.BOT_TOKEN) {
  try {
    bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });
    console.log("‚úÖ Bot initialized");

    // === WEBHOOK HANDLER ===
    app.post(`/bot${process.env.BOT_TOKEN}`, async (req, res) => {
      try {
        console.log("üîî Webhook received");
        if (bot) {
          await bot.processUpdate(req.body);
        }
        res.sendStatus(200);
      } catch (error) {
        console.error("Webhook error:", error.message);
        res.sendStatus(500);
      }
    });

    // === BASIC COMMANDS ===
    
    // /start command
    bot.onText(/\/start/i, async (msg) => {
      console.log("üöÄ [START] User:", msg.from.id);
      if (isDuplicateMessage(msg)) return;
      
      try {
        if (startCommand && startCommand.handle) {
          await startCommand.handle(msg, bot);
        } else {
          // Fallback welcome message
          const welcomeMessage = `üåü ·ûü·ûº·ûò·ûü·üí·ûú·û∂·ûÇ·ûò·ûì·üç·ûò·ûÄ·ûÄ·û∂·ûì·üã 7-Day Money Flow Reset‚Ñ¢!

üí∞ ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô ·üß ·ûê·üí·ûÑ·üÉ ·ûá·û∂·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö

üéØ ·ûè·ûò·üí·ûõ·üÉ·ûñ·û∑·ûü·üÅ·ûü: $24 USD (·ûî·ûâ·üí·ûÖ·ûª·üá·ûñ·û∏ $47)
üì± ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã: /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûõ·ûò·üí·û¢·û∑·ûè
üí≥ ·ûë·ûº·ûë·û∂·ûè·üã: /payment ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò

üë®‚Äçüíº ·ûë·û∂·ûÄ·üã·ûë·ûÑ: @Chendasum ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûá·üÜ·ûì·ûΩ·ûô

/help - ·ûá·üÜ·ûì·ûΩ·ûô·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ`;
          await bot.sendMessage(msg.chat.id, welcomeMessage);
        }
        console.log("‚úÖ [START] Completed");
      } catch (error) {
        console.error("‚ùå [START] Error:", error.message);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
      }
    });

    // /help command
    bot.onText(/\/help/i, async (msg) => {
      console.log("üîß [HELP] User:", msg.from.id);
      if (isDuplicateMessage(msg)) return;
      
      try {
        const helpMessage = await accessControl.getTierSpecificHelp(msg.from.id);
        await sendLongMessage(bot, msg.chat.id, helpMessage, { parse_mode: "Markdown" }, MESSAGE_CHUNK_SIZE);
        console.log("‚úÖ [HELP] Sent");
      } catch (error) {
        console.error("‚ùå [HELP] Error:", error.message);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûï·üí·ûë·ûª·ûÄ·ûá·üÜ·ûì·ûΩ·ûô·üî");
      }
    });

    // /pricing command
    bot.onText(/\/pricing/i, async (msg) => {
      console.log("üí∞ [PRICING] User:", msg.from.id);
      if (isDuplicateMessage(msg)) return;
      
      try {
        if (paymentCommands && paymentCommands.pricing) {
          await paymentCommands.pricing(msg, bot);
        } else {
          // Fallback pricing
          const fallbackPricing = `üí∞ ·ûè·ûò·üí·ûõ·üÉ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ 7-Day Money Flow Reset‚Ñ¢

üéØ ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûü·û∂·ûò·ûâ·üí·ûâ (Essential)
üíµ ·ûè·ûò·üí·ûõ·üÉ: $24 USD
üè∑Ô∏è ·ûÄ·ûº·ûä: LAUNCH50

üíé ·ûú·û∑·ûí·û∏·ûë·ûº·ûë·û∂·ûè·üã:
‚Ä¢ ABA Bank: 000 194 742
‚Ä¢ ACLEDA Bank: 092 798 169  
‚Ä¢ Wing: 102 534 677
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA

üëâ /payment - ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûë·ûº·ûë·û∂·ûè·üã
üëâ @Chendasum - ·ûá·üÜ·ûì·ûΩ·ûô·ûï·üí·ûë·û∂·ûõ·üã`;
          await bot.sendMessage(msg.chat.id, fallbackPricing);
        }
        console.log("‚úÖ [PRICING] Sent");
      } catch (error) {
        console.error("‚ùå [PRICING] Error:", error.message);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum");
      }
    });

    // /payment command
    bot.onText(/\/payment/i, async (msg) => {
      console.log("üí≥ [PAYMENT] User:", msg.from.id);
      if (isDuplicateMessage(msg)) return;
      
      try {
        if (paymentCommands && paymentCommands.instructions) {
          await paymentCommands.instructions(msg, bot);
        } else {
          // Fallback payment
          const fallbackPayment = `üí≥ ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûë·ûº·ûë·û∂·ûè·üã

üè¶ ·ûí·ûì·û∂·ûÇ·û∂·ûö·ûä·üÇ·ûõ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ·ûî·û∂·ûì:
‚Ä¢ ABA Bank: 000 194 742
‚Ä¢ ACLEDA Bank: 092 798 169
‚Ä¢ Wing: 102 534 677
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA

üí∞ ·ûÖ·üÜ·ûì·ûΩ·ûì: $24 USD
üìù Reference: BOT${msg.from.id}

üì∏ ·ûî·ûì·üí·ûë·û∂·ûî·üã·ûñ·û∏·ûë·ûº·ûë·û∂·ûè·üã:
1. ·ûê·ûè·ûö·ûº·ûî·ûî·ûâ·üí·ûá·û∂·ûÄ·üã
2. ·ûï·üí·ûâ·ûæ·ûò·ûÄ @Chendasum
3. ·ûö·ûÑ·üã·ûÖ·û∂·üÜ ·ü°-·ü¢ ·ûò·üâ·üÑ·ûÑ

üë®‚Äçüíº ·ûá·üÜ·ûì·ûΩ·ûô: @Chendasum`;
          await bot.sendMessage(msg.chat.id, fallbackPayment);
        }
        console.log("‚úÖ [PAYMENT] Sent");
      } catch (error) {
        console.error("‚ùå [PAYMENT] Error:", error.message);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum");
      }
    });

    // === DAY COMMANDS (1-7) ===
    bot.onText(/\/day([1-7])/i, async (msg, match) => {
      console.log(`üìö [DAY${match[1]}] User:`, msg.from.id);
      if (isDuplicateMessage(msg)) return;
      
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        if (!user || !isPaid) {
          await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî");
          return;
        }
        
        if (dailyCommands && dailyCommands.handle) {
          await dailyCommands.handle(msg, match, bot);
        } else {
          // Fallback daily content
          const dayContent = `üìö ·ûê·üí·ûÑ·üÉ·ûë·û∏ ${match[1]} - ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ

üéØ ·ûü·ûº·ûò·ûü·üí·ûú·û∂·ûÇ·ûò·ûì·üç! ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã·ûö·ûΩ·ûÖ·û†·ûæ·ûô

·ûò·û∂·ûè·û∑·ûÄ·û∂·ûê·üí·ûÑ·üÉ·ûë·û∏ ${match[1]} ·ûì·ûπ·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·ûï·üí·ûâ·ûæ·ûò·ûÄ·û¢·üí·ûì·ûÄ·ûÜ·û∂·ûî·üã·üó·ûì·üÅ·üá·üî

üìû ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûò·û∂·ûè·û∑·ûÄ·û∂·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ·üî`;
          await bot.sendMessage(msg.chat.id, dayContent);
        }
      } catch (error) {
        console.error(`‚ùå [DAY${match[1]}] Error:`, error.message);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
      }
    });

    // === EXTENDED CONTENT (Day 8-30) ===
    bot.onText(/\/extended(\d+)/i, async (msg, match) => {
      if (isDuplicateMessage(msg)) return;
      const day = parseInt(match[1]);
      
      if (isNaN(day) || day < 8 || day > 30) {
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûè·û∑·ûÄ·û∂·ûî·ûì·üí·ûê·üÇ·ûò·û¢·û∂·ûÖ·ûö·ûÄ·ûî·û∂·ûì·ûü·ûò·üí·ûö·û∂·ûî·üã·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü®-·ü£·ü† ·ûî·üâ·ûª·ûé·üí·ûé·üÑ·üá·üî");
        return;
      }
      
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        if (!user || !isPaid) {
          await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûî·üí·ûö·ûæ·ûò·û∂·ûè·û∑·ûÄ·û∂·ûî·ûì·üí·ûê·üÇ·ûò·üî ·ûî·üí·ûö·ûæ /pricing");
          return;
        }
        
        if (extendedContent && extendedContent.handleExtendedDay) {
          await extendedContent.handleExtendedDay(msg, bot, day);
        } else {
          // Fallback extended content
          await bot.sendMessage(msg.chat.id, `üìö ·ûê·üí·ûÑ·üÉ·ûë·û∏ ${day} - ·ûò·û∂·ûè·û∑·ûÄ·û∂·ûî·ûì·üí·ûê·üÇ·ûò

üéØ ·ûü·ûº·ûò·ûü·üí·ûú·û∂·ûÇ·ûò·ûì·üç! ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã·ûö·ûΩ·ûÖ·û†·ûæ·ûô

·ûò·û∂·ûè·û∑·ûÄ·û∂·ûê·üí·ûÑ·üÉ·ûë·û∏ ${day} ·ûì·ûπ·ûÑ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·ûï·üí·ûâ·ûæ·ûò·ûÄ·û¢·üí·ûì·ûÄ·ûÜ·û∂·ûî·üã·üó·ûì·üÅ·üá·üî

üìû ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûò·û∂·ûè·û∑·ûÄ·û∂·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ·üî`);
        }
      } catch (error) {
        console.error("Error in /extended command:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
      }
    });

    // === VIP COMMANDS ===
    bot.onText(/\/vip$/i, async (msg) => {
      console.log("üëë [VIP] User:", msg.from.id);
      if (isDuplicateMessage(msg)) return;
      
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        if (!user || !isPaid) {
          await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP·üî ·ûî·üí·ûö·ûæ /pricing");
          return;
        }
        
        if (vipCommands && vipCommands.info) {
          await vipCommands.info(msg, bot);
        } else {
          // Fallback VIP info
          const vipMessage = `üëë VIP Program - ·û¢·üí·ûì·ûÄ·ûò·û∂·ûì·ûü·û∑·ûë·üí·ûí·û∑!

üåü ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP ·ûö·ûΩ·ûò·ûò·û∂·ûì:
‚Ä¢ ·ûÄ·û∂·ûö·ûî·üí·ûö·ûπ·ûÄ·üí·ûü·û∂·ûï·üí·ûë·û∂·ûõ·üã·ûÅ·üí·ûõ·ûΩ·ûì 1-on-1
‚Ä¢ ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã
‚Ä¢ ·ûò·û∂·ûè·û∑·ûÄ·û∂·ûÄ·ûò·üí·ûö·û∑·ûè·ûÅ·üí·ûñ·ûü·üã 30 ·ûê·üí·ûÑ·üÉ
‚Ä¢ ·ûÄ·û∂·ûö·ûÇ·û∂·üÜ·ûë·üí·ûö·û¢·û∂·ûë·û∑·ûó·û∂·ûñ
‚Ä¢ Capital Strategy Sessions

üí∞ ·ûè·ûò·üí·ûõ·üÉ VIP: $197
üìû ·ûñ·û∑·ûÇ·üí·ûö·üÑ·üá: @Chendasum

‚úÖ ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûò·ûº·ûõ·ûä·üí·ûã·û∂·ûì·ûö·ûΩ·ûÖ·û†·ûæ·ûô
üëë ·ûü·ûö·ûü·üÅ·ûö "VIP APPLY" ·ûä·ûæ·ûò·üí·ûî·û∏·ûä·û∂·ûÄ·üã·ûñ·û∂·ûÄ·üí·ûô`;
          await bot.sendMessage(msg.chat.id, vipMessage);
        }
      } catch (error) {
        console.error("‚ùå [VIP] Error:", error.message);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/vip_program_info/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        if (!user || !isPaid) {
          await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP·üî ·ûî·üí·ûö·ûæ /pricing");
          return;
        }
        
        await vipCommands.info(msg, bot);
      } catch (error) {
        console.error("Error in VIP info command:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === ADMIN COMMANDS ===
    bot.onText(/\/admin_users/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await adminCommands.showUsers(msg, bot);
      } catch (e) {
        console.error("Error /admin_users:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_progress (.+)/i, async (msg, match) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await adminCommands.checkProgress(msg, match, bot);
      } catch (e) {
        console.error("Error /admin_progress:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_analytics/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await adminCommands.showAnalytics(msg, bot);
      } catch (e) {
        console.error("Error /admin_analytics:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_activity/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await adminCommands.showActivity(msg, bot);
      } catch (e) {
        console.error("Error /admin_activity:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_confirm_payment (.+)/i, async (msg, match) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await adminCommands.confirmPayment(msg, match, bot);
      } catch (e) {
        console.error("Error /admin_confirm_payment:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_message (.+)/i, async (msg, match) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await adminCommands.sendMessage(msg, match, bot);
      } catch (e) {
        console.error("Error /admin_message:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_export/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await adminCommands.exportData(msg, bot);
      } catch (e) {
        console.error("Error /admin_export:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_help/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await adminCommands.showHelp(msg, bot);
      } catch (e) {
        console.error("Error /admin_help:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_menu|\/admin$/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      const adminId = parseInt(process.env.ADMIN_CHAT_ID);
      const secondaryAdminId = 484389665;
      
      if (![adminId, secondaryAdminId].includes(msg.from.id)) {
        await bot.sendMessage(msg.chat.id, "‚ö†Ô∏è ·û¢·üí·ûì·ûÄ·ûò·û∑·ûì·ûò·û∂·ûì·ûü·û∑·ûë·üí·ûí·û∑·ûî·üí·ûö·ûæ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûì·üÅ·üá·ûë·üÅ·üî");
        return;
      }

      const menuMessage = `üîß ADMIN QUICK MENU

üì± ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ:
‚Ä¢ /admin_activity - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûü·ûÄ·ûò·üí·ûò·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá
‚Ä¢ /admin_stuck - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûá·û∂·ûî·üã·ûÇ·û∂·üÜ·ûÑ
‚Ä¢ /admin_uploads - ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûÄ·û∂·ûö·ûï·üí·ûë·ûª·ûÄ·û°·ûæ·ûÑ·ûö·ûº·ûî·ûó·û∂·ûñ
‚Ä¢ /admin_followup - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûá·üÜ·ûì·ûΩ·ûô

üìä ·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ:
‚Ä¢ /admin_analytics - ·ûï·üí·ûë·û∂·üÜ·ûÑ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚Ä¢ /admin_completion - ·û¢·ûè·üí·ûö·û∂·ûî·ûâ·üí·ûÖ·ûî·üã
‚Ä¢ /admin_completed - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã

üí¨ ·ûü·ûÄ·ûò·üí·ûò·ûó·û∂·ûñ:
‚Ä¢ /admin_progress [UserID] - ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûõ·ûò·üí·û¢·û∑·ûè·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã
‚Ä¢ /admin_message [UserID] [text] - ·ûï·üí·ûâ·ûæ·ûü·û∂·ûö
‚Ä¢ /admin_remind [day] - ·ûï·üí·ûâ·ûæ·ûö·üÜ·ûõ·ûπ·ûÄ
‚Ä¢ /admin_confirm_payment [UserID] - ·ûî·ûâ·üí·ûá·û∂·ûÄ·üã·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã

üìã ·ûö·ûî·û∂·ûô·ûÄ·û∂·ûö·ûé·üç:
‚Ä¢ /admin_users - ·ûë·û∑·ûä·üí·ûã·ûó·û∂·ûñ·ûë·ûº·ûë·üÖ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã
‚Ä¢ /admin_export - ·ûì·û∂·üÜ·ûÖ·üÅ·ûâ·ûë·û∑·ûì·üí·ûì·ûì·üê·ûô CSV
‚Ä¢ /admin_photos [UserID] - ·ûö·ûº·ûî·ûó·û∂·ûñ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã

üÜò ·ûá·üÜ·ûì·ûΩ·ûô:
‚Ä¢ /admin_help - ·ûî·ûâ·üí·ûá·û∏·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚Ä¢ /whoami - ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ Admin ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ`;

      await bot.sendMessage(msg.chat.id, menuMessage);
    });

    // === PROGRESS TRACKING COMMANDS ===
    bot.onText(/\/admin_stuck/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await progressTracker.showStuckUsers(msg, bot);
      } catch (e) {
        console.error("Error /admin_stuck:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_completion/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await progressTracker.showCompletionRates(msg, bot);
      } catch (e) {
        console.error("Error /admin_completion:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/admin_completed/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await progressTracker.showCompletedUsers(msg, bot);
      } catch (e) {
        console.error("Error /admin_completed:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === FREE TOOLS ===
    bot.onText(/\/financial_quiz/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await financialQuiz.startQuiz(msg, bot);
      } catch (e) {
        console.error("Error /financial_quiz:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/calculate_daily/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await freeTools.calculateDaily(msg, bot);
      } catch (e) {
        console.error("Error /calculate_daily:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/find_leaks/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await freeTools.findLeaks(msg, bot);
      } catch (e) {
        console.error("Error /find_leaks:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/savings_potential/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await freeTools.savingsPotential(msg, bot);
      } catch (e) {
        console.error("Error /savings_potential:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === PREVIEW COMMANDS ===
    bot.onText(/\/preview$/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await previewCommands.preview(msg, bot);
      } catch (e) {
        console.error("Error /preview:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/preview_day1/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await previewCommands.previewDay1(msg, bot);
      } catch (e) {
        console.error("Error /preview_day1:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === BADGES & PROGRESS (PAID ONLY) ===
    bot.onText(/\/badges/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        if (!user || !isPaid) {
          await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ badges·üî ·ûî·üí·ûö·ûæ /pricing");
          return;
        }
        
        await badgesCommands.showBadges(msg, bot);
      } catch (error) {
        console.error("Error in /badges command:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/progress/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        if (!user || !isPaid) {
          await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûÄ·û∂·ûö·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì·üî ·ûî·üí·ûö·ûæ /pricing");
          return;
        }
        
        await badgesCommands.showProgress(msg, bot);
      } catch (error) {
        console.error("Error in /progress command:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === QUOTES ===
    bot.onText(/\/quote$/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await quotesCommands.dailyQuote(msg, bot);
      } catch (e) {
        console.error("Error /quote:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    bot.onText(/\/wisdom/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await quotesCommands.randomWisdom(msg, bot);
      } catch (e) {
        console.error("Error /wisdom:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === BOOKING (VIP ONLY) ===
    bot.onText(/\/book_session/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        await bookingCommands.showBookingSlots(msg, bot);
      } catch (e) {
        console.error("Error /book_session:", e);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === FAQ COMMAND ===
    bot.onText(/\/faq|FAQ|faq/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        const isVip = user?.tier === "vip";
        const isPremiumOrVip = user?.tier === "premium" || user?.tier === "vip";
        
        let faqMessage = await accessControl.getTierSpecificFAQ(msg.from.id, isPaid, isPremiumOrVip, isVip);
        await sendLongMessage(bot, msg.chat.id, faqMessage, { parse_mode: "Markdown" }, MESSAGE_CHUNK_SIZE);
      } catch (error) {
        console.error("Error in FAQ command:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === STATUS COMMAND ===
    bot.onText(/\/status|·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        if (!user) {
          await bot.sendMessage(msg.chat.id, "·û¢·üí·ûì·ûÄ·ûò·û∑·ûì·ûë·û∂·ûì·üã·ûÖ·ûª·üá·ûà·üí·ûò·üÑ·üá·üî ·ûî·üí·ûö·ûæ /start ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·üî");
          return;
        }
        
        const isPaid = user.is_paid === true || user.is_paid === 't';
        const progress = await Progress.findOne({ user_id: msg.from.id });
        
        let statusMessage = `üìä ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·ûÇ·ûé·ûì·û∏·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ:

üë§ ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã: ${user.first_name || "·ûò·û∑·ûì·ûü·üí·ûÇ·û∂·ûõ·üã"}
üìÖ ·ûÖ·ûº·ûõ·ûö·ûΩ·ûò: ${user.joined_at ? new Date(user.joined_at).toDateString() : "·ûò·û∑·ûì·ûü·üí·ûÇ·û∂·ûõ·üã"}
üí∞ ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ: ${isPaid ? "‚úÖ ·ûî·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã" : "‚ùå ·ûò·û∑·ûì·ûë·û∂·ûì·üã·ûë·ûº·ûë·û∂·ûè·üã"}
üéØ ·ûÄ·ûò·üí·ûö·û∑·ûè: ${user.tier || "Essential"}`;

        if (isPaid) {
          statusMessage += `
üìà ·ûê·üí·ûÑ·üÉ·ûî·ûÖ·üí·ûÖ·ûª·ûî·üí·ûî·ûì·üí·ûì: Day ${progress?.current_day || 0}
üéØ ·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûî·û∂·ûì·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ!`;
        } else {
          statusMessage += `
üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûî·üí·ûö·ûæ Day 1-7
üí° ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûè·ûò·üí·ûõ·üÉ`;
        }
        
        await bot.sendMessage(msg.chat.id, statusMessage);
      } catch (error) {
        console.error("Error in status command:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === WHOAMI COMMAND ===
    bot.onText(/\/whoami/i, async (msg) => {
      if (isDuplicateMessage(msg)) return;
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const adminId = parseInt(process.env.ADMIN_CHAT_ID);
        const secondaryAdminId = 484389665;
        const isAdmin = msg.from.id === adminId || msg.from.id === secondaryAdminId;
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        let response = `üîç ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ:\n\n`;
        response += `‚Ä¢ Chat ID: ${msg.chat.id}\n`;
        response += `‚Ä¢ User ID: ${msg.from.id}\n`;
        response += `‚Ä¢ ·ûà·üí·ûò·üÑ·üá: ${msg.from.first_name || "N/A"}\n`;
        response += `‚Ä¢ Username: ${msg.from.username ? "@" + msg.from.username : "N/A"}\n`;
        response += `‚Ä¢ Admin: ${isAdmin ? "‚úÖ" : "‚ùå"}\n`;
        
        if (user) {
          response += `‚Ä¢ ·ûÖ·ûª·üá·ûà·üí·ûò·üÑ·üá: ‚úÖ\n`;
          response += `‚Ä¢ ·ûë·ûº·ûë·û∂·ûè·üã: ${isPaid ? "‚úÖ" : "‚ùå"}\n`;
          response += `‚Ä¢ ·ûÄ·ûò·üí·ûö·û∑·ûè: ${user.tier || "Essential"}\n`;
        } else {
          response += `‚Ä¢ ·ûÖ·ûª·üá·ûà·üí·ûò·üÑ·üá: ‚ùå\n`;
        }
        
        await bot.sendMessage(msg.chat.id, response);
      } catch (error) {
        console.error("Error in whoami command:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    });

    // === TEST COMMAND ===
    bot.onText(/\/test/i, async (msg) => {
      try {
        await bot.sendMessage(msg.chat.id, "‚úÖ Enhanced bot is working! All features loaded.");
        console.log("Test command sent to:", msg.from.id);
      } catch (error) {
        console.error("Test command error:", error.message);
      }
    });

    // === MESSAGE HANDLERS ===
    
    // VIP APPLY Handler
    bot.on("message", async (msg) => {
      if (!msg.text || msg.text.startsWith("/")) return;
      if (isDuplicateMessage(msg)) return;
      
      const text = msg.text.toLowerCase();
      
      // Check if it's a financial quiz response
      if (financialQuiz && financialQuiz.processQuizResponse) {
        if (await financialQuiz.processQuizResponse(msg, bot)) {
          return;
        }
      }
      
      // Check if it's a free tools response
      if (freeTools && freeTools.processToolResponse) {
        const user = await User.findOne({ telegram_id: msg.from.id });
        if (await freeTools.processToolResponse(msg, bot, user)) {
          return;
        }
      }
      
      // Handle specific text commands
      if (text === "vip apply") {
        try {
          const user = await User.findOne({ telegram_id: msg.from.id });
          const isPaid = user?.is_paid === true || user?.is_paid === 't';
          
          if (!user || !isPaid) {
            await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP·üî ·ûî·üí·ûö·ûæ /pricing");
            return;
          }
          
          if (vipCommands && vipCommands.apply) {
            await vipCommands.apply(msg, bot);
          } else {
            // Fallback VIP apply
            await bot.sendMessage(msg.chat.id, `üåü VIP APPLICATION

·ûü·ûº·ûò·ûï·üí·ûâ·ûæ·ûñ·üê·ûè·üå·ûò·û∂·ûì:
1Ô∏è‚É£ ·ûà·üí·ûò·üÑ·üá·ûñ·üÅ·ûâ
2Ô∏è‚É£ ·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò
3Ô∏è‚É£ ·ûÇ·üÑ·ûõ·ûä·üÖ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª
4Ô∏è‚É£ ·ûõ·üÅ·ûÅ·ûë·ûº·ûö·ûü·üê·ûñ·üí·ûë

üí∞ ·ûè·ûò·üí·ûõ·üÉ VIP: $197
üìû Admin ·ûì·ûπ·ûÑ·ûë·û∂·ûÄ·üã·ûë·ûÑ·û¢·üí·ûì·ûÄ`);
          }
        } catch (error) {
          console.error("Error handling VIP APPLY:", error);
          await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
        }
      } else if (text === "ready for day 1") {
        await handleReadyForDay1(msg);
      } else if (text.includes("day") && text.includes("complete")) {
        await handleDayComplete(msg);
      } else if (text === "program complete") {
        await handleProgramComplete(msg);
      } else if (text === "capital clarity" || text === "CAPITAL CLARITY") {
        await handleCapitalClarity(msg);
      }
    });

    // Handler functions
    async function handleReadyForDay1(msg) {
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        if (!user || !isPaid) {
          await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·üî ·ûî·üí·ûö·ûæ /pricing");
          return;
        }
        
        await Progress.findOneAndUpdate(
          { user_id: msg.from.id },
          { ready_for_day_1: true, current_day: 1 },
          { upsert: true }
        );
        
        await bot.sendMessage(msg.chat.id, `üéâ ·ûõ·üí·û¢·û†·ûæ·ûô! ·û¢·üí·ûì·ûÄ·ûè·üí·ûö·üÄ·ûò·ûö·ûΩ·ûÖ·û†·ûæ·ûô!

·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü° ·û•·û°·ûº·ûú·ûì·üÅ·üá: /day1

·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü° ·ûì·ûπ·ûÑ·ûï·üí·ûâ·ûæ·ûü·üí·ûú·üê·ûô·ûî·üí·ûö·ûú·ûè·üí·ûè·û∑·ûì·üÖ·ûò·üâ·üÑ·ûÑ ·ü© ·ûñ·üí·ûö·ûπ·ûÄ·ûê·üí·ûÑ·üÉ·ûü·üí·û¢·üÇ·ûÄ·ûï·ûÑ·ûä·üÇ·ûö·üî

·ûá·üÜ·ûì·ûΩ·ûô ·ü¢·ü§/·üß ·ûá·û∂·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö! üí™`);
      } catch (error) {
        console.error("Error handling ready for day 1:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    }

    async function handleDayComplete(msg) {
      const dayMatch = msg.text.toUpperCase().match(/DAY\s*(\d+)\s*COMPLETE/);
      if (!dayMatch) return;
      
      const dayNumber = parseInt(dayMatch[1]);
      const updateField = `day${dayNumber}Completed`;
      const completedAtField = `day${dayNumber}CompletedAt`;
      const nextDay = dayNumber + 1;
      
      await Progress.findOneAndUpdate(
        { user_id: msg.from.id },
        {
          [updateField]: true,
          [completedAtField]: new Date(),
          current_day: nextDay <= 7 ? nextDay : 7
        },
        { upsert: true }
      );
      
      const completeReaction = emojiReactions?.lessonCompleteReaction 
        ? emojiReactions.lessonCompleteReaction(dayNumber)
        : `üéâ ·ûõ·üí·û¢·ûé·û∂·ûü·üã! ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûê·üí·ûÑ·üÉ·ûë·û∏ ${dayNumber}!`;
      await bot.sendMessage(msg.chat.id, completeReaction);
      
      const celebrationMessage = celebrations?.dayCompleteCelebration
        ? celebrations.dayCompleteCelebration(dayNumber)
        : `üéä ·ûü·ûº·ûò·û¢·ûî·û¢·ûö·ûü·û∂·ûë·ûö! ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûê·üí·ûÑ·üÉ·ûë·û∏ ${dayNumber} ·ûä·üÑ·ûô·ûá·üÑ·ûÇ·ûá·üê·ûô!

üìà ·ûú·ûå·üí·ûç·ûì·ûó·û∂·ûñ: ${dayNumber}/7 ·ûê·üí·ûÑ·üÉ
üí™ ·ûî·ûì·üí·ûè·ûë·üÖ·ûò·ûª·ûÅ·ûë·üÄ·ûè!`;
      await sendLongMessage(bot, msg.chat.id, celebrationMessage, {}, MESSAGE_CHUNK_SIZE);
      
      if (dayNumber < 7) {
        await bot.sendMessage(msg.chat.id, `üöÄ ·ûè·üí·ûö·üÄ·ûò·ûö·ûΩ·ûÖ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûê·üí·ûÑ·üÉ·ûë·û∏ ${nextDay}? ·ûÖ·ûª·ûÖ /day${nextDay}`);
      } else {
        await bot.sendMessage(msg.chat.id, `üéä ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ! ·ûü·ûö·ûü·üÅ·ûö "PROGRAM COMPLETE"`);
      }
    }

    async function handleProgramComplete(msg) {
      try {
        const programCelebration = celebrations.programCompleteCelebration(`üéØ ·ûá·üÜ·û†·û∂·ûì·ûî·ûì·üí·ûë·û∂·ûî·üã:
1Ô∏è‚É£ ·û¢·ûì·ûª·ûú·ûè·üí·ûè·ûï·üÇ·ûì·ûÄ·û∂·ûö ·ü£·ü† ·ûê·üí·ûÑ·üÉ
2Ô∏è‚É£ ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö·ûî·üí·ûö·ûÖ·û∂·üÜ·ûü·ûî·üí·ûè·û∂·û†·üç
3Ô∏è‚É£ ·ûò·û∂·ûì·ûü·üÜ·ûé·ûΩ·ûö? ·ûë·û∂·ûÄ·üã·ûë·ûÑ·ûò·ûÄ·ûî·û∂·ûì!

üöÄ ·ûÖ·ûÑ·üã·ûî·ûì·üí·ûè·ûÄ·ûò·üí·ûö·û∑·ûè·ûî·ûì·üí·ûë·û∂·ûî·üã?
VIP Advanced Program ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÅ·üÇ·ûÄ·üí·ûö·üÑ·ûô!
·ûü·ûΩ·ûö: "VIP PROGRAM INFO"`);
        
        await sendLongMessage(bot, msg.chat.id, programCelebration, {}, MESSAGE_CHUNK_SIZE);
        
        await Progress.findOneAndUpdate(
          { user_id: msg.from.id },
          { programCompleted: true, programCompletedAt: new Date() },
          { upsert: true }
        );
        
        await vipCommands.offer(msg, bot);
      } catch (error) {
        console.error("Error handling PROGRAM COMPLETE:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    }

    async function handleCapitalClarity(msg) {
      try {
        const user = await User.findOne({ telegram_id: msg.from.id });
        const isPaid = user?.is_paid === true || user?.is_paid === 't';
        
        if (!user || !isPaid) {
          await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûî·üí·ûö·ûæ Capital Clarity·üî ·ûî·üí·ûö·ûæ /pricing");
          return;
        }
        
        await vipCommands.capitalClarity(msg, bot);
      } catch (error) {
        console.error("Error handling Capital Clarity:", error);
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
      }
    }

    console.log("‚úÖ All bot commands registered");

  } catch (error) {
    console.error("‚ùå Bot initialization failed:", error.message);
  }
} else {
  console.error("‚ùå No BOT_TOKEN found");
}

// === BASIC ROUTES ===
app.get("/", (req, res) => {
  console.log("Root endpoint hit");
  res.json({
    name: "7-Day Money Flow Reset‚Ñ¢ Telegram Bot",
    status: "Running with Full Features",
    time: new Date().toISOString(),
    url: "money7daysreset-production.up.railway.app",
    features: [
      "7-Day Program Content",
      "30-Day Extended Content",
      "Payment Processing", 
      "VIP Programs",
      "Progress Tracking",
      "Admin Dashboard",
      "Marketing Tools",
      "Booking System",
      "Free Tools",
      "Khmer Language Support"
    ]
  });
});

app.get("/ping", (req, res) => {
  console.log("Ping endpoint hit");
  res.send("Pong!");
});

app.get("/health", (req, res) => {
  console.log("Health check");
  res.json({ 
    status: "OK", 
    time: new Date().toISOString(),
    bot_initialized: !!bot,
    modules_loaded: {
      commands: !!dailyCommands,
      services: !!scheduler,
      utils: !!sendLongMessage
    }
  });
});

app.get("/analytics", async (req, res) => {
  try {
    const stats = await analytics.getStats();
    res.json(stats);
  } catch (error) {
    res.status(500).json({ error: "Failed to get analytics" });
  }
});

app.post("/webhook/payment", async (req, res) => {
  try {
    const { userId, amount, status, transactionId } = req.body;
    
    if (status === "completed" && amount >= 24) {
      await paymentCommands.confirmPayment(bot, userId, transactionId);
    }
    
    res.status(200).json({ success: true });
  } catch (error) {
    console.error("Payment webhook error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// === WEBHOOK SETUP FOR RAILWAY ===
async function setupWebhook() {
  if (!bot || !process.env.BOT_TOKEN) {
    console.error("Cannot setup webhook - bot not initialized");
    return;
  }

  try {
    const webhookUrl = process.env.RAILWAY_PUBLIC_DOMAIN 
      ? `https://${process.env.RAILWAY_PUBLIC_DOMAIN}/bot${process.env.BOT_TOKEN}`
      : `https://money7daysreset-production.up.railway.app/bot${process.env.BOT_TOKEN}`;
    
    console.log("Setting webhook to:", webhookUrl);
    const result = await bot.setWebHook(webhookUrl);
    console.log("Webhook set result:", result);
  } catch (error) {
    console.error("Webhook setup error:", error);
  }
}

// === START SERVER ===
const PORT = process.env.PORT || 5000;
const HOST = "0.0.0.0";

const server = app.listen(PORT, HOST, async () => {
  console.log(`üöÄ Server running on ${HOST}:${PORT}`);
  console.log(`üåê URL: https://money7daysreset-production.up.railway.app`);
  console.log(`üéØ Features: Full 7-Day + 30-Day Program with all modules`);
  
  // Setup webhook after server starts
  await setupWebhook();
});

// === CRON JOBS ===
if (scheduler && scheduler.sendDailyMessages) {
  cron.schedule("0 9 * * *", async () => {
    console.log("üïò Sending daily messages...");
    try {
      await scheduler.sendDailyMessages(bot);
    } catch (error) {
      console.error("Error sending daily messages:", error);
    }
  });
}

// Initialize Content Scheduler
if (ContentScheduler) {
  try {
    const contentScheduler = new ContentScheduler(bot);
    contentScheduler.start();
    console.log("‚úÖ Content scheduler started");
  } catch (error) {
    console.error("‚ö†Ô∏è Could not start content scheduler:", error.message);
  }
}

console.log("ü§ñ Bot started successfully with all features!");
console.log("üöÄ Features loaded:");
console.log("   ‚Ä¢ 7-Day Money Flow Program");
console.log("   ‚Ä¢ 30-Day Extended Content");
console.log("   ‚Ä¢ VIP & Premium Programs");
console.log("   ‚Ä¢ Payment Processing");
console.log("   ‚Ä¢ Admin Dashboard");
console.log("   ‚Ä¢ Progress Tracking");
console.log("   ‚Ä¢ Marketing Automation");
console.log("   ‚Ä¢ Booking System");
console.log("   ‚Ä¢ Free Financial Tools");
console.log("   ‚Ä¢ Access Control System");
console.log("   ‚Ä¢ Content Scheduling");
console.log("üî± 7-Day Money Flow Reset‚Ñ¢ READY!");

// === GRACEFUL SHUTDOWN ===
process.on("SIGTERM", () => {
  console.log("SIGTERM received");
  server.close(() => process.exit(0));
});

process.on("SIGINT", () => {
  console.log("SIGINT received");  
  server.close(() => process.exit(0));
});

process.on('uncaughtException', (err) => {
  console.error('Uncaught Exception:', err.message);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', reason);
});
