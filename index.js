require("dotenv").config();

const express = require("express");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");

// --- Configuration ---
const BOT_TOKEN = process.env.BOT_TOKEN;
const PORT = process.env.PORT || 5000;
const HOST = process.env.HOST || "0.0.0.0";
const MESSAGE_CHUNK_SIZE = 800;
const ADMIN_IDS = [
    parseInt(process.env.ADMIN_CHAT_ID),
    484389665 // Secondary admin ID
].filter(id => !isNaN(id)); // Ensure only valid numbers are kept

// Railway URL - IMPORTANT: Use your actual Railway domain here.
// Based on previous conversations, this was: https://money7daysreset-production.up.railway.app
const RAILWAY_URL = "https://money7daysreset-production.up.railway.app";

// Set proper UTF-8 encoding for the environment
process.env.NODE_ICU_DATA = "/usr/share/nodejs/node-icu-data";
process.env.LANG = "en_US.UTF-8";

// --- Database Models ---
// Database connection is assumed to be handled by Drizzle ORM with PostgreSQL
console.log("üîç Database configured with Drizzle ORM and PostgreSQL (via models)");
console.log("‚úÖ Database ready for operations");
const User = require("./models/User");
const Progress = require("./models/Progress");

// --- Command Modules ---
// Ensure these files exist in your project's 'commands' folder
const startCommand = require("./commands/start");
const dailyCommands = require("./commands/daily");
const paymentCommands = require("./commands/payment");
const vipCommands = require("./commands/vip");
const adminCommands = require("./commands/admin");
const badgesCommands = require("./commands/badges"); // If these are used.
const quotesCommands = require("./commands/quotes"); // If these are used.
const bookingCommands = require("./commands/booking"); // If these are used.
const tierFeatures = require("./commands/tier-features"); // If these are used.
const marketingCommands = require("./commands/marketing"); // If these are used.
const marketingContent = require("./commands/marketing-content");
const extendedContent = require("./commands/extended-content"); // This is the problematic one
const thirtyDayAdmin = require("./commands/30day-admin");
const previewCommands = require("./commands/preview");
const freeTools = require("./commands/free-tools");
const financialQuiz = require("./commands/financial-quiz");
const toolsTemplates = require("./commands/tools-templates");
const progressTracker = require("./commands/progress-tracker"); // Moved here for clarity

// --- Service Modules ---
// Ensure these files exist in your project's 'services' folder
const scheduler = require("./services/scheduler");
const analytics = require("./services/analytics");
const celebrations = require("./services/celebrations"); // If used.
const progressBadges = require("./services/progress-badges"); // If used.
const emojiReactions = require("./services/emoji-reactions"); // If used.
const AccessControl = require("./services/access-control");
const ContentScheduler = require("./services/content-scheduler");
const ConversionOptimizer = require("./services/conversion-optimizer");

// --- Utility Modules ---
const { sendLongMessage } = require("./utils/message-splitter");
const { default: fetch } = require("node-fetch"); // Ensure node-fetch is imported correctly

// Initialize Telegram bot for webhook mode
const bot = new TelegramBot(BOT_TOKEN, {
    polling: false,
    onlyFirstMatch: true,
});

// Initialize Express app
const app = express();
const accessControl = new AccessControl();
const conversionOptimizer = new ConversionOptimizer();

// --- Duplicate Message Prevention System ---
const processedMessages = new Set();
let lastProcessTime = {};

function isDuplicateMessage(msg) {
    const messageId = `${msg.chat.id}-${msg.message_id}`;
    const now = Date.now();

    if (processedMessages.has(messageId) && lastProcessTime[messageId] && now - lastProcessTime[messageId] < 3000) {
        console.log(`[DUPLICATE] Blocking recent duplicate: ${messageId} within 3s`);
        return true;
    }

    processedMessages.add(messageId);
    lastProcessTime[messageId] = now;

    // Clean up old entries periodically
    if (processedMessages.size > 50) {
        const cutoff = now - 30000; // 30 seconds
        Object.keys(lastProcessTime).forEach((id) => {
            if (lastProcessTime[id] < cutoff) {
                processedMessages.delete(id);
                delete lastProcessTime[id];
            }
        });
    }
    console.log(`[MESSAGE] Processing message: ${messageId}`);
    return false;
}

// --- Middleware ---
app.use(express.json({ limit: "10mb", charset: "utf-8" }));
app.use(express.urlencoded({ extended: true, charset: "utf-8" }));
app.use((req, res, next) => {
    res.setHeader("Content-Type", "application/json; charset=utf-8");
    next();
});

// --- Helper Functions ---

// Centralized error response for bot commands
async function sendErrorMessage(chatId, command, error) {
    console.error(`‚ùå [${command} Command] Error handling:`, error);
    await bot.sendMessage(chatId, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·ûì·üÖ·ûñ·üÅ·ûõ·ûÄ·üí·ûö·üÑ·ûô·üî");
}

// Check if user is paid
async function checkPaidAccess(msg, bot) {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === "t";
    if (!user || !isPaid) {
        await bot.sendMessage(msg.chat.id, "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî");
        return false;
    }
    return true;
}

// Check if user is an admin
function isAdmin(userId) {
    return ADMIN_IDS.includes(userId);
}

// --- Bot Initialization for Webhook Mode ---
async function initBotWebhook() {
    console.log("Starting bot initialization process for webhooks...");

    if (!BOT_TOKEN) {
        console.error("‚ùå ERROR: BOT_TOKEN is not set in env.txt!");
        console.error("Please ensure env.txt exists and contains BOT_TOKEN.");
        process.exit(1);
    } else {
        console.log("‚úÖ BOT_TOKEN loaded successfully.");
    }

    try {
        // Stop any active polling (good practice for webhook setup)
        try {
            await bot.stopPolling();
            console.log("Polling stopped successfully (if active).");
        } catch (stopError) {
            console.log("No active polling to stop or polling was already stopped (expected).");
        }

        // Delete existing webhook to clear any stale configurations
        try {
            const deleteResult = await bot.deleteWebHook();
            console.log("Webhook deleted successfully (via bot.deleteWebHook()):", deleteResult);
        } catch (deleteError) {
            console.log("Failed to delete webhook (via bot.deleteWebHook()):", deleteError.message);
        }

        // Construct and set the new webhook URL
        const actualWebhookUrl = `${RAILWAY_URL}/bot${BOT_TOKEN}`;
        console.log(`Attempting to set webhook to: ${actualWebhookUrl}`);
        const setWebhookResult = await bot.setWebHook(actualWebhookUrl);
        console.log("‚úÖ Webhook set successfully:", setWebhookResult);

        console.log("‚úÖ Bot initialized successfully for webhook mode.");
    } catch (error) {
        console.error("‚ùå Bot initialization error for webhooks:", error.message);
        process.exit(1);
    }
}

// --- Main Application Startup ---
(async () => {
    await initBotWebhook();

    const server = app.listen(PORT, HOST, () => {
        console.log(`üöÄ Server running on ${HOST}:${PORT}`);
        console.log(`üî• 7-Day Money Flow automation ACTIVE!`);
        console.log(`‚úÖ Server is fully listening for incoming requests.`);
    });

    // Schedule daily messages (9 AM Cambodia time)
    cron.schedule("0 9 * * *", async () => {
        console.log("üïò Sending daily messages...");
        try {
            await scheduler.sendDailyMessages(bot);
        } catch (error) {
            console.error("Error sending daily messages via cron:", error);
        }
    }, {
        timezone: "Asia/Phnom_Penh"
    });

    // Start content scheduler
    const contentScheduler = new ContentScheduler(bot);
    contentScheduler.start();

    console.log("ü§ñ Bot started successfully with 7-Day + 30-Day automation!");
    console.log("üöÄ Features added:");
    console.log("¬† ¬† ‚Ä¢ Auto next-day reminders (24h delay)");
    console.log("¬† ¬† ‚Ä¢ Day 3 upsell automation (1h delay)");
    console.log("¬† ¬† ‚Ä¢ 30-day follow-up for results");
    console.log("¬† ¬† ‚Ä¢ Enhanced welcome sequence");
    console.log("¬† ¬† ‚Ä¢ 30-day extended content automation");
    console.log("¬† ¬† ‚Ä¢ Daily content delivery (9 AM Cambodia)");
    console.log("¬† ¬† ‚Ä¢ Evening motivation (6 PM Cambodia)");
    console.log("¬† ¬† ‚Ä¢ Weekly reviews (Sunday 8 PM Cambodia)");
    console.log("üî± 7-Day Money Flow Reset‚Ñ¢ + 30-Day Extended Content READY!");

    // Graceful shutdown
    process.on("SIGTERM", () => {
        console.log("SIGTERM received, shutting down gracefully");
        server.close(() => {
            console.log("Server closed");
            process.exit(0);
        });
    });

    process.on("SIGINT", () => {
        console.log("SIGINT received, shutting down gracefully");
        server.close(() => {
            console.log("Server closed");
            process.exit(0);
        });
    });

    // Uncaught exception and unhandled rejection handlers
    process.on("uncaughtException", (err) => {
        console.error("Uncaught Exception:", err);
        process.exit(1);
    });

    process.on("unhandledRejection", (reason, promise) => {
        console.error("Unhandled Rejection at:", promise, "reason:", reason);
        process.exit(1);
    });
})();

// ========================================
// TELEGRAM BOT COMMAND HANDLERS
// ========================================

// Handler Wrapper to prevent duplicates and simplify common checks
const createBotHandler = (commandName, handlerFn, requiresPaid = false, requiresAdmin = false) => {
    return async (msg, match) => {
        console.log(`[${commandName} Command] Received from user: ${msg.from.id}`);
        if (isDuplicateMessage(msg)) {
            console.log(`[${commandName} Command] Duplicate message prevented for user: ${msg.from.id}`);
            return;
        }

        if (requiresAdmin && !isAdmin(msg.from.id)) {
            await bot.sendMessage(msg.chat.id, "‚ö†Ô∏è ·û¢·üí·ûì·ûÄ·ûò·û∑·ûì·ûò·û∂·ûì·ûü·û∑·ûë·üí·ûí·û∑·ûî·üí·ûö·ûæ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûì·üÅ·üá·ûë·üÅ·üî");
            return;
        }

        if (requiresPaid && !(await checkPaidAccess(msg, bot))) {
            return; // checkPaidAccess sends the message if not paid
        }

        try {
            console.log(`üìù [${commandName} Command] Processing for user: ${msg.from.id}`);
            await handlerFn(msg, bot, match); // Pass match if available
            console.log(`‚úÖ [${commandName} Command] Completed for user: ${msg.from.id}`);
        } catch (error) {
            await sendErrorMessage(msg.chat.id, commandName, error);
        }
    };
};

// --- Standard User Commands ---
bot.onText(/\/start/i, createBotHandler("Start", startCommand.handle));

bot.onText(/\/help/i, createBotHandler("Help", async (msg, bot) => {
    const helpMessageContent = await accessControl.getTierSpecificHelp(msg.from.id);
    await sendLongMessage(bot, msg.chat.id, helpMessageContent, { parse_mode: "Markdown" }, MESSAGE_CHUNK_SIZE);
}));

// Emergency Pricing Command (direct response first, then attempt actual handler)
bot.onText(/\/pricing/i, async (msg) => {
    if (isDuplicateMessage(msg)) return;
    try {
        const emergencyPricing = `üí∞ ·ûè·ûò·üí·ûõ·üÉ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ 7-Day Money Flow Reset‚Ñ¢

üéØ ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûü·û∂·ûò·ûâ·üí·ûâ (Essential Program)
üíµ ·ûè·ûò·üí·ûõ·üÉ: $24 USD (·ûî·ûâ·üí·ûÖ·ûª·üá·ûè·ûò·üí·ûõ·üÉ 50%)
üè∑Ô∏è ·ûÄ·ûº·ûä: LAUNCH50

üìö ·û¢·üí·ûú·û∏·ûä·üÇ·ûõ·û¢·üí·ûì·ûÄ·ûì·ûπ·ûÑ·ûë·ûë·ûΩ·ûõ·ûî·û∂·ûì:
‚úÖ ·ûò·üÅ·ûö·üÄ·ûì ·üß ·ûê·üí·ûÑ·üÉ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚úÖ ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô·ûî·û∂·ûì·ûõ·üí·û¢
‚úÖ ·ûÄ·û∂·ûö·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûÖ·üÜ·ûé·û∂·ûô
‚úÖ ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ
‚úÖ ·ûï·üÇ·ûì·ûÄ·û∂·ûö·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª·ûÖ·üí·ûî·û∂·ûü·üã

üíé ·ûú·û∑·ûí·û∏·ûë·ûº·ûë·û∂·ûè·üã:
‚Ä¢ ABA Bank: 000 194 742
‚Ä¢ ACLEDA Bank: 092 798 169
‚Ä¢ Wing: 102 534 677
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA
‚Ä¢ ·ûÄ·üÜ·ûé·ûè·üã·ûÖ·üÜ·ûé·û∂·üÜ: BOT${msg.from.id}

‚ö° ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûó·üí·ûõ·û∂·ûò·üó:
üëâ /payment - ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûë·ûº·ûë·û∂·ûè·üã·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
üëâ @Chendasum - ·ûá·üÜ·ûì·ûΩ·ûô·ûï·üí·ûë·û∂·ûõ·üã`;
        await bot.sendMessage(msg.chat.id, emergencyPricing);
        try {
            await paymentCommands.pricing(msg, bot);
        } catch (handlerError) {
            console.error("Pricing handler failed, using emergency response:", handlerError);
        }
    } catch (error) {
        await sendErrorMessage(msg.chat.id, "Pricing", error);
    }
});

// Emergency Payment Command (direct response first, then attempt actual handler)
bot.onText(/\/payment/i, async (msg) => {
    if (isDuplicateMessage(msg)) return;
    try {
        const emergencyPayment = `üí≥ ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûë·ûº·ûë·û∂·ûè·üã (Emergency)

üè¶ ABA Bank (·ûö·û†·üê·ûü)
‚Ä¢ ·ûÇ·ûé·ûì·û∏: 000 194 742
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA
‚Ä¢ ·ûÖ·üÜ·ûì·ûΩ·ûì: $24 USD
‚Ä¢ Reference: BOT${msg.from.id}

üì± Wing (·ûõ·ûø·ûì·ûî·üÜ·ûï·ûª·ûè)
‚Ä¢ ·ûõ·üÅ·ûÅ: 102 534 677
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA
‚Ä¢ ·ûÖ·üÜ·ûì·ûΩ·ûì: $24 USD
‚Ä¢ ·ûÄ·üÜ·ûé·ûè·üã·ûÖ·üÜ·ûé·û∂·üÜ: BOT${msg.from.id}

üè¶ ACLEDA Bank
‚Ä¢ ·ûÇ·ûé·ûì·û∏: 092 798 169
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA
‚Ä¢ ·ûÖ·üÜ·ûì·ûΩ·ûì: $24 USD
‚Ä¢ Reference: BOT${msg.from.id}

‚ö° ·ûî·ûì·üí·ûë·û∂·ûî·üã·ûñ·û∏·ûë·ûº·ûë·û∂·ûè·üã:
1. ·ûê·ûè·ûö·ûº·ûî·ûî·ûâ·üí·ûá·û∂·ûÄ·üã·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã
2. ·ûï·üí·ûâ·ûæ·ûò·ûÄ·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã·ûÄ·üí·ûì·ûª·ûÑ·ûì·üÅ·üá
3. ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò Day 1 ·ûó·üí·ûõ·û∂·ûò·üó!

üí¨ ·ûá·üÜ·ûì·ûΩ·ûô: @Chendasum`;
        await bot.sendMessage(msg.chat.id, emergencyPayment);
        try {
            await paymentCommands.instructions(msg, bot);
        } catch (handlerError) {
            console.error("Payment handler failed, using emergency response:", handlerError);
        }
    } catch (error) {
        await sendErrorMessage(msg.chat.id, "Payment", error);
    }
});

bot.onText(/^\/day$/i, createBotHandler("Day Intro", async (msg, bot) => {
    const progress = (await Progress.findOne({ user_id: msg.from.id })) || {};
    const introMessage = `‚ú® 7-Day Money Flow Reset‚Ñ¢ ‚ú®

üéØ ·ûü·ûº·ûò·ûü·üí·ûú·û∂·ûÇ·ûò·ûì·üç·ûò·ûÄ·ûÄ·û∂·ûì·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûä·üè·ûò·û∂·ûì·ûè·ûò·üí·ûõ·üÉ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ!

üèÜ ·ûè·ûò·üí·ûö·ûª·ûô·ûü·ûò·üí·ûö·û∂·ûî·üã·û¢·üí·ûì·ûÄ:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ¬† üî± Day 1: Money Flow¬† ¬† ‚îÇ
‚îÇ¬† ¬† ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûü·üí·ûÇ·û∂·ûõ·üã¬† ¬† ¬† ¬† ‚îÇ
‚îÇ¬† ¬† Money Flow ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ¬† ¬† ‚îÇ
‚îÇ¬† + ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÄ·üÇ·ûî·üí·ûö·üÇ!¬† ¬† ¬† ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìà ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü° ·ûì·üÅ·üá·û¢·üí·ûì·ûÄ·ûì·ûπ·ûÑ·ûö·üÄ·ûì:
‚Ä¢ ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ·ûä·üÇ·ûõ·ûõ·ûª·ûô·ûõ·üÅ·ûÖ·ûí·üí·ûõ·û∂·ûô
‚Ä¢ ·ûô·ûõ·üã·ûä·ûπ·ûÑ·ûñ·û∏ Money Flow ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ
‚Ä¢ ·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûÖ·üÜ·ûé·û∂·ûô·ûò·û∑·ûì·ûÖ·û∂·üÜ·ûî·û∂·ûÖ·üã
‚Ä¢ ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûä·üÜ·ûé·ûæ·ûö·ûÄ·üÇ·ûî·üí·ûö·üÇ

üöÄ ·ûè·üí·ûö·üÄ·ûò·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·û†·ûæ·ûô·û¨·ûì·üÖ?

üëâ ·ûÖ·ûª·ûÖ /day1 ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÄ·û∂·ûö·ûï·üí·ûü·ûÑ·ûñ·üí·ûö·üÅ·ûÑ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°!`;

    await sendLongMessage(bot, msg.chat.id, introMessage, { parse_mode: "Markdown" }, MESSAGE_CHUNK_SIZE);

    if (progress.currentDay && progress.currentDay > 1) {
        setTimeout(async () => {
            const progressMessage = `üìä ·ûú·ûå·üí·ûç·ûì·ûó·û∂·ûñ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ:

üî• ·ûê·üí·ûÑ·üÉ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã: ${progress.currentDay - 1}/7
üìà ·ûó·û∂·ûÇ·ûö·ûô·ûî·ûâ·üí·ûÖ·ûî·üã: ${progress.completionPercentage || 0}%

üéØ ·ûê·üí·ûÑ·üÉ·ûî·ûì·üí·ûë·û∂·ûî·üã: /day${progress.currentDay}`;
            await bot.sendMessage(msg.chat.id, progressMessage);
        }, 1500);
    }
}, true)); // Requires paid access

bot.onText(/\/day([1-7])/i, createBotHandler("Daily Content", async (msg, bot, match) => {
    // dailyCommands.handle already contains the user lookup and paid access check
    // but the wrapper also does it. We can keep both for now, or refine dailyCommands.handle
    // to not do the check if the wrapper is guaranteed to do it.
    await dailyCommands.handle(msg, match, bot);
}, true)); // Requires paid access

bot.onText(/\/vip_program_info|\/vip$/i, createBotHandler("VIP Info", vipCommands.info, true)); // Requires paid access

// VIP Apply Handler
bot.on("message", async (msg) => {
    if (isDuplicateMessage(msg)) return;
    if (msg.text && msg.text.toUpperCase() === "VIP APPLY") {
        const handler = createBotHandler("VIP Apply", vipCommands.apply, true); // Requires paid access
        await handler(msg);
    }
});

// --- 30-Day Extended Content Commands ---
bot.onText(/\/extended(\d+)/i, createBotHandler("Extended Content", async (msg, bot, match) => {
    const day = parseInt(match[1]);
    if (isNaN(day) || day < 8 || day > 30) {
        await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûè·û∑·ûÄ·û∂·ûî·ûì·üí·ûê·üÇ·ûò·û¢·û∂·ûÖ·ûö·ûÄ·ûî·û∂·ûì·ûü·ûò·üí·ûö·û∂·ûî·üã·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü®-·ü£·ü† ·ûî·üâ·ûª·ûé·üí·ûé·üÑ·üá·üî");
        return;
    }
    // extendedContent.handleExtendedDay will be called via the wrapper
    await extendedContent.handleExtendedDay(msg, bot, day);
}, true)); // Requires paid access

// --- Admin Commands (using the wrapper with requiresAdmin = true) ---
bot.onText(/\/admin_menu|\/admin/i, createBotHandler("Admin Menu", async (msg, bot) => {
    const menuMessage = `üîß ADMIN QUICK MENU

üì± ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ:
‚Ä¢ /admin_activity - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûü·ûÄ·ûò·üí·ûò·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá
‚Ä¢ /admin_stuck - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûá·û∂·ûî·üã·ûÇ·û∂·üÜ·ûÑ
‚Ä¢ /admin_uploads - ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûÄ·û∂·ûö·ûï·üí·ûë·ûª·ûÄ·û°·ûæ·ûÑ·ûö·ûº·ûî·ûó·û∂·ûñ
‚Ä¢ /admin_followup - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûá·üÜ·ûì·ûΩ·ûô

üìä ·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ:
‚Ä¢ /admin_analytics - ·ûï·üí·ûë·û∂·üÜ·ûÑ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚Ä¢ /admin_completion - ·û¢·ûè·üí·ûö·û∂·ûî·ûâ·üí·ûÖ·ûî·üã
‚Ä¢ /admin_completed - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã

üí¨ ·ûü·ûÄ·ûò·üí·ûò·ûó·û∂·ûñ:
‚Ä¢ /admin_progress [UserID] - ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûõ·ûò·üí·û¢·û∑·ûè·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã
‚Ä¢ /admin_message [UserID] [text] - ·ûï·üí·ûâ·ûæ·ûü·û∂·ûö
‚Ä¢ /admin_remind [day] - ·ûï·üí·ûâ·ûæ·ûö·üÜ·ûõ·ûπ·ûÄ
‚Ä¢ /admin_confirm_payment [UserID] - ·ûî·ûâ·üí·ûá·û∂·ûÄ·üã·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã

üìã ·ûö·ûî·û∂·ûô·ûÄ·û∂·ûö·ûé·üç:
‚Ä¢ /admin_users - ·ûë·û∑·ûä·üí·ûã·ûó·û∂·ûñ·ûë·ûº·ûë·üÖ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã
‚Ä¢ /admin_export - ·ûì·û∂·üÜ·ûÖ·üÅ·ûâ·ûë·û∑·ûì·üí·ûì·ûì·üê·ûô CSV
‚Ä¢ /admin_photos [UserID] - ·ûö·ûº·ûî·ûó·û∂·ûñ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã

üÜò ·ûá·üÜ·ûì·ûΩ·ûô:
‚Ä¢ /admin_help - ·ûî·ûâ·üí·ûá·û∏·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚Ä¢ /whoami - ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ Admin ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ

üìã ·ûß·ûî·ûÄ·ûö·ûé·üç & ·ûë·ûò·üí·ûö·ûÑ·üã:
‚Ä¢ /admin_daily_template - ·ûë·ûò·üí·ûö·ûÑ·üã·ûè·û∂·ûò·ûä·û∂·ûì·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ
‚Ä¢ /admin_weekly_template - ·ûë·ûò·üí·ûö·ûÑ·üã·ûö·ûî·û∂·ûô·ûÄ·û∂·ûö·ûé·üç·ûî·üí·ûö·ûÖ·û∂·üÜ·ûü·ûî·üí·ûè·û∂·û†·üç
‚Ä¢ /admin_engagement_checklist - ·ûò·ûÇ·üí·ûÇ·ûª·ûë·üÅ·ûü·ûÄ·üç·ûÄ·û∂·ûö·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã
‚Ä¢ /admin_onboarding_template - ·ûë·ûò·üí·ûö·ûÑ·üã·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûê·üí·ûò·û∏

·ûú·û∂·ûô·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûé·û∂·ûò·ûΩ·ûô·ûä·ûæ·ûò·üí·ûî·û∏·ûî·üí·ûö·ûè·û∑·ûî·ûè·üí·ûè·û∑·ûó·üí·ûõ·û∂·ûò·üó!`;
    await bot.sendMessage(msg.chat.id, menuMessage);
}, false, true)); // Does NOT require paid, DOES require admin

bot.onText(/\/admin_users/i, createBotHandler("Admin Users", adminCommands.showUsers, false, true));
bot.onText(/\/admin_progress (.+)/i, createBotHandler("Admin Progress", adminCommands.checkProgress, false, true));
bot.onText(/\/admin_analytics/i, createBotHandler("Admin Analytics", adminCommands.showAnalytics, false, true));
bot.onText(/\/admin_activity/i, createBotHandler("Admin Activity", adminCommands.showActivity, false, true));
bot.onText(/\/admin_followup/i, createBotHandler("Admin Followup", adminCommands.showFollowup, false, true));
bot.onText(/\/admin_message (.+)/i, createBotHandler("Admin Message", adminCommands.sendMessage, false, true));
bot.onText(/\/admin_confirm_payment (.+)/i, createBotHandler("Admin Confirm Payment", adminCommands.confirmPayment, false, true));
bot.onText(/\/admin_export/i, createBotHandler("Admin Export", adminCommands.exportData, false, true));
bot.onText(/\/admin_help/i, createBotHandler("Admin Help", adminCommands.showHelp, false, true));

// Progress Tracking Admin Commands
bot.onText(/\/admin_stuck/i, createBotHandler("Admin Stuck", progressTracker.showStuckUsers, false, true));
bot.onText(/\/admin_completion/i, createBotHandler("Admin Completion", progressTracker.showCompletionRates, false, true));
bot.onText(/\/admin_remind (.+)/i, createBotHandler("Admin Remind", progressTracker.sendManualReminder, false, true));
bot.onText(/\/admin_completed/i, createBotHandler("Admin Completed", progressTracker.showCompletedUsers, false, true));
bot.onText(/\/admin_uploads/i, createBotHandler("Admin Uploads", progressTracker.showUploadTracking, false, true));
bot.onText(/\/admin_photos (.+)/i, createBotHandler("Admin Photos", progressTracker.showUserPhotos, false, true));

// Tools and Templates Admin Commands
bot.onText(/\/admin_daily_template/i, createBotHandler("Admin Daily Template", toolsTemplates.generateDailyTemplate, false, true));
bot.onText(/\/admin_weekly_template/i, createBotHandler("Admin Weekly Template", toolsTemplates.generateWeeklyTemplate, false, true));
bot.onText(/\/admin_engagement_checklist/i, createBotHandler("Admin Engagement Checklist", toolsTemplates.generateEngagementChecklist, false, true));
bot.onText(/\/admin_onboarding_template/i, createBotHandler("Admin Onboarding Template", toolsTemplates.generateOnboardingTemplate, false, true));

// Marketing Content Commands
bot.onText(/\/marketing_hub/i, createBotHandler("Marketing Hub", marketingContent.marketingHub, false, true));
bot.onText(/\/post_success_story/i, createBotHandler("Post Success Story", marketingContent.postSuccessStory, false, true));
bot.onText(/\/post_program_promo/i, createBotHandler("Post Program Promo", marketingContent.postProgramPromo, false, true));
bot.onText(/\/launch_flash_sale/i, createBotHandler("Launch Flash Sale", marketingContent.launchFlashSale, false, true));
bot.onText(/\/content_week/i, createBotHandler("Content Week", marketingContent.contentWeek, false, true));
bot.onText(/\/send_newsletter/i, createBotHandler("Send Newsletter", marketingContent.sendNewsletter, false, true));
bot.onText(/\/marketing_stats/i, createBotHandler("Marketing Stats", marketingContent.marketingStats, false, true));
bot.onText(/\/roi_analysis/i, createBotHandler("ROI Analysis", marketingContent.roiAnalysis, false, true));
bot.onText(/\/referral_program/i, createBotHandler("Referral Program", marketingContent.referralProgram, false, true));

// 30-Day Admin Commands
bot.onText(/\/admin_content_stats/i, createBotHandler("Admin Content Stats", thirtyDayAdmin.contentStats, false, true));
bot.onText(/\/admin_bulk_send/i, createBotHandler("Admin Bulk Send", thirtyDayAdmin.sendBulkContent, false, true));
bot.onText(/\/admin_content_calendar/i, createBotHandler("Admin Content Calendar", thirtyDayAdmin.contentCalendar, false, true));
bot.onText(/\/admin_scheduler_status/i, createBotHandler("Admin Scheduler Status", thirtyDayAdmin.schedulerStatus, false, true));

// Preview System Commands
bot.onText(/\/preview$/i, createBotHandler("Preview", previewCommands.preview));
bot.onText(/\/preview_day1/i, createBotHandler("Preview Day 1", previewCommands.previewDay1));
bot.onText(/\/preview_tools/i, createBotHandler("Preview Tools", previewCommands.previewTools));
bot.onText(/\/preview_results/i, createBotHandler("Preview Results", previewCommands.previewResults));
