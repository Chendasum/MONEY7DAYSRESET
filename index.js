require("dotenv").config();

const express = require("express");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");

console.log("üöÄ Starting 7-Day Money Flow Bot with Full Features...");
console.log("BOT_TOKEN exists:", !!process.env.BOT_TOKEN);
console.log("PORT:", process.env.PORT || 5000);

// Database Models
const User = require("./models/User");
const Progress = require("./models/Progress");

// Database connection is assumed to be handled by Drizzle ORM with PostgreSQL
console.log(
  "üîç Database configured with Drizzle ORM and PostgreSQL (via models)",
);
console.log("‚úÖ Database ready for operations");

// Set proper UTF-8 encoding for the environment to handle Khmer characters correctly
process.env.NODE_ICU_DATA = "/usr/share/nodejs/node-icu-data";
process.env.LANG = "en_US.UTF-8";

// --- Import Database Models ---
const User = require("./models/User");
const Progress = require("./models/Progress");

// --- Import Command Modules ---
const startCommand = require("./commands/start");
const dailyCommands = require("./commands/daily");
const paymentCommands = require("./commands/payment");
const vipCommands = require("./commands/vip");
const adminCommands = require("./commands/admin");
const badgesCommands = require("./commands/badges");
const quotesCommands = require("./commands/quotes");
const bookingCommands = require("./commands/booking");
const tierFeatures = require("./commands/tier-features");
const marketingCommands = require("./commands/marketing");
const marketingContent = require("./commands/marketing-content");
const extendedContent = require("./commands/extended-content");
const thirtyDayAdmin = require("./commands/30day-admin");
const previewCommands = require("./commands/preview");
const freeTools = require("./commands/free-tools");
const financialQuiz = require("./commands/financial-quiz");
const toolsTemplates = require("./commands/tools-templates");

// --- Import Service Modules ---
const scheduler = require("./services/scheduler");
const analytics = require("./services/analytics");
const celebrations = require("./services/celebrations");
const progressBadges = require("./services/progress-badges");
const emojiReactions = require("./services/emoji-reactions");
const AccessControl = require("./services/access-control");
const ContentScheduler = require("./services/content-scheduler");
const ConversionOptimizer = require("./services/conversion-optimizer");

// --- Import Utility Modules ---
const { sendLongMessage } = require("./utils/message-splitter");
const { default: fetch } = require("node-fetch"); // Ensure node-fetch is imported correctly

// Define a consistent message chunk size for splitting long messages
const MESSAGE_CHUNK_SIZE = 800;

// Initialize Telegram bot for webhook mode
const bot = new TelegramBot(process.env.BOT_TOKEN, {
  polling: false,
  onlyFirstMatch: true,
});

// DUPLICATE PREVENTION SYSTEM: Optimized for webhook mode
const processedMessages = new Set();
let lastProcessTime = {};

function isDuplicateMessage(msg) {
  const messageId = `${msg.chat.id}-${msg.message_id}`;
  const now = Date.now();

  // Only block if same message processed within last 3 seconds (for webhook mode)
  if (
    processedMessages.has(messageId) &&
    lastProcessTime[messageId] &&
    now - lastProcessTime[messageId] < 3000
  ) {
    console.log(
      `[isDuplicateMessage] Blocking recent duplicate: ${messageId} within 3s`,
    );
    return true;
  }

  processedMessages.add(messageId);
  lastProcessTime[messageId] = now;

  // Clean up old entries every 50 messages
  if (processedMessages.size > 50) {
    const cutoff = now - 30000; // 30 seconds
    Object.keys(lastProcessTime).forEach((id) => {
      if (lastProcessTime[id] < cutoff) {
        processedMessages.delete(id);
        delete lastProcessTime[id];
      }
    });
  }

  console.log(`[isDuplicateMessage] Processing message: ${messageId}`);
  return false;
}

// Express app for handling webhooks
const app = express();
const accessControl = new AccessControl();
const conversionOptimizer = new ConversionOptimizer();

// Middleware for parsing JSON and URL-encoded data with UTF-8 support
app.use(
  express.json({
    limit: "10mb",
    charset: "utf-8",
  }),
);
app.use(
  express.urlencoded({
    extended: true,
    charset: "utf-8",
  }),
);

// Set UTF-8 headers for all outgoing responses to ensure proper character encoding
app.use((req, res, next) => {
  res.setHeader("Content-Type", "application/json; charset=utf-8");
  next();
});

// Function to get the Railway URL
function getRailwayUrl() {
  // Use Railway's public domain if available, otherwise fallback
  if (process.env.RAILWAY_PUBLIC_DOMAIN) {
    return `https://${process.env.RAILWAY_PUBLIC_DOMAIN}`;
  }
  // Default Railway URL pattern
  return `https://money7daysreset-production.up.railway.app`;
}

// Enhanced bot initialization for webhook mode on Railway
async function initBotWebhook() {
  console.log("Starting bot initialization process for webhooks on Railway...");

  if (!process.env.BOT_TOKEN) {
    console.error("‚ùå ERROR: BOT_TOKEN is not set in environment variables!");
    console.error("Please ensure BOT_TOKEN is set in Railway environment.");
    process.exit(1);
  } else {
    console.log("‚úÖ BOT_TOKEN loaded successfully.");
  }

  try {
    // 1. Stop polling if active (good practice)
    try {
      await bot.stopPolling();
      console.log("Polling stopped successfully (if active).");
    } catch (stopError) {
      console.log(
        "No active polling to stop or polling was already stopped (expected).",
      );
    }

    // 2. Delete existing webhook to clear any stale configurations
    try {
      const deleteResult = await bot.deleteWebHook();
      console.log(
        "Webhook deleted successfully (via bot.deleteWebHook()):",
        deleteResult,
      );
    } catch (deleteError) {
      console.log(
        "Failed to delete webhook (via bot.deleteWebHook()):",
        deleteError.message,
      );
    }

    // 3. Construct the webhook URL for Railway
    const railwayDomain = getRailwayUrl();
    const actualWebhookUrl = `${railwayDomain}/bot${process.env.BOT_TOKEN}`;

    // Debug: Show which domain we're using
    console.log("üîç Domain check - getRailwayUrl():", getRailwayUrl());
    console.log("üîç Using Railway domain:", railwayDomain);

    console.log(`Attempting to set webhook to: ${actualWebhookUrl}`);
    const setWebhookResult = await bot.setWebHook(actualWebhookUrl);
    console.log("‚úÖ Webhook set successfully:", setWebhookResult);

    console.log("‚úÖ Bot initialized successfully for webhook mode on Railway.");
  } catch (error) {
    console.error("‚ùå Bot initialization error for webhooks:", error.message);
    process.exit(1);
  }
}

// Wrap the main startup logic in an async IIFE to ensure proper async flow
(async () => {
  await initBotWebhook();

  const PORT = process.env.PORT || 5000;
  const HOST = "0.0.0.0"; // Railway requires 0.0.0.0

  const server = app.listen(PORT, HOST, () => {
    console.log(`üöÄ Server running on ${HOST}:${PORT}`);
    console.log(`üî• 7-Day Money Flow automation ACTIVE on Railway!`);
    console.log(`‚úÖ Server is fully listening for incoming requests.`);
  });

  // Initialize cron job for daily messages
  cron.schedule("0 9 * * *", async () => {
    console.log("üïò Sending daily messages...");
    try {
      await scheduler.sendDailyMessages(bot);
    } catch (error) {
      console.error("Error sending daily messages via cron:", error);
    }
  });

  const contentScheduler = new ContentScheduler(bot);
  contentScheduler.start();

  console.log("ü§ñ Bot started successfully with 7-Day + 30-Day automation!");
  console.log("üöÄ Features added:");
  console.log("   ‚Ä¢ Auto next-day reminders (24h delay)");
  console.log("   ‚Ä¢ Day 3 upsell automation (1h delay)");
  console.log("   ‚Ä¢ 30-day follow-up for results");
  console.log("   ‚Ä¢ Enhanced welcome sequence");
  console.log("   ‚Ä¢ 30-day extended content automation");
  console.log("   ‚Ä¢ Daily content delivery (9 AM Cambodia)");
  console.log("   ‚Ä¢ Evening motivation (6 PM Cambodia)");
  console.log("   ‚Ä¢ Weekly reviews (Sunday 8 PM Cambodia)");
  console.log("üî± 7-Day Money Flow Reset‚Ñ¢ + 30-Day Extended Content READY!");

  process.on("SIGTERM", () => {
    console.log("SIGTERM received, shutting down gracefully");
    server.close(() => {
      console.log("Server closed");
      process.exit(0);
    });
  });

  process.on("SIGINT", () => {
    console.log("SIGINT received, shutting down gracefully");
    server.close(() => {
      console.log("Server closed");
      process.exit(0);
    });
  });

  process.on("uncaughtException", (err) => {
    console.error("Uncaught Exception:", err);
    process.exit(1);
  });

  process.on("unhandledRejection", (reason, promise) => {
    console.error("Unhandled Rejection at:", promise, "reason:", reason);
    process.exit(1);
  });
})();

// ========================================
// TELEGRAM BOT COMMAND HANDLERS
// ========================================

// Handle /start command: Initiates the bot interaction
bot.onText(/\/start/i, async (msg) => {
  console.log(
    "üöÄ [START HANDLER] /start command received from user:",
    msg.from.id,
    "username:",
    msg.from.username,
    "chat_id:",
    msg.chat.id,
  );
  if (isDuplicateMessage(msg)) {
    console.log(
      "üîÑ [START HANDLER] Duplicate /start message prevented for user:",
      msg.from.id,
    );
    return;
  }
  try {
    console.log(
      "üìù [START HANDLER] Processing /start command for user:",
      msg.from.id,
    );
    await startCommand.handle(msg, bot);
    console.log(
      "‚úÖ [START HANDLER] Start command completed for user:",
      msg.from.id,
    );
  } catch (error) {
    console.error("‚ùå [START HANDLER] Error handling /start command:", error);
    console.error("‚ùå [START HANDLER] Full error stack:", error.stack);
    await bot.sendMessage(
      msg.chat.id,
      "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·ûì·üÖ·ûñ·üÅ·ûõ·ûÄ·üí·ûö·üÑ·ûô·üî",
    );
  }
});

// Handle /help command: Shows help information
bot.onText(/\/help/i, async (msg) => {
  console.log(`[Help Command] Received /help from user: ${msg.from.id}`);
  if (isDuplicateMessage(msg)) {
    console.log(
      `[Help Command] Duplicate /help message prevented for user: ${msg.from.id}`,
    );
    return;
  }
  try {
    console.log(
      `[Help Command] Fetching tier-specific help for user: ${msg.from.id}`,
    );
    const helpMessageContent = await accessControl.getTierSpecificHelp(
      msg.from.id,
    );
    console.log(
      `[Help Command] Successfully fetched help content. Length: ${helpMessageContent.length}`,
    );
    await sendLongMessage(
      bot,
      msg.chat.id,
      helpMessageContent,
      { parse_mode: "Markdown" },
      MESSAGE_CHUNK_SIZE,
    );
    console.log(`[Help Command] Help message sent to user: ${msg.from.id}`);
  } catch (error) {
    console.error(
      `‚ùå [Help Command] Error handling /help command for user ${msg.from.id}:`,
      error,
    );
    await bot.sendMessage(
      msg.chat.id,
      "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûï·üí·ûë·ûª·ûÄ·ûá·üÜ·ûì·ûΩ·ûô·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî",
    );
  }
});

// EMERGENCY /pricing command handler - Direct response to restore functionality  
bot.onText(/\/pricing/i, async (msg) => {
  console.log("[PRICING] Command received from user:", msg.from.id);
  if (isDuplicateMessage(msg)) return;
  
  try {
    // Emergency pricing message - direct response
    const emergencyPricing = `üí∞ ·ûè·ûò·üí·ûõ·üÉ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ 7-Day Money Flow Reset‚Ñ¢

üéØ ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûü·û∂·ûò·ûâ·üí·ûâ (Essential Program)
üíµ ·ûè·ûò·üí·ûõ·üÉ: $24 USD (·ûî·ûâ·üí·ûÖ·ûª·üá·ûè·ûò·üí·ûõ·üÉ 50%)
üè∑Ô∏è ·ûÄ·ûº·ûä: LAUNCH50

üìö ·û¢·üí·ûú·û∏·ûä·üÇ·ûõ·û¢·üí·ûì·ûÄ·ûì·ûπ·ûÑ·ûë·ûë·ûΩ·ûõ·ûî·û∂·ûì:
‚úÖ ·ûò·üÅ·ûö·üÄ·ûì ·üß ·ûê·üí·ûÑ·üÉ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚úÖ ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô·ûî·û∂·ûì·ûõ·üí·û¢
‚úÖ ·ûÄ·û∂·ûö·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûÖ·üÜ·ûé·û∂·ûô
‚úÖ ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ
‚úÖ ·ûï·üÇ·ûì·ûÄ·û∂·ûö·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª·ûÖ·üí·ûî·û∂·ûü·üã

üíé ·ûú·û∑·ûí·û∏·ûë·ûº·ûë·û∂·ûè·üã:
‚Ä¢ ABA Bank: 000 194 742
‚Ä¢ ACLEDA Bank: 092 798 169  
‚Ä¢ Wing: 102 534 677
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA
‚Ä¢ ·ûÄ·üÜ·ûé·ûè·üã·ûÖ·üÜ·ûé·û∂·üÜ: BOT${msg.from.id}

‚ö° ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûó·üí·ûõ·û∂·ûò·üó:
üëâ /payment - ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûë·ûº·ûë·û∂·ûè·üã·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
üëâ @Chendasum - ·ûá·üÜ·ûì·ûΩ·ûô·ûï·üí·ûë·û∂·ûõ·üã`;

    await bot.sendMessage(msg.chat.id, emergencyPricing);
    
    // Try to call the original handler, but don't break if it fails
    try {
      await paymentCommands.pricing(msg, bot);
    } catch (handlerError) {
      console.error("Pricing handler failed, using emergency response:", handlerError);
    }
    
  } catch (error) {
    console.error("‚ùå [PRICING] Emergency handler failed:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum");
  }
});

// EMERGENCY /payment command handler - Direct response to restore functionality
bot.onText(/\/payment/i, async (msg) => {
  console.log("[PAYMENT] Command received from user:", msg.from.id);
  if (isDuplicateMessage(msg)) return;
  
  try {
    // Emergency payment instructions - direct response
    const emergencyPayment = `üí≥ ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûë·ûº·ûë·û∂·ûè·üã (Emergency)

üè¶ ABA Bank (·ûö·û†·üê·ûü)
‚Ä¢ ·ûÇ·ûé·ûì·û∏: 000 194 742
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA  
‚Ä¢ ·ûÖ·üÜ·ûì·ûΩ·ûì: $24 USD
‚Ä¢ Reference: BOT${msg.from.id}

üì± Wing (·ûõ·ûø·ûì·ûî·üÜ·ûï·ûª·ûè)
‚Ä¢ ·ûõ·üÅ·ûÅ: 102 534 677
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA
‚Ä¢ ·ûÖ·üÜ·ûì·ûΩ·ûì: $24 USD
‚Ä¢ ·ûÄ·üÜ·ûé·ûè·üã·ûÖ·üÜ·ûé·û∂·üÜ: BOT${msg.from.id}

üè¶ ACLEDA Bank
‚Ä¢ ·ûÇ·ûé·ûì·û∏: 092 798 169
‚Ä¢ ·ûà·üí·ûò·üÑ·üá: SUM CHENDA
‚Ä¢ ·ûÖ·üÜ·ûì·ûΩ·ûì: $24 USD  
‚Ä¢ Reference: BOT${msg.from.id}

‚ö° ·ûî·ûì·üí·ûë·û∂·ûî·üã·ûñ·û∏·ûë·ûº·ûë·û∂·ûè·üã:
1. ·ûê·ûè·ûö·ûº·ûî·ûî·ûâ·üí·ûá·û∂·ûÄ·üã·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã
2. ·ûï·üí·ûâ·ûæ·ûò·ûÄ·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã·ûÄ·üí·ûì·ûª·ûÑ·ûì·üÅ·üá
3. ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò Day 1 ·ûó·üí·ûõ·û∂·ûò·üó!

üí¨ ·ûá·üÜ·ûì·ûΩ·ûô: @Chendasum`;

    await bot.sendMessage(msg.chat.id, emergencyPayment);
    
    // Try to call the original handler, but don't break if it fails
    try {
      await paymentCommands.instructions(msg, bot);
    } catch (handlerError) {
      console.error("Payment handler failed, using emergency response:", handlerError);
    }
    
  } catch (error) {
    console.error("‚ùå [PAYMENT] Emergency handler failed:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum");
  }
});

// Handle /day command (without number): Shows an introduction to the 7-Day program
bot.onText(/^\/day$/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const chatId = msg.chat.id;
    const isPaid = user?.is_paid === true || user?.is_paid === 't';

    if (!user || !isPaid) {
      await bot.sendMessage(
        chatId,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }

    const progress = (await Progress.findOne({ user_id: msg.from.id })) || {};

    const introMessage = `‚ú® 7-Day Money Flow Reset‚Ñ¢ ‚ú®

üéØ ·ûü·ûº·ûò·ûü·üí·ûú·û∂·ûÇ·ûò·ûì·üç·ûò·ûÄ·ûÄ·û∂·ûì·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûä·üè·ûò·û∂·ûì·ûè·ûò·üí·ûõ·üÉ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ!

üèÜ ·ûè·ûò·üí·ûö·ûª·ûô·ûü·ûò·üí·ûö·û∂·ûî·üã·û¢·üí·ûì·ûÄ:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  üî± Day 1: Money Flow    ‚îÇ
‚îÇ    ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûü·üí·ûÇ·û∂·ûõ·üã       ‚îÇ
‚îÇ   Money Flow ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ    ‚îÇ
‚îÇ  + ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÄ·üÇ·ûî·üí·ûö·üÇ!      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üìà ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü° ·ûì·üÅ·üá·û¢·üí·ûì·ûÄ·ûì·ûπ·ûÑ·ûö·üÄ·ûì:
‚Ä¢ ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ·ûä·üÇ·ûõ·ûõ·ûª·ûô·ûõ·üÅ·ûÖ·ûí·üí·ûõ·û∂·ûô
‚Ä¢ ·ûô·ûõ·üã·ûä·ûπ·ûÑ·ûñ·û∏ Money Flow ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ
‚Ä¢ ·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûÖ·üÜ·ûé·û∂·ûô·ûò·û∑·ûì·ûÖ·û∂·üÜ·ûî·û∂·ûÖ·üã
‚Ä¢ ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûä·üÜ·ûé·ûæ·ûö·ûÄ·üÇ·ûî·üí·ûö·üÇ

üöÄ ·ûè·üí·ûö·üÄ·ûò·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·û†·ûæ·ûô·û¨·ûì·üÖ?

üëâ ·ûÖ·ûª·ûÖ /day1 ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÄ·û∂·ûö·ûï·üí·ûü·ûÑ·ûñ·üí·ûö·üÅ·ûÑ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°!`;

    await sendLongMessage(
      bot,
      chatId,
      introMessage,
      { parse_mode: "Markdown" },
      MESSAGE_CHUNK_SIZE,
    );

    if (progress.currentDay && progress.currentDay > 1) {
      setTimeout(async () => {
        const progressMessage = `üìä ·ûú·ûå·üí·ûç·ûì·ûó·û∂·ûñ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ:

üî• ·ûê·üí·ûÑ·üÉ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã: ${progress.currentDay - 1}/7
üìà ·ûó·û∂·ûÇ·ûö·ûô·ûî·ûâ·üí·ûÖ·ûî·üã: ${progress.completionPercentage || 0}%

üéØ ·ûê·üí·ûÑ·üÉ·ûî·ûì·üí·ûë·û∂·ûî·üã: /day${progress.currentDay}`;
        await bot.sendMessage(chatId, progressMessage);
      }, 1500);
    }
  } catch (error) {
    console.error("Error in /day command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Handle /day[1-7] commands: Delivers daily lesson content - WEBHOOK MODE OPTIMIZED
bot.onText(/\/day([1-7])/i, async (msg, match) => {
  console.log(`üéØ /day${match[1]} command received from user ${msg.from.id}`);
  try {
    console.log(`üîç Looking up user ${msg.from.id} in database...`);
    // FIXED: Use correct PostgreSQL field names
    const user = await User.findOne({ telegram_id: msg.from.id });
    console.log(`üìä User lookup result:`, {
      found: !!user,
      id: user?.telegram_id,
      name: user?.first_name,
      paid: user?.is_paid,
      tier: user?.tier,
    });

    console.log(`Daily command access check for user ${msg.from.id}:`, {
      user_found: !!user,
      is_paid_raw: user?.is_paid,
      is_paid_boolean: user?.is_paid === true || user?.is_paid === "t",
      tier: user?.tier,
    });

    // FIXED: Check is_paid properly (PostgreSQL stores as 't'/'f' strings)
    const isPaid = user?.is_paid === true || user?.is_paid === "t";

    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }

    await dailyCommands.handle(msg, match, bot);
  } catch (error) {
    console.error("Error in daily command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// VIP command handlers: Both /vip_program_info and /vip trigger VIP information
bot.onText(/\/vip_program_info/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';

    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }

    await vipCommands.info(msg, bot);
  } catch (error) {
    console.error("Error in VIP info command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûï·üí·ûë·ûª·ûÄ·ûñ·üê·ûè·üå·ûò·û∂·ûì VIP·üî");
  }
});

bot.onText(/\/vip$/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';

    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }

    await vipCommands.info(msg, bot);
  } catch (error) {
    console.error("Error in VIP command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûï·üí·ûë·ûª·ûÄ·ûñ·üê·ûè·üå·ûò·û∂·ûì VIP·üî");
  }
});

// Admin Commands: Restricted access commands for bot administrators
bot.onText(/\/admin_users/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.showUsers(msg, bot);
  } catch (e) {
    console.error("Error /admin_users:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_progress (.+)/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.checkProgress(msg, match, bot);
  } catch (e) {
    console.error("Error /admin_progress:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_analytics/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.showAnalytics(msg, bot);
  } catch (e) {
    console.error("Error /admin_analytics:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_activity/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.showActivity(msg, bot);
  } catch (e) {
    console.error("Error /admin_activity:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_followup/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.showFollowup(msg, bot);
  } catch (e) {
    console.error("Error /admin_followup:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_message (.+)/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.sendMessage(msg, match, bot);
  } catch (e) {
    console.error("Error /admin_message:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_confirm_payment (.+)/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.confirmPayment(msg, match, bot);
  } catch (e) {
    console.error("Error /admin_confirm_payment:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_export/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.exportData(msg, bot);
  } catch (e) {
    console.error("Error /admin_export:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_help/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await adminCommands.showHelp(msg, bot);
  } catch (e) {
    console.error("Error /admin_help:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// VIP Apply Handler: Processes user's "VIP APPLY" message (case-insensitive) - FIXED DATABASE FIELDS
bot.on("message", async (msg) => {
  if (isDuplicateMessage(msg)) return;

  if (msg.text && msg.text.toUpperCase() === "VIP APPLY") {
    try {
      // FIXED: Use correct PostgreSQL field name
      const user = await User.findOne({ telegram_id: msg.from.id });

      // FIXED: Check is_paid properly (PostgreSQL stores as 't'/'f' strings)
      const isPaid = user?.is_paid === true || user?.is_paid === "t";

      if (!user || !isPaid) {
        await bot.sendMessage(
          msg.chat.id,
          "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
        );
        return;
      }
      await vipCommands.apply(msg, bot);
    } catch (error) {
      console.error("Error handling VIP APPLY message:", error);
      await bot.sendMessage(
        msg.chat.id,
        "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö·ûü·üÜ·ûé·ûæ VIP·üî",
      );
    }
  }
});

// Progress Tracking Admin Commands
const progressTracker = require("./commands/progress-tracker");
bot.onText(/\/admin_stuck/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await progressTracker.showStuckUsers(msg, bot);
  } catch (e) {
    console.error("Error /admin_stuck:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_completion/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await progressTracker.showCompletionRates(msg, bot);
  } catch (e) {
    console.error("Error /admin_completion:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_remind (.+)/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await progressTracker.sendManualReminder(msg, match, bot);
  } catch (e) {
    console.error("Error /admin_remind:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_completed/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await progressTracker.showCompletedUsers(msg, bot);
  } catch (e) {
    console.error("Error /admin_completed:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_uploads/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await progressTracker.showUploadTracking(msg, bot);
  } catch (e) {
    console.error("Error /admin_uploads:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_photos (.+)/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await progressTracker.showUserPhotos(msg, match, bot);
  } catch (e) {
    console.error("Error /admin_photos:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// Quick Admin Menu: Provides a quick list of admin commands
bot.onText(/\/admin_menu|\/admin/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  const adminId = parseInt(process.env.ADMIN_CHAT_ID);
  const secondaryAdminId = 484389665;
  if (![adminId, secondaryAdminId].includes(msg.from.id)) {
    await bot.sendMessage(
      msg.chat.id,
      "‚ö†Ô∏è ·û¢·üí·ûì·ûÄ·ûò·û∑·ûì·ûò·û∂·ûì·ûü·û∑·ûë·üí·ûí·û∑·ûî·üí·ûö·ûæ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûì·üÅ·üá·ûë·üÅ·üî",
    );
    return;
  }

  const menuMessage = `üîß ADMIN QUICK MENU

üì± ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ:
‚Ä¢ /admin_activity - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûü·ûÄ·ûò·üí·ûò·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá
‚Ä¢ /admin_stuck - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûá·û∂·ûî·üã·ûÇ·û∂·üÜ·ûÑ
‚Ä¢ /admin_uploads - ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûÄ·û∂·ûö·ûï·üí·ûë·ûª·ûÄ·û°·ûæ·ûÑ·ûö·ûº·ûî·ûó·û∂·ûñ
‚Ä¢ /admin_followup - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûá·üÜ·ûì·ûΩ·ûô

üìä ·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ:
‚Ä¢ /admin_analytics - ·ûï·üí·ûë·û∂·üÜ·ûÑ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚Ä¢ /admin_completion - ·û¢·ûè·üí·ûö·û∂·ûî·ûâ·üí·ûÖ·ûî·üã
‚Ä¢ /admin_completed - ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÇ·ûõ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã

üí¨ ·ûü·ûÄ·ûò·üí·ûò·ûó·û∂·ûñ:
‚Ä¢ /admin_progress [UserID] - ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûõ·ûò·üí·û¢·û∑·ûè·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã
‚Ä¢ /admin_message [UserID] [text] - ·ûï·üí·ûâ·ûæ·ûü·û∂·ûö
‚Ä¢ /admin_remind [day] - ·ûï·üí·ûâ·ûæ·ûö·üÜ·ûõ·ûπ·ûÄ
‚Ä¢ /admin_confirm_payment [UserID] - ·ûî·ûâ·üí·ûá·û∂·ûÄ·üã·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã

üìã ·ûö·ûî·û∂·ûô·ûÄ·û∂·ûö·ûé·üç:
‚Ä¢ /admin_users - ·ûë·û∑·ûä·üí·ûã·ûó·û∂·ûñ·ûë·ûº·ûë·üÖ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã
‚Ä¢ /admin_export - ·ûì·û∂·üÜ·ûÖ·üÅ·ûâ·ûë·û∑·ûì·üí·ûì·ûì·üê·ûô CSV
‚Ä¢ /admin_photos [UserID] - ·ûö·ûº·ûî·ûó·û∂·ûñ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã

üÜò ·ûá·üÜ·ûì·ûΩ·ûô:
‚Ä¢ /admin_help - ·ûî·ûâ·üí·ûá·û∏·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
‚Ä¢ /whoami - ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ Admin ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ

üìã ·ûß·ûî·ûÄ·ûö·ûé·üç & ·ûë·ûò·üí·ûö·ûÑ·üã:
‚Ä¢ /admin_daily_template - ·ûë·ûò·üí·ûö·ûÑ·üã·ûè·û∂·ûò·ûä·û∂·ûì·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ
‚Ä¢ /admin_weekly_template - ·ûë·ûò·üí·ûö·ûÑ·üã·ûö·ûî·û∂·ûô·ûÄ·û∂·ûö·ûé·üç·ûî·üí·ûö·ûÖ·û∂·üÜ·ûü·ûî·üí·ûè·û∂·û†·üç
‚Ä¢ /admin_engagement_checklist - ·ûò·ûÇ·üí·ûÇ·ûª·ûë·üÅ·ûü·ûÄ·üç·ûÄ·û∂·ûö·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã
‚Ä¢ /admin_onboarding_template - ·ûë·ûò·üí·ûö·ûÑ·üã·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûê·üí·ûò·û∏

·ûú·û∂·ûô·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûé·û∂·ûò·ûΩ·ûô·ûä·ûæ·ûò·üí·ûî·û∏·ûî·üí·ûö·ûè·û∑·ûî·ûè·üí·ûè·û∑·ûó·üí·ûõ·û∂·ûò·üó!`;

  await bot.sendMessage(msg.chat.id, menuMessage);
});

// Tools and Templates Admin Commands
bot.onText(/\/admin_daily_template/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await toolsTemplates.generateDailyTemplate(msg, bot);
  } catch (e) {
    console.error("Error /admin_daily_template:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_weekly_template/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await toolsTemplates.generateWeeklyTemplate(msg, bot);
  } catch (e) {
    console.error("Error /admin_weekly_template:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_engagement_checklist/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await toolsTemplates.generateEngagementChecklist(msg, bot);
  } catch (e) {
    console.error("Error /admin_engagement_checklist:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_onboarding_template/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await toolsTemplates.generateOnboardingTemplate(msg, bot);
  } catch (e) {
    console.error("Error /admin_onboarding_template:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// Marketing Content Commands
bot.onText(/\/marketing_hub/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.marketingHub(msg, bot);
  } catch (e) {
    console.error("Error /marketing_hub:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/post_success_story/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.postSuccessStory(msg, bot);
  } catch (e) {
    console.error("Error /post_success_story:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/post_program_promo/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.postProgramPromo(msg, bot);
  } catch (e) {
    console.error("Error /post_program_promo:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/launch_flash_sale/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.launchFlashSale(msg, bot);
  } catch (e) {
    console.error("Error /launch_flash_sale:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/content_week/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.contentWeek(msg, bot);
  } catch (e) {
    console.error("Error /content_week:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/send_newsletter/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.sendNewsletter(msg, bot);
  } catch (e) {
    console.error("Error /send_newsletter:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/marketing_stats/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.marketingStats(msg, bot);
  } catch (e) {
    console.error("Error /marketing_stats:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/roi_analysis/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.roiAnalysis(msg, bot);
  } catch (e) {
    console.error("Error /roi_analysis:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/referral_program/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await marketingContent.referralProgram(msg, bot);
  } catch (e) {
    console.error("Error /referral_program:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// 30-Day Extended Content Commands: Access lessons from Day 8 to Day 30
bot.onText(/\/extended(\d+)/i, async (msg, match) => {
  if (isDuplicateMessage(msg)) return;
  const day = parseInt(match[1]);
  if (isNaN(day) || day < 8 || day > 30) {
    await bot.sendMessage(
      msg.chat.id,
      "‚ùå ·ûò·û∂·ûè·û∑·ûÄ·û∂·ûî·ûì·üí·ûê·üÇ·ûò·û¢·û∂·ûÖ·ûö·ûÄ·ûî·û∂·ûì·ûü·ûò·üí·ûö·û∂·ûî·üã·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü®-·ü£·ü† ·ûî·üâ·ûª·ûé·üí·ûé·üÑ·üá·üî",
    );
    return;
  }
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';
    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûî·üí·ûö·ûæ·ûò·û∂·ûè·û∑·ûÄ·û∂·ûî·ûì·üí·ûê·üÇ·ûò·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }
    await extendedContent.handleExtendedDay(msg, bot, day);
  } catch (error) {
    console.error("Error in /extended command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// 30-Day Admin Commands
bot.onText(/\/admin_content_stats/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await thirtyDayAdmin.contentStats(msg, bot);
  } catch (e) {
    console.error("Error /admin_content_stats:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_bulk_send/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await thirtyDayAdmin.sendBulkContent(msg, bot);
  } catch (e) {
    console.error("Error /admin_bulk_send:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_content_calendar/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await thirtyDayAdmin.contentCalendar(msg, bot);
  } catch (e) {
    console.error("Error /admin_content_calendar:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/admin_scheduler_status/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await thirtyDayAdmin.schedulerStatus(msg, bot);
  } catch (e) {
    console.error("Error /admin_scheduler_status:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// Preview System Commands: Free access to preview content
bot.onText(/\/preview$/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await previewCommands.preview(msg, bot);
  } catch (e) {
    console.error("Error /preview:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/preview_day1/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await previewCommands.previewDay1(msg, bot);
  } catch (e) {
    console.error("Error /preview_day1:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/preview_tools/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await previewCommands.previewTools(msg, bot);
  } catch (e) {
    console.error("Error /preview_tools:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/preview_results/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await previewCommands.previewResults(msg, bot);
  } catch (e) {
    console.error("Error /preview_results:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/preview_journey/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await previewCommands.previewJourney(msg, bot);
  } catch (e) {
    console.error("Error /preview_journey:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/preview_before_after/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await previewCommands.previewBeforeAfter(msg, bot);
  } catch (e) {
    console.error("Error /preview_before_after:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/preview_transformation/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await previewCommands.previewTransformation(msg, bot);
  } catch (e) {
    console.error("Error /preview_transformation:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// Financial Health Quiz Commands: Free assessment
bot.onText(/\/financial_quiz/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await financialQuiz.startQuiz(msg, bot);
  } catch (e) {
    console.error("Error /financial_quiz:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/health_check/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await financialQuiz.startQuiz(msg, bot);
  } catch (e) {
    console.error("Error /health_check:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// Free Tools Commands: Available to all users without payment
bot.onText(/\/calculate_daily/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await freeTools.calculateDaily(msg, bot);
  } catch (e) {
    console.error("Error /calculate_daily:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/find_leaks/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await freeTools.findLeaks(msg, bot);
  } catch (e) {
    console.error("Error /find_leaks:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
  return;
});
bot.onText(/\/savings_potential/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await freeTools.savingsPotential(msg, bot);
  } catch (e) {
    console.error("Error /savings_potential:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/income_analysis/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await freeTools.incomeAnalysis(msg, bot);
  } catch (e) {
    console.error("Error /income_analysis:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// Badge Commands: Requires payment to view
bot.onText(/\/badges/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';
    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ badges·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûé·û∏·üî",
      );
      return;
    }
    await badgesCommands.showBadges(msg, bot);
  } catch (error) {
    console.error("Error in /badges command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Progress Command: Requires payment to view
bot.onText(/\/progress/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';
    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûÄ·û∂·ûö·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }
    await badgesCommands.showProgress(msg, bot);
  } catch (error) {
    console.error("Error in /progress command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Milestones Command: Requires payment to view
bot.onText(/\/milestones/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';
    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûü·ûò·û∑·ûë·üí·ûí·ûï·ûõ·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }
    await badgesCommands.showMilestones(msg, bot);
  } catch (error) {
    console.error("Error in /milestones command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Streak Command: Requires payment to view
bot.onText(/\/streak/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';
    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûÄ·û∂·ûö·ûí·üí·ûú·ûæ·ûî·ûì·üí·ûè·ûî·ûì·üí·ûë·û∂·ûî·üã·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }
    await badgesCommands.showStreak(msg, bot);
  } catch (error) {
    console.error("Error in /streak command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
});

// Quote Commands: Premium features (assuming these are premium/paid features)
bot.onText(/\/quote$/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await quotesCommands.dailyQuote(msg, bot);
  } catch (e) {
    console.error("Error /quote:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/wisdom/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await quotesCommands.randomWisdom(msg, bot);
  } catch (e) {
    console.error("Error /wisdom:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/quote_categories/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await quotesCommands.showCategories(msg, bot);
  } catch (e) {
    console.error("Error /quote_categories:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/quote_traditional/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await quotesCommands.categoryQuote(msg, bot, "traditional");
  } catch (e) {
    console.error("Error /quote_traditional:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/quote_financial/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await quotesCommands.categoryQuote(msg, bot, "financial");
  } catch (e) {
    console.error("Error /quote_financial:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/quote_motivation/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await quotesCommands.categoryQuote(msg, bot, "motivation");
  } catch (e) {
    console.error("Error /quote_motivation:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/quote_success/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await quotesCommands.categoryQuote(msg, bot, "success");
  } catch (e) {
    console.error("Error /quote_success:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// Smart FAQ Command: Shows different content based on user's payment status
bot.onText(/\/faq|FAQ|faq/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user && (user.is_paid === true || user.is_paid === 't');
    const isPremiumOrVip =
      user && (user.tier === "premium" || user.tier === "vip");
    const isVip = user && user.tier === "vip";

    let faqMessage;

    if (!isPaid) {
      faqMessage = `‚ùì ·ûü·üÜ·ûé·ûΩ·ûö·ûâ·ûπ·ûÄ·ûâ·û∂·ûî·üã (FAQ) - Welcome Guide

üí∞ ·û¢·üÜ·ûñ·û∏·ûè·ûò·üí·ûõ·üÉ:
- ·ûè·ûò·üí·ûõ·üÉ·ûî·üâ·ûª·ûì·üí·ûò·û∂·ûì? ‚Üí $47 (Essential) / $97 (Premium) / $197 (VIP)
- ·ûë·ûº·ûë·û∂·ûè·üã·ûô·üâ·û∂·ûÑ·ûä·ûº·ûÖ·ûò·üí·ûè·üÅ·ûÖ? ‚Üí ABA Bank, ACLEDA Bank, Wing Payment
- ·ûî·ûâ·üí·ûá·û∂·ûÄ·üã·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã·ûö·ûô·üà·ûñ·üÅ·ûõ·ûî·üâ·ûª·ûì·üí·ûò·û∂·ûì? ‚Üí ·ü°-·ü¢ ·ûò·üâ·üÑ·ûÑ
- ·ûë·ûë·ûΩ·ûõ·ûî·û∂·ûì·û¢·üí·ûú·û∏·ûÅ·üí·ûõ·üá? ‚Üí /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûõ·ûò·üí·û¢·û∑·ûè

‚è∞ ·û¢·üÜ·ûñ·û∏·ûñ·üÅ·ûõ·ûú·üÅ·ûõ·û∂:
- ·ûÖ·üÜ·ûé·û∂·ûô·ûñ·üÅ·ûõ·ûî·üâ·ûª·ûì·üí·ûò·û∂·ûì·ûì·û∂·ûë·û∏? ‚Üí ·ü°·ü•-·ü¢·ü† ·ûì·û∂·ûë·û∏·ûÄ·üí·ûì·ûª·ûÑ·ûò·ûΩ·ûô·ûê·üí·ûÑ·üÉ
- ·û¢·û∂·ûÖ·ûí·üí·ûú·ûæ·ûõ·ûø·ûì·ûá·û∂·ûÑ·ûì·üÅ·üá·ûî·û∂·ûì·ûë·üÅ? ‚Üí ·ûî·û∂·ûì ·ûè·üÇ·ûé·üÇ·ûì·û∂·üÜ ·ü° ·ûê·üí·ûÑ·üÉ/·ü° ·ûò·üÅ·ûö·üÄ·ûì
- ·ûí·üí·ûú·ûæ·ûö·ûΩ·ûÖ·û†·ûæ·ûô ·ûë·ûæ·ûî·ûí·üí·ûú·ûæ·ûî·ûì·üí·ûè·ûî·û∂·ûì·ûë·üÅ? ‚Üí ·ûÇ·üí·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂! ·ûí·üí·ûú·ûæ·ûè·û∂·ûò·ûõ·üí·ûî·ûø·ûì·ûÅ·üí·ûõ·ûΩ·ûì·ûØ·ûÑ

üéØ ·û¢·üÜ·ûñ·û∏·ûò·û∂·ûè·û∑·ûÄ·û∂:
- ·ûò·üÅ·ûö·üÄ·ûì·ûò·û∂·ûì·û¢·üí·ûú·û∏·ûÅ·üí·ûõ·üá? ‚Üí ·üß ·ûê·üí·ûÑ·üÉ Money Management ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
- ·ûó·û∂·ûü·û∂·û¢·üí·ûú·û∏? ‚Üí ·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö ·ü°·ü†·ü†% (·ûñ·û∂·ûÄ·üí·ûô·ûñ·üÅ·ûÖ·ûì·üç·û¢·üÜ·ûñ·û∏·ûî·üí·ûö·û∂·ûÄ·üã)
- ·ûë·ûë·ûΩ·ûõ·ûî·û∂·ûì·û¢·üí·ûú·û∏·ûÅ·üí·ûõ·üá? ‚Üí ·ûÖ·üÜ·ûé·üÅ·üá·ûä·ûπ·ûÑ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô ·ûì·û∑·ûÑ·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ

üîß ·û¢·üÜ·ûñ·û∏·ûî·ûÖ·üí·ûÖ·üÅ·ûÄ·ûë·üÅ·ûü:
- ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûß·ûî·ûÄ·ûö·ûé·üç·û¢·üí·ûú·û∏? ‚Üí ·ûÇ·üí·ûö·û∂·ûì·üã·ûè·üÇ Telegram app
- ·ûë·û∑·ûì·üí·ûì·ûì·üê·ûô·ûö·ûÄ·üí·ûü·û∂·ûë·ûª·ûÄ·ûé·û∂? ‚Üí Server ·ûü·ûª·ûú·ûè·üí·ûê·û∑·ûó·û∂·ûñ ·ü°·ü†·ü†%
- ·ûî·û∂·ûè·üã·ûë·û∑·ûì·üí·ûì·ûì·üê·ûô·û¢·ûè·üã? ‚Üí ·ûò·û∑·ûì·ûî·û∂·ûè·üã - ·ûò·û∂·ûì backup ·ûü·üí·ûú·üê·ûô·ûî·üí·ûö·ûú·ûè·üí·ûè·û∑

üì± ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûä·üÇ·ûõ·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ:
- üè† ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò ‚Üí /start
- üí∞ ·ûò·ûæ·ûõ·ûè·ûò·üí·ûõ·üÉ ‚Üí /pricing
- üí≥ ·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã ‚Üí /payment
- üõ† ·ûá·üÜ·ûì·ûΩ·ûô ‚Üí /help
- üìä ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ ‚Üí /status
- ‚ùì ·ûü·üÜ·ûé·ûΩ·ûö·ûì·üÅ·üá ‚Üí /faq
- üë§ ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûÅ·üí·ûâ·ûª·üÜ ‚Üí /whoami

üîí ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûñ·û∑·ûü·üÅ·ûü (·ûî·ûì·üí·ûë·û∂·ûî·üã·ûñ·û∏·ûë·ûº·ûë·û∂·ûè·üã):
- üìö ·ûò·üÅ·ûö·üÄ·ûì Day 1-7 ‚Üí /day1 ·ûä·ûõ·üã /day7
- üèÜ ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûÄ·û∂·ûö·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì ‚Üí /badges, /progress
- üìö ·ûü·ûò·üí·ûö·ûÑ·üã·ûî·üí·ûö·û∂·ûá·üí·ûâ·û∂·ûÅ·üí·ûò·üÇ·ûö ‚Üí /quote, /wisdom
- üåü ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûÄ·ûò·üí·ûö·û∑·ûè·ûÅ·üí·ûñ·ûü·üã ‚Üí VIP Programs

‚ùì ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûñ·üÅ·ûõ·ûÖ·ûò·üí·ûõ·üÇ·ûÄ:
- ·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂? ‚Üí ·ûï·üí·ûâ·ûæ·ûö·ûº·ûî·û¢·üÅ·ûÄ·üí·ûö·ûÑ·üã·ûò·ûÄ @Chendasum
- ·ûÖ·ûÑ·üã·ûî·û∂·ûì·ûá·üÜ·ûì·ûΩ·ûô·ûî·ûì·üí·ûê·üÇ·ûò? ‚Üí ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ü¢·ü§/·üß
- ·ûî·û∂·ûè·üã·ûÄ·û∂·ûö·ûè·ûó·üí·ûá·û∂·ûî·üã? ‚Üí ·ûÇ·üÅ·û†·ûë·üÜ·ûñ·üê·ûö 7daymoneyflow.com
- Bot ·ûò·û∑·ûì·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö? ‚Üí /start ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè

üí° ·ûá·üÜ·û†·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã:
1. ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûè·ûò·üí·ûõ·üÉ ‚Üí /pricing
2. ·ûï·üí·ûë·üÅ·ûö·ûõ·ûª·ûô ‚Üí /payment
3. ·ûê·ûè·ûö·ûº·ûî·ûî·ûâ·üí·ûá·û∂·ûÄ·üã ‚Üí ·ûë·üÖ @Chendasum
4. ·ûö·ûÑ·üã·ûÖ·û∂·üÜ·ûÄ·û∂·ûö·ûî·ûâ·üí·ûá·û∂·ûÄ·üã ‚Üí ·ü°-·ü¢ ·ûò·üâ·üÑ·ûÑ
5. ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò Day 1 ‚Üí /day1

üéØ ·ûú·û∑·ûí·û∏·û¢·ûì·ûª·ûú·ûè·üí·ûè:
- ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÄ·üÇ·ûî·üí·ûö·üÇ·ûë·ûò·üí·ûõ·û∂·ûî·üã·ûÄ·û∂·ûö·ûÖ·üÜ·ûé·û∂·ûô
- ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô·ûî·û∂·ûì·ûõ·üí·û¢·ûá·û∂·ûÑ·ûò·ûª·ûì
- ·ûò·û∂·ûì·ûï·üÇ·ûì·ûÄ·û∂·ûö·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª·ûÖ·üí·ûî·û∂·ûü·üã·ûõ·û∂·ûü·üã
- ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûú·û∑·ûí·û∏·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ

üî• Ready to start?
üëâ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûè·ûò·üí·ûõ·üÉ
üëâ /payment ·ûä·ûæ·ûò·üí·ûî·û∏·ûë·ûº·ûë·û∂·ûè·üã
üëâ /start ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò

üí¨ ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûá·üÜ·ûì·ûΩ·ûô? ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ü¢·ü§/·üß!`;
    } else {
      faqMessage = `‚ùì ·ûü·üÜ·ûé·ûΩ·ûö·ûâ·ûπ·ûÄ·ûâ·û∂·ûî·üã (FAQ) - Complete Member Guide

üí∞ ·û¢·üÜ·ûñ·û∏·ûè·ûò·üí·ûõ·üÉ (·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã·ûö·ûΩ·ûÖ ‚úÖ):
- ·ûè·ûò·üí·ûõ·üÉ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ ‚Üí ${user.tier === "vip" ? "$197 (VIP)" : user.tier === "premium" ? "$97 (Premium)" : "$47 (Essential)"}
- ·ûë·ûº·ûë·û∂·ûè·üã·ûñ·üÅ·ûõ ‚Üí ${user.paymentDate ? new Date(user.paymentDate).toDateString() : "·ûò·û∑·ûì·ûë·û∂·ûì·üã·ûî·ûâ·üí·ûá·û∂·ûÄ·üã"}
- Upgrade ·ûë·üÖ·ûÄ·ûò·üí·ûö·û∑·ûè·ûÅ·üí·ûñ·ûü·üã? ‚Üí /pricing

‚è∞ ·û¢·üÜ·ûñ·û∏·ûñ·üÅ·ûõ·ûú·üÅ·ûõ·û∂:
- ·ûÖ·üÜ·ûé·û∂·ûô·ûñ·üÅ·ûõ·ûî·üâ·ûª·ûì·üí·ûò·û∂·ûì·ûì·û∂·ûë·û∏? ‚Üí ·ü°·ü•-·ü¢·ü† ·ûì·û∂·ûë·û∏·ûÄ·üí·ûì·ûª·ûÑ·ûò·ûΩ·ûô·ûê·üí·ûÑ·üÉ
- ·û¢·û∂·ûÖ·ûí·üí·ûú·ûæ·ûõ·ûø·ûì·ûá·û∂·ûÑ·ûì·üÅ·üá·ûî·û∂·ûì·ûë·üÅ? ‚Üí ·ûî·û∂·ûì ·ûè·üÇ·ûé·üÇ·ûì·û∂·üÜ ·ü° ·ûê·üí·ûÑ·üÉ/·ü° ·ûò·üÅ·ûö·üÄ·ûì
- ·ûí·üí·ûú·ûæ·ûö·ûΩ·ûÖ·û†·ûæ·ûô ·ûë·ûæ·ûî·ûí·üí·ûú·ûæ·ûî·ûì·üí·ûè·ûî·û∂·ûì·ûë·üÅ? ‚Üí ·ûî·û∂·ûì ·ûí·üí·ûú·ûæ·ûè·û∂·ûò·ûõ·üí·ûî·ûø·ûì·ûÅ·üí·ûõ·ûΩ·ûì·ûØ·ûÑ
- ·ûó·üí·ûõ·üÅ·ûÖ·ûí·üí·ûú·ûæ Day ·ûò·üí·ûü·û∑·ûõ·ûò·û∑·ûâ? ‚Üí ·ûÇ·üí·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂! ·ûí·üí·ûú·ûæ·ûî·ûì·üí·ûè·ûñ·û∏·ûê·üí·ûÑ·üÉ·ûî·û∂·ûè·üã·ûî·ûÑ·üã

üéØ ·û¢·üÜ·ûñ·û∏·ûò·û∂·ûè·û∑·ûÄ·û∂:
- ·ûò·üÅ·ûö·üÄ·ûì·ûò·û∂·ûì·û¢·üí·ûú·û∏·ûÅ·üí·ûõ·üá? ‚Üí ·üß ·ûê·üí·ûÑ·üÉ Money Management ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ
- ·ûó·û∂·ûü·û∂·û¢·üí·ûú·û∏? ‚Üí ·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö ·ü°·ü†·ü†% (·ûñ·û∂·ûÄ·üí·ûô·ûñ·üÅ·ûÖ·ûì·üç·û¢·üÜ·ûñ·û∏·ûî·üí·ûö·û∂·ûÄ·üã)
- ·ûë·ûë·ûΩ·ûõ·ûî·û∂·ûì·û¢·üí·ûú·û∏·ûÅ·üí·ûõ·üá? ‚Üí ·ûÖ·üÜ·ûé·üÅ·üá·ûä·ûπ·ûÑ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô ·ûì·û∑·ûÑ·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ

üì± ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûò·ûº·ûõ·ûä·üí·ûã·û∂·ûì:
- üè† ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò ‚Üí /start
- üí∞ ·ûò·ûæ·ûõ·ûè·ûò·üí·ûõ·üÉ ‚Üí /pricing
- üí≥ ·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã ‚Üí /payment
- üõ† ·ûá·üÜ·ûì·ûΩ·ûô ‚Üí /help
- üìä ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ ‚Üí /status
- ‚ùì ·ûü·üÜ·ûé·ûΩ·ûö·ûì·üÅ·üá ‚Üí /faq
- üë§ ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûÅ·üí·ûâ·ûª·üÜ ‚Üí /whoami

üöÄ ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ (·üß ·ûê·üí·ûÑ·üÉ·ûä·üÜ·ûî·ûº·ûÑ):
- üìö ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü° ‚Üí /day1 - ·ûü·üí·ûÇ·û∂·ûõ·üã Money Flow
- üîç ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢ ‚Üí /day2 - ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ Money Leaks
- üìä ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü£ ‚Üí /day3 - ·ûú·û∂·ûô·ûè·ûò·üí·ûõ·üÉ·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí
- üó∫Ô∏è ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü§ ‚Üí /day4 - ·ûî·ûÑ·üí·ûÄ·ûæ·ûè·ûï·üÇ·ûì·ûë·û∏·ûõ·ûª·ûô
- üìà ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü• ‚Üí /day5 - Survival vs Growth (·ûÄ·û∂·ûö·ûö·ûü·üã·ûö·û∂·ûì ·ûì·û∑·ûÑ·ûÄ·û∂·ûö·ûõ·ûº·ûè·ûõ·û∂·ûü·üã)
- üìã ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¶ ‚Üí /day6 - ·ûö·üÄ·ûî·ûÖ·üÜ·ûï·üÇ·ûì·ûÄ·û∂·ûö
- ‚ú® ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·üß ‚Üí /day7 - Integration (·ûÄ·û∂·ûö·ûî·ûâ·üí·ûÖ·ûº·ûõ·ûÇ·üí·ûì·û∂)

üìà ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûî·ûì·üí·ûê·üÇ·ûò (·ü£·ü† ·ûê·üí·ûÑ·üÉ):
- /extended8 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü®: ·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ·ûÖ·üÜ·ûé·ûº·ûõ·ûÄ·ûò·üí·ûö·û∑·ûè·ûÅ·üí·ûñ·ûü·üã
- /extended9 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü©: ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûÖ·üÜ·ûé·û∂·ûô·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò
- /extended10 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü†: ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûè·ûë·ûò·üí·ûõ·û∂·ûî·üã·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª
- /extended11 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü°: ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûä·üÜ·ûî·ûº·ûÑ·ûü·û∂·ûò·ûâ·üí·ûâ
- /extended12 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü¢: ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûè·ûò·ûº·ûõ·ûì·û∑·ûí·û∑·ûü·ûò·üí·ûö·û∂·ûî·üã·ûî·ûì·üí·ûë·û∂·ûì·üã
- /extended13 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü£: ·ûÄ·û∂·ûö·ûú·û∂·ûô·ûè·ûò·üí·ûõ·üÉ·û†·û∂·ûì·û∑·ûó·üê·ûô·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª
- /extended14 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü§: ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûî·üí·ûö·ûü·û∑·ûë·üí·ûí·ûó·û∂·ûñ·ûî·üÜ·ûé·ûª·ûõ
- /extended15 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü•: ·ûÄ·û∂·ûö·ûö·üÄ·ûî·ûÖ·üÜ·ûï·üÇ·ûì·ûÄ·û∂·ûö·ûÖ·ûº·ûõ·ûì·û∑·ûú·ûè·üí·ûè·ûì·üç
- /extended16 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü¶: ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûë·üí·ûö·ûñ·üí·ûô·ûü·ûò·üí·ûî·ûè·üí·ûè·û∑
- /extended17 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·üß: ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·û¢·ûÖ·ûõ·ûì·ûë·üí·ûö·ûñ·üí·ûô
- /extended18 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü®: ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûõ·ûæ·ûó·û∂·ûÇ·û†·üä·ûª·ûì
- /extended19 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü°·ü©: ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûõ·ûæ·ûò·ûº·ûõ·ûî·ûè·üí·ûö·ûî·üÜ·ûé·ûª·ûõ
- /extended20 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü†: ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûõ·ûæ·ûò·ûº·ûõ·ûì·û∑·ûí·û∑·ûö·ûΩ·ûò
- /extended21 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü°: ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûõ·ûæ·ûò·û∂·ûü ·ûì·û∑·ûÑ·ûî·üí·ûö·û∂·ûÄ·üã
- /extended22 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü¢: ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûõ·ûæ·ûö·ûº·ûî·û∑·ûô·ûî·üê·ûé·üí·ûé·ûÇ·üí·ûö·û∏·ûî·ûè·ûº
- /extended23 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü£: ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûõ·ûæ·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò·ûÅ·üí·ûì·û∂·ûè·ûè·ûº·ûÖ
- /extended24 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü§: ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·û†·û∂·ûì·û∑·ûó·üê·ûô·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò
- /extended25 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü•: ·ûÄ·û∂·ûö·ûö·üÄ·ûî·ûÖ·üÜ·ûï·üÇ·ûì·ûÄ·û∂·ûö·ûñ·ûÑ·üí·ûö·û∏·ûÄ·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò
- /extended26 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü¶: ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûè·ûî·üí·ûö·ûó·ûñ·ûÖ·üÜ·ûé·ûº·ûõ·û¢·ûÄ·ûò·üí·ûò
- /extended27 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·üß: ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûî·üí·ûö·ûü·û∑·ûë·üí·ûí·ûó·û∂·ûñ·ûñ·ûì·üí·ûí
- /extended28 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü®: ·ûÄ·û∂·ûö·ûö·üÄ·ûî·ûÖ·üÜ·ûï·üÇ·ûì·ûÄ·û∂·ûö·û¢·ûÖ·ûõ·ûì·ûë·üí·ûö·ûñ·üí·ûô
- /extended29 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü¢·ü©: ·ûÄ·û∂·ûö·ûÄ·û∂·ûö·ûñ·û∂·ûö·ûë·üí·ûö·ûñ·üí·ûô·ûü·ûò·üí·ûî·ûè·üí·ûè·û∑
- /extended30 - ·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü£·ü†: ·ûÄ·û∂·ûö·ûñ·û∑·ûì·û∑·ûè·üí·ûô·û°·ûæ·ûÑ·ûú·û∑·ûâ ·ûì·û∑·ûÑ·ûÇ·üÑ·ûõ·ûä·üÖ·û¢·ûì·û∂·ûÇ·ûè

üèÜ ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûÄ·û∂·ûö·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì:
- üéñÔ∏è ·ûü·ûò·û∑·ûë·üí·ûí·ûï·ûõ ‚Üí /badges
- üìà ·ûÄ·û∂·ûö·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì ‚Üí /progress
- üèÅ ·ûü·ûò·û∑·ûë·üí·ûí·ûï·ûõ·ûü·üÜ·ûÅ·û∂·ûì·üã ‚Üí /milestones
- üî• ·ûÄ·û∂·ûö·ûí·üí·ûú·ûæ·ûî·ûì·üí·ûè·ûî·ûì·üí·ûë·û∂·ûî·üã ‚Üí /streak

üìö ·ûü·ûò·üí·ûö·ûÑ·üã·ûî·üí·ûö·û∂·ûá·üí·ûâ·û∂·ûÅ·üí·ûò·üÇ·ûö:
- üí¨ ·ûü·ûò·üí·ûö·ûÑ·üã·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ ‚Üí /quote
- üé≠ ·ûî·üí·ûö·û∂·ûá·üí·ûâ·û∂·ûÖ·üÉ·ûä·ûì·üí·ûô ‚Üí /wisdom
- üìñ ·ûî·üí·ûö·ûó·üÅ·ûë·ûü·ûò·üí·ûö·ûÑ·üã ‚Üí /quote_categories
- üèõÔ∏è ·ûî·üí·ûö·û∂·ûá·üí·ûâ·û∂·ûî·üí·ûö·ûñ·üÉ·ûé·û∏ ‚Üí /quote_traditional
- üí∞ ·ûÖ·û∑·ûè·üí·ûè·ûÇ·üÜ·ûì·û∑·ûè·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª ‚Üí /quote_financial
- üí™ ·ûÄ·û∂·ûö·ûõ·ûæ·ûÄ·ûë·ûπ·ûÄ·ûÖ·û∑·ûè·üí·ûè ‚Üí /quote_motivation
- üèÜ ·ûá·üÑ·ûÇ·ûá·üê·ûô ‚Üí /quote_success

${
  isPremiumOrVip
    ? `
üåü Premium Features (·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ·ûî·û∂·ûì):
- üìû ·ûë·û∂·ûÄ·üã·ûë·ûÑ·ûï·üí·ûë·û∂·ûõ·üã ‚Üí /admin_contact
- üÜò ·ûá·üÜ·ûì·ûΩ·ûô·û¢·û∂·ûë·û∑·ûó·û∂·ûñ ‚Üí /priority_support
- üìä ·ûú·û∑·ûó·û∂·ûÇ·ûÄ·ûò·üí·ûö·û∑·ûè·ûÅ·üí·ûñ·ûü·üã ‚Üí /advanced_analytics
- üëë ·ûñ·üê·ûè·üå·ûò·û∂·ûì VIP ‚Üí /vip_program_info
- üéØ VIP ·ûÖ·ûº·ûõ·ûö·ûΩ·ûò ‚Üí ·ûü·ûö·ûü·üÅ·ûö "VIP APPLY"
- üèõÔ∏è Capital Strategy ‚Üí ·ûü·ûö·ûü·üÅ·ûö "CAPITAL CLARITY"`
    : ""
}

${
  isVip
    ? `
üëë VIP Exclusive Features (·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ·ûî·û∂·ûì):
- üóìÔ∏è ·ûò·ûæ·ûõ·ûò·üâ·üÑ·ûÑ·ûë·üÜ·ûì·üÅ·ûö ‚Üí /book_session
- üíº Capital Assessment ‚Üí /book_capital_assessment
- üîç Business Review ‚Üí /book_business_review
- üìà Investment Evaluation ‚Üí /book_investment_evaluation
- üéØ Custom Session ‚Üí /book_custom_session
- üìã ·ûö·ûî·û∂·ûô·ûÄ·û∂·ûö·ûé·üç VIP ‚Üí /vip_reports
- üìä ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì·ûñ·ûÑ·üí·ûö·û∏·ûÄ ‚Üí /extended_tracking`
    : ""
}

üéØ Assessment ·û•·ûè·ûÇ·û∑·ûè·ûê·üí·ûõ·üÉ:
‚Ä¢ /financial_quiz - ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûü·ûª·ûÅ·ûó·û∂·ûñ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª (·ü¢ ·ûì·û∂·ûë·û∏)
‚Ä¢ /health_check - ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûü·ûª·ûÅ·ûó·û∂·ûñ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª (·ü¢ ·ûì·û∂·ûë·û∏)

üí∞ ·ûß·ûî·ûÄ·ûö·ûé·üç·ûÇ·ûé·ûì·û∂·û•·ûè·ûÇ·û∑·ûè·ûê·üí·ûõ·üÉ:
‚Ä¢ /calculate_daily - ·ûÇ·ûé·ûì·û∂·ûÖ·üÜ·ûé·û∂·ûô·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ
‚Ä¢ /find_leaks - ·ûö·ûÄ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ·ûõ·ûª·ûô·ûõ·üÅ·ûÖ·ûí·üí·ûõ·û∂·ûô
‚Ä¢ /savings_potential - ·ûÇ·ûé·ûì·û∂·ûü·ûÄ·üí·ûè·û∂·ûì·ûª·ûñ·ûõ·ûü·ûì·üí·ûü·üÜ
‚Ä¢ /income_analysis - ·ûú·û∑·ûó·û∂·ûÇ·ûÖ·üÜ·ûé·ûº·ûõ

‚ùì ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûñ·üÅ·ûõ·ûÖ·ûò·üí·ûõ·üÇ·ûÄ:
- ·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂? ‚Üí ·ûï·üí·ûâ·ûæ·ûö·ûº·ûî·û¢·üÅ·ûÄ·üí·ûö·ûÑ·üã·ûò·ûÄ @Chendasum
- ·ûÖ·ûÑ·üã·ûî·û∂·ûì·ûá·üÜ·ûì·ûΩ·ûô·ûî·ûì·üí·ûê·üÇ·ûò? ‚Üí ·ûë·û∂·ûÄ·üã·ûë·û∂·ûÄ·üã @Chendasum ·ü¢·ü§/·üß
- ·ûî·û∂·ûè·üã·ûÄ·û∂·ûö·ûè·ûó·üí·ûá·û∂·ûî·üã? ‚Üí ·ûÇ·üÅ·û†·ûë·üÜ·ûñ·üê·ûö 7daymoneyflow.com
- Bot ·ûò·û∑·ûì·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö? ‚Üí /start ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè
- ·ûÖ·ûÑ·üã Upgrade? ‚Üí /pricing

üí° Tips ·ûñ·û∑·ûü·üÅ·ûü:
- ·ûî·üí·ûö·ûæ /help ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã
- ·ûî·üí·ûö·ûæ /status ·ûä·ûæ·ûò·üí·ûî·û∏·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûÄ·û∂·ûö·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì
- ·ûî·üí·ûö·ûæ /whoami ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûÇ·ûé·ûì·û∏
- ·ûü·ûö·ûü·üÅ·ûö·ûü·üÜ·ûé·ûΩ·ûö·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã - Bot ·ûì·ûπ·ûÑ·ûá·ûΩ·ûô!

üéØ ·ûú·û∑·ûí·û∏·û¢·ûì·ûª·ûú·ûè·üí·ûè:
- ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÄ·üÇ·ûî·üí·ûö·üÇ·ûë·ûò·üí·ûõ·û∂·ûî·üã·ûÄ·û∂·ûö·ûÖ·üÜ·ûé·û∂·ûô
- ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô·ûî·û∂·ûì·ûõ·üí·û¢·ûá·û∂·ûÑ·ûò·ûª·ûì
- ·ûò·û∂·ûì·ûï·üÇ·ûì·ûÄ·û∂·ûö·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª·ûÖ·üí·ûî·û∂·ûü·üã·ûõ·û∂·ûü·üã
- ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûú·û∑·ûí·û∏·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ

üåü ·ûÄ·û∂·ûö·ûÇ·û∂·üÜ·ûë·üí·ûö·ûñ·û∑·ûü·üÅ·ûü:
- üì± Telegram Bot Support: ·ü¢·ü§/·üß
- üë®‚Äçüíº Personal Support: @Chendasum
- üåê Website: 7daymoneyflow.com
- ‚è∞ Response Time: ·ü°-·ü¢ ·ûò·üâ·üÑ·ûÑ

üí¨ ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûá·üÜ·ûì·ûΩ·ûô·ûî·ûì·üí·ûê·üÇ·ûò? ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum

üî• Ready for your next lesson?
üëâ Check /status to see your progress!`;
    }

    await sendLongMessage(
      bot,
      msg.chat.id,
      faqMessage,
      {
        parse_mode: "Markdown",
      },
      MESSAGE_CHUNK_SIZE,
    );
  } catch (error) {
    console.error("Error in FAQ command:", error);
    const basicHelp = `‚ùì ·ûá·üÜ·ûì·ûΩ·ûô (Help):

üì± ·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûü·üÜ·ûÅ·û∂·ûì·üã:
- /start - ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò
- /pricing - ·ûè·ûò·üí·ûõ·üÉ
- /help - ·ûá·üÜ·ûì·ûΩ·ûô
- /faq - ·ûü·üÜ·ûé·ûΩ·ûö·ûâ·ûπ·ûÄ·ûâ·û∂·ûî·üã

üí¨ ·ûá·üÜ·ûì·ûΩ·ûô: ·ûü·ûö·ûü·üÅ·ûö·ûò·ûÄ·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã!`;

    await bot.sendMessage(msg.chat.id, basicHelp);
  }
});

// Status Command: Displays user's account and program progress status
bot.onText(/\/status|·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const userId = msg.from.id;
    const user = await User.findOne({ telegram_id: userId });

    if (!user) {
      await bot.sendMessage(
        msg.chat.id,
        "·û¢·üí·ûì·ûÄ·ûò·û∑·ûì·ûë·û∂·ûì·üã·ûÖ·ûª·üá·ûà·üí·ûò·üÑ·üá·üî ·ûî·üí·ûö·ûæ /start ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·üî",
      );
      return;
    }

    const progress = await Progress.findOne({ user_id: userId });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';

    let statusMessage = `üìä ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·ûÇ·ûé·ûì·û∏·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ:

üë§ ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã: ${user.first_name || "·ûò·û∑·ûì·ûü·üí·ûÇ·û∂·ûõ·üã"}
üìÖ ·ûÖ·ûº·ûõ·ûö·ûΩ·ûò: ${user.joined_at ? new Date(user.joined_at).toDateString() : "·ûò·û∑·ûì·ûü·üí·ûÇ·û∂·ûõ·üã"}
üí∞ ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ: ${isPaid ? "‚úÖ ·ûî·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã" : "‚ùå ·ûò·û∑·ûì·ûë·û∂·ûì·üã·ûë·ûº·ûë·û∂·ûè·üã"}`;

    if (isPaid) {
      statusMessage += `
üìà ·ûê·üí·ûÑ·üÉ·ûî·ûÖ·üí·ûÖ·ûª·ûî·üí·ûî·ûì·üí·ûì: Day ${progress?.currentDay || 0}
üéØ ·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûî·û∂·ûì·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ!`;

      if (user.payment_date) {
        statusMessage += `
üí∞ ·ûë·ûº·ûë·û∂·ûè·üã·ûñ·üÅ·ûõ: ${new Date(user.payment_date).toDateString()}`;
      }

      if (progress) {
        const completedDays = [];
        for (let i = 1; i <= 7; i++) {
          if (progress[`day${i}Completed`]) {
            completedDays.push(`Day ${i}`);
          }
        }
        if (completedDays.length > 0) {
          statusMessage += `
‚úÖ ·ûê·üí·ûÑ·üÉ·ûî·ûâ·üí·ûÖ·ûî·üã: ${completedDays.join(", ")}`;
        }
      }
    } else {
      statusMessage += `
üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûî·üí·ûö·ûæ Day 1-7
üí° ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûè·ûò·üí·ûõ·üÉ`;
    }

    await sendLongMessage(
      bot,
      msg.chat.id,
      statusMessage,
      {},
      MESSAGE_CHUNK_SIZE,
    );
  } catch (error) {
    console.error("Error in status command:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûë·û∂·ûâ·ûô·ûÄ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·üî");
  }
});

// Whoami Command: Provides user's Telegram and bot-specific information
bot.onText(/\/whoami/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const adminId = parseInt(process.env.ADMIN_CHAT_ID);
    const secondaryAdminId = 484389665;
    const isAdmin = msg.from.id === adminId || msg.from.id === secondaryAdminId;
    const isPaid = user?.is_paid === true || user?.is_paid === 't';

    let response = `üîç ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ:\n\n`;
    response += `‚Ä¢ Chat ID: ${msg.chat.id}\n`;
    response += `‚Ä¢ User ID: ${msg.from.id}\n`;
    response += `‚Ä¢ ·ûà·üí·ûò·üÑ·üá: ${msg.from.first_name || "N/A"}\n`;
    response += `‚Ä¢ ·ûè·üí·ûö·ûÄ·ûº·ûõ: ${msg.from.last_name || "N/A"}\n`;
    response += `‚Ä¢ ·ûà·üí·ûò·üÑ·üá·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ: ${msg.from.username ? "@" + msg.from.username : "N/A"}\n`;
    response += `‚Ä¢ ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ Admin: ${isAdmin ? "‚úÖ ADMIN" : "‚ùå ·ûò·û∑·ûì·ûò·üÇ·ûì ADMIN"}\n`;
    response += `‚Ä¢ ID Admin ·ûä·üÇ·ûõ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö: ${adminId}\n`;
    response += `‚Ä¢ ‚Ä¢ ID ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ·ûè·üí·ûö·ûº·ûú·ûÇ·üí·ûì·û∂: ${msg.from.id === adminId ? "‚úÖ ·ûî·û∂·ûë/·ûÖ·û∂·ûü" : "‚ùå ·ûë·üÅ"}\n`;

    if (user) {
      response += `‚Ä¢ ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·ûò·ûº·ûõ·ûä·üí·ûã·û∂·ûì·ûë·û∑·ûì·üí·ûì·ûì·üê·ûô: ‚úÖ ·ûî·û∂·ûì·ûÖ·ûª·üá·ûà·üí·ûò·üÑ·üá\n`;
      response += `‚Ä¢ ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·ûë·ûº·ûë·û∂·ûè·üã: ${isPaid ? "‚úÖ ·ûî·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã" : "‚ùå ·ûò·û∑·ûì·ûë·û∂·ûì·üã·ûë·ûº·ûë·û∂·ûè·üã"}\n`;
      response += `‚Ä¢ ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ VIP: ${user.is_vip ? "üåü VIP" : "‚ùå ·ûò·û∑·ûì·ûò·üÇ·ûì VIP"}\n`;
      response += `‚Ä¢ ·ûî·û∂·ûì·ûÖ·ûº·ûõ·ûö·ûΩ·ûò: ${user.joined_at ? new Date(user.joined_at).toDateString() : "·ûò·û∑·ûì·ûü·üí·ûÇ·û∂·ûõ·üã"}\n`;
      response += `‚Ä¢ ·ûü·ûÄ·ûò·üí·ûò·ûó·û∂·ûñ·ûÖ·ûª·ûÑ·ûÄ·üí·ûö·üÑ·ûô: ${user.last_active ? new Date(user.last_active).toDateString() : "·ûò·û∑·ûì·ûü·üí·ûÇ·û∂·ûõ·üã"}\n`;
      if (isPaid && user.payment_date) {
        response += `‚Ä¢ ·ûê·üí·ûÑ·üÉ·ûë·ûº·ûë·û∂·ûè·üã: ${new Date(user.payment_date).toDateString()}\n`;
      }
    } else {
      response += `‚Ä¢ ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·ûò·ûº·ûõ·ûä·üí·ûã·û∂·ûì·ûë·û∑·ûì·üí·ûì·ûì·üê·ûô: ‚ùå ·ûò·û∑·ûì·ûë·û∂·ûì·üã·ûî·û∂·ûì·ûÖ·ûª·üá·ûà·üí·ûò·üÑ·üá\n`;
    }

    await sendLongMessage(bot, msg.chat.id, response, {}, MESSAGE_CHUNK_SIZE);
  } catch (error) {
    console.error("Error in whoami command:", error);
    await bot.sendMessage(
      msg.chat.id,
      `‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûë·û∂·ûâ·ûô·ûÄ·ûñ·üê·ûè·üå·ûò·û∂·ûì·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã: ${error.message}`,
    );
  }
});

// Tier-based feature commands: These commands are typically restricted by user's tier (Premium/VIP)
// Premium tier commands
bot.onText(/\/admin_contact/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await tierFeatures.adminContact(msg, bot);
  } catch (e) {
    console.error("Error /admin_contact:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/priority_support/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await tierFeatures.prioritySupport(msg, bot);
  } catch (e) {
    console.error("Error /priority_support:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/advanced_analytics/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await tierFeatures.advancedAnalytics(msg, bot);
  } catch (e) {
    console.error("Error /advanced_analytics:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// VIP tier commands
bot.onText(/\/book_session/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await bookingCommands.showBookingSlots(msg, bot);
  } catch (e) {
    console.error("Error /book_session:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/book_capital_assessment/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await bookingCommands.bookCapitalClarity(msg, bot);
  } catch (e) {
    console.error("Error /book_capital_assessment:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/book_business_review/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await bookingCommands.bookBusinessReview(msg, bot);
  } catch (e) {
    console.error("Error /book_business_review:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/book_investment_evaluation/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await bookingCommands.bookInvestmentEvaluation(msg, bot);
  } catch (e) {
    console.error("Error /book_investment_evaluation:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/book_custom_session/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await bookingCommands.bookCustomSession(msg, bot);
  } catch (e) {
    console.error("Error /book_custom_session:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/vip_reports/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await tierFeatures.personalReports(msg, bot);
  } catch (e) {
    console.error("Error /vip_reports:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});
bot.onText(/\/extended_tracking/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    await tierFeatures.extendedTracking(msg, bot);
  } catch (e) {
    console.error("Error /extended_tracking:", e);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî");
  }
});

// Consolidated message handler with smart question detection and routing
bot.on("message", async (msg) => {
  if (isDuplicateMessage(msg)) return;

  if (!msg.text || msg.text.startsWith("/")) {
    return;
  }

  const text = msg.text.toLowerCase();
  const userId = msg.from.id;

  try {
    if (typeof User.updateLastActive === "function") {
      await User.updateLastActive(userId);
    } else {
      // FIXED: Use correct PostgreSQL field name
      await User.findOneAndUpdate(
        { telegram_id: userId },
        { last_active: new Date() },
        { new: true },
      );
    }
  } catch (error) {
    console.error("Error updating lastActive timestamp:", error);
  }

  if (await financialQuiz.processQuizResponse(msg, bot)) {
    return;
  }

  try {
    if (
      typeof freeTools.processToolResponse === "function" &&
      (await freeTools.processToolResponse(
        msg,
        bot,
        await User.findOne({ telegram_id: userId }),
      ))
    ) {
      return;
    }
  } catch (error) {
    console.error("Error processing free tools response:", error);
  }

  // FIXED: Don't return early for these text messages - process them properly
  if (
    text.includes("ready for day") ||
    (text.includes("day") && text.includes("complete")) ||
    text === "vip apply" ||
    text.includes("program complete") ||
    text.includes("capital clarity")
  ) {
    console.log("üéØüéØüéØ TEXT HANDLER TRIGGERED! üéØüéØüéØ");
    console.log("User ID:", userId);
    console.log("Original text:", msg.text);
    console.log("Lowercase text:", text);
    console.log("Calling handleTextResponse...");

    // Call the proper text response handler instead of returning
    await handleTextResponse(msg);
    return;
  }

  const questionWords = [
    "help",
    "problem",
    "issue",
    "question",
    "how",
    "why",
    "what",
    "where",
    "when",
    "error",
    "fail",
    "broken",
    "stuck",
    "cannot",
    "can't",
    "unable",
    "wrong",
    "fix",
    "repair",
    "troubleshoot",
    "·ûî·ûâ·üí·û†·û∂",
    "·ûá·üÜ·ûì·ûΩ·ûô",
    "·ûü·ûΩ·ûö",
    "·ûô·üâ·û∂·ûÑ·ûò·üâ·üÅ·ûÖ",
    "·ûí·üí·ûú·ûæ·ûò·üâ·üÅ·ûÖ",
    "·û†·üÅ·ûè·ûª·û¢·üí·ûú·û∏",
    "·ûÄ·üÜ·û†·ûª·ûü",
    "·ûÅ·ûº·ûÖ",
    "·ûò·û∑·ûì·û¢·û∂·ûÖ",
    "·ûá·ûΩ·ûü·ûá·ûª·ûõ",
    "·ûä·üÑ·üá·ûü·üí·ûö·û∂·ûô",
  ];

  const hasQuestionWord = questionWords.some((word) => text.includes(word));

  const endsWithQuestionMark = msg.text.trim().endsWith("?");

  if (hasQuestionWord || endsWithQuestionMark) {
    const investmentWords = [
      "·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ",
      "·û†·üä·ûª·ûì",
      "·ûî·üí·ûö·û∂·ûÄ·üã·ûî·ûâ·üí·ûâ·ûæ",
      "·ûó·û∂·ûÇ·û†·üä·ûª·ûì",
      "·ûò·ûº·ûõ·ûî·üê·ûè·üí·ûö",
      "·ûÇ·ûò·üí·ûö·üÑ·ûÑ",
      "·ûÄ·û∂·ûö·ûõ·û∑·ûè·ûí·üí·ûú·ûæ",
      "·ûñ·û∂·ûé·û∑·ûá·üí·ûá·ûÄ·ûò·üí·ûò",
      "investment",
      "company",
      "deposit",
      "stock",
      "fund",
      "business",
      "trading",
      "portfolio",
    ];
    const isInvestmentQuestion = investmentWords.some((word) =>
      text.includes(word),
    );

    if (isInvestmentQuestion) {
      const investmentResponse = `üíº ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ ·ûì·û∑·ûÑ·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò

üéØ ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûö·ûî·ûü·üã·ûô·ûæ·ûÑ:
·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ 7-Day Money Flow Reset‚Ñ¢ ·ûï·üí·ûè·üÑ·ûè·ûõ·ûæ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûî·üí·ûö·û∂·ûÄ·üã·ûÄ·ûò·üí·ûö·û∂·ûõ·üã ·ûò·û∑·ûì·ûò·üÇ·ûì·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã·ûë·üÅ·üî

üí° ·ûü·üí·ûö·û∂·ûî·üã·ûè·üÇ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏:
- ·û¢·üí·ûì·ûÄ·ûì·ûπ·ûÑ·ûò·û∂·ûì·ûÇ·üí·ûö·ûπ·üá·ûõ·üí·û¢·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûî·üí·ûö·û∂·ûÄ·üã
- ·ûô·ûõ·üã·ûñ·û∏·ûõ·üÜ·û†·ûº·ûö·ûî·üí·ûö·û∂·ûÄ·üã ·ûì·û∑·ûÑ·ûÄ·û∂·ûö·ûü·ûì·üí·ûü·üÜ
- ·ûè·üí·ûö·üÄ·ûò·ûÅ·üí·ûõ·ûΩ·ûì·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûì·û∂·ûñ·üÅ·ûõ·ûÅ·û∂·ûÑ·ûò·ûª·ûÅ

üî• ·ûî·ûæ·ûÖ·ûÑ·üã·ûä·ûπ·ûÑ·ûñ·û∏·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ:
- ·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ ·üß ·ûê·üí·ûÑ·üÉ·ûò·ûª·ûì
- ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûî·ûì·üí·ûè
- ·û¨ ·ûñ·û∑·ûì·û∑·ûè·üí·ûô VIP Program ‚Üí /vip_program_info

‚úÖ ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûä·üÜ·ûî·ûº·ûÑ ‚Üí /start`;

      await sendLongMessage(
        bot,
        msg.chat.id,
        investmentResponse,
        {},
        MESSAGE_CHUNK_SIZE,
      );
      return;
    }

    let helpResponse = `ü§î ·ûÅ·üí·ûâ·ûª·üÜ·ûÉ·ûæ·ûâ·û¢·üí·ûì·ûÄ·ûò·û∂·ûì·ûü·üÜ·ûé·ûΩ·ûö!

üî• ·ûá·üÜ·ûì·ûΩ·ûô·ûö·û†·üê·ûü:
- ·ûî·ûâ·üí·û†·û∂·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã ‚Üí ·ûñ·û∑·ûì·û∑·ûè·üí·ûô /faq ·û¨ ·ûï·üí·ûâ·ûæ·ûö·ûº·ûî·ûî·ûâ·üí·ûá·û∂·ûÄ·üã·ûÄ·û∂·ûö·ûë·ûº·ûë·û∂·ûè·üã
- ·ûî·ûâ·üí·û†·û∂·ûî·ûÖ·üí·ûÖ·üÅ·ûÄ·ûë·üÅ·ûü ‚Üí ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ /help ·ûò·ûª·ûì
- ·ûü·üÜ·ûé·ûΩ·ûö·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ ‚Üí ·ûë·û∂·ûÄ·üã·ûë·û∂·ûÄ·üã @Chendasum ·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã
- ·ûñ·üê·ûè·üå·ûò·û∂·ûì VIP ‚Üí ·ûî·üí·ûö·ûæ /vip_program_info

üì± ·û¨·ûÇ·üí·ûö·û∂·ûì·üã·ûè·üÇ·ûü·ûö·ûü·üÅ·ûö·ûü·üÜ·ûé·ûΩ·ûö·û¢·üí·ûì·ûÄ - ·ûÅ·üí·ûâ·ûª·üÜ·ûì·ûπ·ûÑ·ûá·ûΩ·ûô!

üí¨ ·ûá·üÜ·ûì·ûΩ·ûô ·ü¢·ü§/·üß ·ûá·û∂·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö ·ûì·û∑·ûÑ English!`;

    await sendLongMessage(
      bot,
      msg.chat.id,
      helpResponse,
      {},
      MESSAGE_CHUNK_SIZE,
    );
    return;
  }

  await handleTextResponse(msg);
});

bot.onText(/CAPITAL CLARITY|capital clarity/i, async (msg) => {
  if (isDuplicateMessage(msg)) return;
  try {
    const userId = msg.from.id;
    const firstName = msg.from.first_name || "·ûò·û∑·ûè·üí·ûè";

    const clarityResponse = `üèõÔ∏è ·ûú·ûÇ·üí·ûÇ Capital Clarity - ·ûô·ûª·ûë·üí·ûí·ûü·û∂·ûü·üí·ûè·üí·ûö·ûò·ûº·ûõ·ûí·ûì·ûØ·ûÄ·ûá·ûì

·ûá·üÜ·ûö·û∂·ûî·ûü·ûΩ·ûö ${firstName}!

üéØ ·ûè·ûæ·û¢·üí·ûú·û∏·ûá·û∂·ûú·ûÇ·üí·ûÇ Capital Clarity?

·ûá·û∂·ûú·ûÇ·üí·ûÇ·ûô·ûª·ûë·üí·ûí·ûü·û∂·ûü·üí·ûè·üí·ûö·ûØ·ûÄ·ûá·ûì·ûä·üÇ·ûõ·ûò·û∂·ûì·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí·ûö·üÄ·ûî·ûÖ·üÜ·û°·ûæ·ûÑ·ûä·ûæ·ûò·üí·ûî·û∏:
- ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûò·ûæ·ûõ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ·ûä·üÇ·ûõ·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí·ûò·ûº·ûõ·ûí·ûì·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·ûö·û∂·ûö·û∂·üÜ·ûÑ ·û¨·ûõ·üÅ·ûÖ·ûí·üí·ûõ·û∂·ûô
- ·ûñ·û∑·ûó·û∂·ûÄ·üí·ûü·û∂·û¢·üÜ·ûñ·û∏·ûö·ûî·üÄ·ûî·ûä·üÇ·ûõ·ûÄ·û∑·ûÖ·üí·ûÖ·ûñ·üí·ûö·ûò·ûñ·üí·ûö·üÄ·ûÑ ·ûì·û∑·ûÑ·ûë·üÜ·ûì·û∂·ûÄ·üã·ûë·üÜ·ûì·ûÑ·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·û∑·ûì·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö
- ·ûü·üí·ûú·üÇ·ûÑ·ûô·ûõ·üã·ûñ·û∏·ûÇ·ûò·üí·ûõ·û∂·ûè·ûë·üÜ·ûì·ûª·ûÄ·ûÖ·û∑·ûè·üí·ûè ·ûì·û∑·ûÑ·û†·û∂·ûì·û∑·ûó·üê·ûô·ûì·üÉ·ûÄ·û∂·ûö·ûä·û∂·ûÄ·üã·ûñ·ûÑ·üí·ûö·û∂·ûô
- ·ûî·ûÑ·üí·ûÄ·ûæ·ûè·ûï·üí·ûõ·ûº·ûú·û¢·ûó·û∑·ûú·ûå·üí·ûç·ûì·üç·ûü·ûÄ·üí·ûè·û∂·ûì·ûª·ûñ·ûõ·ûá·û∂·ûò·ûΩ·ûô·ûì·ûπ·ûÑ·ûú·û∑·ûí·û∏·ûü·û∂·ûü·üí·ûè·üí·ûö·ûò·û∂·ûì·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí

üí∞ ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ: $197 (·ûè·ûò·üí·ûõ·üÉ·ûí·ûò·üí·ûò·ûè·û∂: $497) - ·ûò·û∂·ûì·ûÄ·üÜ·ûé·ûè·üã ·ü• ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ/·ûÅ·üÇ

üîç ·ûÄ·üí·ûö·ûî·ûÅ·üê·ûé·üí·ûå·ûú·û∑·ûó·û∂·ûÇ·ûü·üí·ûì·ûº·ûõ:
·ü°. Opening Frame - ·ûÄ·üÜ·ûé·ûè·üã·ûë·üÜ·ûì·ûª·ûÄ·ûÖ·û∑·ûè·üí·ûè ·ûì·û∑·ûÑ·ûî·ûö·û∑·ûî·ûë·ûô·ûª·ûë·üí·ûí·ûü·û∂·ûü·üí·ûè·üí·ûö
·ü¢. Capital X-Ray - ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí·ûò·ûº·ûõ·ûì·û∑·ûí·û∑/·ûÄ·û∑·ûÖ·üí·ûÖ·ûñ·üí·ûö·ûò·ûñ·üí·ûö·üÄ·ûÑ ·ûì·û∑·ûÑ·ûõ·üÜ·û†·ûº·ûö
·ü£. Trust Mapping - ·ûÄ·üÜ·ûé·ûè·üã·ûÄ·û∂·ûö·ûî·üÇ·ûÄ·ûî·û∂·ûÄ·üã·ûë·üÜ·ûì·û∂·ûÄ·üã·ûë·üÜ·ûì·ûÑ
·ü§. System Readiness Score - ·ûú·û∂·ûô·ûè·ûò·üí·ûõ·üÉ·ûü·ûò·ûè·üí·ûê·ûó·û∂·ûñ·ûä·û∂·ûÄ·üã·ûñ·ûÑ·üí·ûö·û∂·ûô
·ü•. Clarity Discussion - ·ûï·üÇ·ûì·ûë·û∏·ûï·üí·ûõ·ûº·ûú·û¢·ûó·û∑·ûú·ûå·üí·ûç·ûì·üç·ûü·ûÄ·üí·ûè·û∂·ûì·ûª·ûñ·ûõ

üéØ ·ûõ·üí·û¢·û•·ûè·ûÅ·üí·ûÖ·üÑ·üá·ûü·ûò·üí·ûö·û∂·ûî·üã:
- ·ûü·üí·ûê·û∂·ûî·ûì·û∑·ûÄ·ûä·üÇ·ûõ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûò·ûº·ûõ·ûí·ûì·ûØ·ûÄ·ûá·ûì ($100K+ ·ûÄ·üí·ûì·ûª·ûÑ·ûò·ûΩ·ûô·ûÜ·üí·ûì·û∂·üÜ)
- ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûè·û∑·ûî·ûè·üí·ûè·û∑·ûä·üÇ·ûõ·ûò·û∂·ûì·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí·ûò·ûº·ûõ·ûì·û∑·ûí·û∑
- ·ûò·üí·ûÖ·û∂·ûü·üã·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò·ûä·üÇ·ûõ·ûÇ·üí·ûö·üÑ·ûÑ·ûò·ûº·ûõ·ûì·û∑·ûí·û∑·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÄ·û∂·ûö·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì
- ·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·û∑·ûì·ûä·üÇ·ûõ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûÄ·û∂·ûö·ûä·û∂·ûÄ·üã·ûñ·ûÑ·üí·ûö·û∂·ûô·ûò·û∂·ûì·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí
- ·ûü·û†·ûÇ·üí·ûö·û∑·ûì·ûä·üÇ·ûõ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûî·üí·ûö·ûü·û∑·ûë·üí·ûí·ûó·û∂·ûñ·ûò·ûº·ûõ·ûí·ûì

üá∞üá≠ ·ûÄ·û∂·ûö·ûï·üí·ûè·üÑ·ûè·ûõ·ûæ·ûÄ·ûò·üí·ûñ·ûª·ûá·û∂: ·ûô·ûæ·ûÑ·ûô·ûõ·üã·ûä·ûπ·ûÑ·ûñ·û∏·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò·ûÄ·üí·ûì·ûª·ûÑ·ûü·üí·ûö·ûª·ûÄ ·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí·ûí·ûì·û∂·ûÇ·û∂·ûö ·ûì·û∑·ûÑ·û±·ûÄ·û∂·ûü·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì·üî

‚ö†Ô∏è ·ûü·üÜ·ûÅ·û∂·ûì·üã: ·ûì·üÅ·üá·ûÇ·û∫·ûá·û∂·ûô·ûª·ûë·üí·ûí·ûü·û∂·ûü·üí·ûè·üí·ûö·ûò·ûº·ûõ·ûí·ûì·ûÄ·ûò·üí·ûö·û∑·ûè·ûÅ·üí·ûñ·ûü·üã·ûü·ûò·üí·ûö·û∂·ûî·üã·ûò·üí·ûÖ·û∂·ûü·üã·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò·ûí·üí·ûÑ·ûì·üã·ûí·üí·ûÑ·ûö·ûä·üÇ·ûõ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûò·ûº·ûõ·ûí·ûì·ûü·üÜ·ûÅ·û∂·ûì·üã·üó·üî

·ûè·üí·ûö·üÄ·ûò·ûÅ·üí·ûõ·ûΩ·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûî·üí·ûö·ûü·û∑·ûë·üí·ûí·ûó·û∂·ûñ·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí·ûò·ûº·ûõ·ûí·ûì·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ·û†·ûæ·ûô·û¨·ûì·üÖ? ·ûü·ûº·ûò·ûï·üí·ûè·ûõ·üã·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûõ·ûò·üí·û¢·û∑·ûè·û¢·üÜ·ûñ·û∏·ûõ·ûÄ·üí·ûÅ·ûé·üà·ûü·ûò·üí·ûî·ûè·üí·ûè·û∑·ûÅ·û∂·ûÑ·ûõ·ûæ·üî

·ûò·û∂·ûì·ûü·üÜ·ûé·ûΩ·ûö? ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã·üî`;

    await sendLongMessage(
      bot,
      userId,
      clarityResponse,
      { parse_mode: "Markdown" },
      MESSAGE_CHUNK_SIZE,
    );

    const adminId = parseInt(process.env.ADMIN_CHAT_ID);
    if (adminId) {
      await bot.sendMessage(
        adminId,
        `üèõÔ∏è NEW CAPITAL CLARITY INTEREST:

·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã: ${firstName} (${userId})
·ûñ·üÅ·ûõ·ûú·üÅ·ûõ·û∂: ${new Date().toLocaleString()}
·ûî·üí·ûö·ûó·üÅ·ûë: ·ûú·ûÇ·üí·ûÇ·ûô·ûª·ûë·üí·ûí·ûü·û∂·ûü·üí·ûè·üí·ûö·ûò·ûº·ûõ·ûí·ûì·ûØ·ûÄ·ûá·ûì ($197)

·û¢·üí·ûì·ûÄ·ûÖ·û∂·ûî·üã·û¢·û∂·ûö·ûò·üí·ûò·ûé·üç·ûÄ·ûò·üí·ûö·û∑·ûè·ûÅ·üí·ûñ·ûü·üã·ûÖ·ûÑ·üã·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûî·üí·ûö·ûü·û∑·ûë·üí·ûí·ûó·û∂·ûñ·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí·ûò·ûº·ûõ·ûí·ûì·üî

·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûè·üí·ûö·ûº·ûú·ûï·üí·ûè·ûõ·üã·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûõ·ûÄ·üí·ûÅ·ûé·üà·ûü·ûò·üí·ûî·ûè·üí·ûè·û∑·üî`,
      );
    }
  } catch (error) {
    console.error("Error handling Capital Clarity interest:", error);
    await bot.sendMessage(
      msg.chat.id,
      "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö·ûü·üÜ·ûé·ûæ Capital Clarity·üî",
    );
  }
});

async function handleVipApply(msg) {
  try {
    const user = await User.findOne({ telegram_id: msg.from.id });
    const isPaid = user?.is_paid === true || user?.is_paid === 't';

    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }

    const vipApplyMessage = `üåü VIP PROGRAM + CAPITAL STRATEGY ACCESS

·ûü·ûº·ûò·ûï·üí·ûâ·ûæ·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûä·ûº·ûÖ·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÑ·ûò:

1Ô∏è‚É£ ·ûà·üí·ûò·üÑ·üá·ûñ·üÅ·ûâ:
2Ô∏è‚É£ ·û¢·û∂·ûá·û∏·ûú·ûÄ·ûò·üí·ûò/·ûÄ·û∂·ûö·ûÑ·û∂·ûö:
3Ô∏è‚É£ ·ûÇ·üÑ·ûõ·ûä·üÖ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª:
4Ô∏è‚É£ ·ûî·ûâ·üí·û†·û∂ Capital Flow ·ûî·ûÖ·üí·ûÖ·ûª·ûî·üí·ûî·ûì·üí·ûì:
5Ô∏è‚É£ ·ûò·üâ·üÑ·ûÑ·ûä·üÇ·ûõ·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûñ·û∑·ûÇ·üí·ûö·üÑ·üá:
6Ô∏è‚É£ ·ûõ·üÅ·ûÅ·ûë·ûº·ûö·ûü·ûñ·üí·ûë:

üí∞ ·ûè·ûò·üí·ûõ·üÉ VIP: $197 (789,576 ·ûö·üÄ·ûõ)
‚úÖ Strategic Foundation Session 1-on-1 (60 ·ûì·û∂·ûë·û∏)
‚úÖ ·ûÄ·û∂·ûö·ûè·û∂·ûò·ûä·û∂·ûì 30 ·ûê·üí·ûÑ·üÉ + Implementation Support
‚úÖ Capital Foundation Development
‚úÖ Capital Clarity Preview (15 ·ûì·û∂·ûë·û∏)
‚úÖ Readiness Assessment for Advanced Capital Systems
‚úÖ Strategic Network Introductions
‚úÖ Pathway to Advanced Capital Work

üìû ·ûî·ûì·üí·ûë·û∂·ûî·üã·ûñ·û∏·û¢·üí·ûì·ûÄ·ûï·üí·ûâ·ûæ·ûñ·üê·ûè·üå·ûò·û∂·ûì Admin ·ûì·ûπ·ûÑ·ûë·û∂·ûÄ·üã·ûë·ûÑ·û¢·üí·ûì·ûÄ`;

    await sendLongMessage(
      bot,
      msg.chat.id,
      vipApplyMessage,
      {},
      MESSAGE_CHUNK_SIZE,
    );

    const adminId = parseInt(process.env.ADMIN_CHAT_ID);
    if (adminId) {
      await bot.sendMessage(
        adminId,
        `üåü VIP APPLICATION REQUEST:

·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã: ${user.first_name} ${user.last_name || ""}
ID: ${user.telegram_id}
·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ: ${isPaid ? "·ûî·û∂·ûì·ûë·ûº·ûë·û∂·ûè·üã" : "·ûò·û∑·ûì·ûë·û∂·ûì·üã·ûë·ûº·ûë·û∂·ûè·üã"} ${user.is_vip ? "| VIP ·ûö·ûΩ·ûÖ·û†·ûæ·ûô" : ""}

·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûÖ·ûÑ·üã·ûä·û∂·ûÄ·üã·ûñ·û∂·ûÄ·üí·ûô·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏ VIP·üî
·ûè·û∂·ûò·ûä·û∂·ûì·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûñ·û∂·ûÄ·üí·ûô·ûü·ûª·üÜ·ûö·ûî·ûü·üã·ûñ·ûΩ·ûÄ·ûÇ·üÅ·üî`,
      );
    }
  } catch (error) {
    console.error("Error in VIP Apply handler:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö·ûü·üÜ·ûé·ûæ VIP·üî");
  }
}

async function handleCapitalClarityApplicationRequest(msg) {
  const userId = msg.from.id;
  const firstName = msg.from.first_name || "·ûü·û†·ûÇ·üí·ûö·û∑·ûì";

  const applicationMessage = `üìã ·ûë·ûò·üí·ûö·ûÑ·üã·ûñ·û∂·ûÄ·üí·ûô·ûü·ûª·üÜ Capital Clarity

·ûá·üÜ·ûö·û∂·ûî·ûü·ûΩ·ûö ${firstName}!

·ûè·üí·ûö·üÄ·ûò·ûÅ·üí·ûõ·ûΩ·ûì·ûö·ûΩ·ûÖ·ûö·û∂·ûõ·üã·û†·ûæ·ûô·û¨·ûì·üÖ·ûä·ûæ·ûò·üí·ûî·û∏·ûä·û∂·ûÄ·üã·ûñ·û∂·ûÄ·üí·ûô·ûü·ûª·üÜ Capital Clarity ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ? ·ûü·ûº·ûò·ûï·üí·ûè·ûõ·üã·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûä·üÇ·ûõ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã·ûÄ·üí·ûì·ûª·ûÑ·ûë·ûò·üí·ûö·ûÑ·üã·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÑ·ûò:

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

CAPITAL CLARITY APPLICATION
1. ·ûè·ûΩ·ûì·û∂·ûë·û∏: [·ûè·ûΩ·ûì·û∂·ûë·û∏·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ - ·ûü·üí·ûê·û∂·ûî·ûì·û∑·ûÄ/·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûè·û∑·ûî·ûè·üí·ûè·û∑/·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·û∑·ûì]
2. ·ûÄ·üí·ûö·ûª·ûò·û†·üä·ûª·ûì: [·ûà·üí·ûò·üÑ·üá·ûÄ·üí·ûö·ûª·ûò·û†·üä·ûª·ûì ·ûì·û∑·ûÑ·ûá·ûΩ·ûö·ûÖ·üÜ·ûé·ûº·ûõ·ûî·üí·ûö·ûÖ·û∂·üÜ·ûÜ·üí·ûì·û∂·üÜ]
3. ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·ûò·ûº·ûõ·ûí·ûì: [·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·ûò·ûº·ûõ·ûí·ûì/·ûò·ûº·ûõ·ûì·û∑·ûí·û∑·ûî·ûÖ·üí·ûÖ·ûª·ûî·üí·ûî·ûì·üí·ûì]
4. ·ûî·ûâ·üí·û†·û∂·ûî·üí·ûö·ûà·ûò·ûÖ·ûò·üí·ûî·ûÑ: [·ûî·ûâ·üí·û†·û∂·ûî·üí·ûö·ûà·ûò·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí·ûÖ·ûò·üí·ûî·ûÑ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ]
5. ·ûÄ·û∂·ûõ·ûÄ·üÜ·ûé·ûè·üã: [·ûÄ·û∂·ûõ·ûÄ·üÜ·ûé·ûè·üã ·ûì·û∑·ûÑ·ûÇ·üÑ·ûõ·ûä·üÖ·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ]
6. ·ûë·üÜ·ûì·û∂·ûÄ·üã·ûë·üÜ·ûì·ûÑ: [·û¢·üä·û∏·ûò·üÇ·ûõ ·ûì·û∑·ûÑ·ûõ·üÅ·ûÅ·ûë·ûº·ûö·ûü·ûñ·üí·ûë]

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° ·ûß·ûë·û∂·û†·ûö·ûé·üç·ûñ·û∂·ûÄ·üí·ûô·ûü·ûª·üÜ:
CAPITAL CLARITY APPLICATION
1. ·ûè·ûΩ·ûì·û∂·ûë·û∏: ·ûü·üí·ûê·û∂·ûî·ûì·û∑·ûÄ
2. ·ûÄ·üí·ûö·ûª·ûò·û†·üä·ûª·ûì: Tech Startup - ·ûÖ·üÜ·ûé·ûº·ûõ·ûî·üí·ûö·ûÖ·û∂·üÜ·ûÜ·üí·ûì·û∂·üÜ $200K
3. ·ûü·üí·ûê·û∂·ûì·ûó·û∂·ûñ·ûò·ûº·ûõ·ûí·ûì: ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûò·ûº·ûõ·ûí·ûì·ûî·ûÑ·üí·ûú·û∑·ûõ $50K, ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûò·ûº·ûõ·ûì·û∑·ûí·û∑ $300K
4. ·ûî·ûâ·üí·û†·û∂·ûî·üí·ûö·ûà·ûò·ûÖ·ûò·üí·ûî·ûÑ: ·ûè·üí·ûö·ûº·ûú·ûÄ·û∂·ûö·ûô·ûª·ûë·üí·ûí·ûü·û∂·ûü·üí·ûè·üí·ûö·ûä·û∂·ûÄ·üã·ûñ·ûÑ·üí·ûö·û∂·ûô·ûò·ûº·ûõ·ûí·ûì·ûä·üÇ·ûõ·ûò·û∂·ûì·ûö·ûÖ·ûì·û∂·ûü·ûò·üí·ûñ·üê·ûì·üí·ûí
5. ·ûÄ·û∂·ûõ·ûÄ·üÜ·ûé·ûè·üã: ·ûè·üí·ûö·üÄ·ûò·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ·ûÄ·üí·ûì·ûª·ûÑ·ûö·ûô·üà·ûñ·üÅ·ûõ ·ü£ ·ûÅ·üÇ
6. ·ûë·üÜ·ûì·û∂·ûÄ·üã·ûë·üÜ·ûì·ûÑ: chendasum168@fmail.com, +855-11-665-697

üéØ ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ:
‚Ä¢ ·ûÖ·ûò·üí·ûõ·ûÑ·ûë·ûò·üí·ûö·ûÑ·üã·ûÅ·û∂·ûÑ·ûõ·ûæ
‚Ä¢ ·ûá·üÜ·ûì·ûΩ·ûü·ûä·üÑ·ûô·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûñ·û∑·ûè·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ
‚Ä¢ ·ûï·üí·ûâ·ûæ·ûá·û∂·ûü·û∂·ûö·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ·ûò·ûΩ·ûô
‚Ä¢ ·ûô·ûæ·ûÑ·ûì·ûπ·ûÑ·ûñ·û∑·ûì·û∑·ûè·üí·ûô ·ûì·û∑·ûÑ·ûÜ·üí·ûõ·ûæ·ûô·ûè·ûî·ûÄ·üí·ûì·ûª·ûÑ·ûö·ûô·üà·ûñ·üÅ·ûõ ·ü¢·ü§ ·ûò·üâ·üÑ·ûÑ

üí∞ ·ûÄ·û∂·ûö·ûú·û∑·ûì·û∑·ûô·üÑ·ûÇ: $197 (·ûè·ûò·üí·ûõ·üÉ·ûí·ûò·üí·ûò·ûè·û∂: $497)
üî• ·ûò·û∂·ûì·ûÄ·üÜ·ûé·ûè·üã: ·ü• ·ûÄ·ûì·üí·ûõ·üÇ·ûÑ·ûÄ·üí·ûì·ûª·ûÑ·ûò·ûΩ·ûô·ûÅ·üÇ

·ûò·û∂·ûì·ûü·üÜ·ûé·ûΩ·ûö? ·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ûä·üÑ·ûô·ûï·üí·ûë·û∂·ûõ·üã·üî`;

  await sendLongMessage(
    bot,
    userId,
    applicationMessage,
    {},
    MESSAGE_CHUNK_SIZE,
  );

  const adminId = parseInt(process.env.ADMIN_CHAT_ID);
  if (adminId) {
    await bot.sendMessage(
      adminId,
      `üìã APPLICATION FORM REQUESTED:

·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã: ${firstName} (${userId})
·ûü·û∂·ûö: "${msg.text}"
·ûñ·üÅ·ûõ·ûú·üÅ·ûõ·û∂: ${new Date().toLocaleString()}

·û¢·üí·ûì·ûÄ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûè·üí·ûö·üÄ·ûò·ûä·û∂·ûÄ·üã·ûñ·û∂·ûÄ·üí·ûô·ûü·ûª·üÜ Capital Clarity·üî`,
    );
  }
}

async function handleTextResponse(msg) {
  const userId = msg.from.id;
  const text = msg.text.toUpperCase();

  try {
    // FIXED: Use correct PostgreSQL field name
    const user = await User.findOne({ telegram_id: userId });

    if (!user) {
      await bot.sendMessage(
        msg.chat.id,
        "·ûü·ûº·ûò·ûÖ·ûª·üá·ûà·üí·ûò·üÑ·üá·ûò·ûª·ûì·üî ·ûî·üí·ûö·ûæ /start ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·üî",
      );
      return;
    }

    const restrictedActions = ["READY FOR DAY 1", "DAY", "PROGRAM COMPLETE"];
    const isRestrictedAction = restrictedActions.some((action) =>
      text.includes(action),
    );

    // FIXED: Check is_paid properly (PostgreSQL stores as 't'/'f' strings)
    const isPaid = user.is_paid === "t" || user.is_paid === true;

    console.log(`Text response access check for user ${userId}:`, {
      text: text,
      user_found: !!user,
      is_paid_raw: user?.is_paid,
      is_paid_boolean: isPaid,
      is_restricted_action: isRestrictedAction,
      tier: user?.tier,
    });

    if (isRestrictedAction && !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }

    if (text === "READY FOR DAY 1") {
      await handleReadyForDay1(msg);
    } else if (text.includes("DAY") && text.includes("COMPLETE")) {
      await handleDayComplete(msg);
    } else if (text === "PROGRAM COMPLETE") {
      await handleProgramComplete(msg);
    }
  } catch (error) {
    console.error("Error handling general text response:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
}

async function handleReadyForDay1(msg) {
  const userId = msg.from.id;

  try {
    console.log("üöÄüöÄüöÄ HANDLEREADYFORDAY1 FUNCTION CALLED! üöÄüöÄüöÄ");
    console.log("User ID:", userId);
    console.log("Message text:", msg.text);

    // FIXED: Use correct PostgreSQL field name
    const user = await User.findOne({ telegram_id: userId });

    // FIXED: Check is_paid properly (PostgreSQL stores as 't'/'f' strings)
    const isPaid = user?.is_paid === true || user?.is_paid === "t";

    console.log(`READY FOR DAY 1 access check for user ${userId}:`, {
      user_found: !!user,
      is_paid_raw: user?.is_paid,
      is_paid_boolean: isPaid,
      tier: user?.tier,
    });

    if (!user || !isPaid) {
      await bot.sendMessage(
        msg.chat.id,
        "üîí ·ûü·ûº·ûò·ûë·ûº·ûë·û∂·ûè·üã·ûò·ûª·ûì·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·üî ·ûî·üí·ûö·ûæ /pricing ·ûä·ûæ·ûò·üí·ûî·û∏·ûò·ûæ·ûõ·ûñ·üê·ûè·üå·ûò·û∂·ûì·üî",
      );
      return;
    }

    // FIXED: Use correct PostgreSQL field names for Progress table
    await Progress.findOneAndUpdate(
      { user_id: userId },
      {
        ready_for_day_1: true,
        current_day: 1,
      },
      { upsert: true },
    );

    await bot.sendMessage(
      msg.chat.id,
      `üéâ ·ûõ·üí·û¢·û†·ûæ·ûô! ·û¢·üí·ûì·ûÄ·ûè·üí·ûö·üÄ·ûò·ûö·ûΩ·ûÖ·û†·ûæ·ûô!

·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü° ·û•·û°·ûº·ûú·ûì·üÅ·üá: /day1

·ûê·üí·ûÑ·üÉ·ûë·û∏ ·ü° ·ûì·ûπ·ûÑ·ûï·üí·ûâ·ûæ·ûü·üí·ûú·üê·ûô·ûî·üí·ûö·ûú·ûè·üí·ûè·û∑·ûì·üÖ·ûò·üâ·üÑ·ûÑ ·ü© ·ûñ·üí·ûö·ûπ·ûÄ·ûê·üí·ûÑ·üÉ·ûü·üí·û¢·üÇ·ûÄ·ûï·ûÑ·ûä·üÇ·ûö·üî

·ûá·üÜ·ûì·ûΩ·ûô ·ü¢·ü§/·üß ·ûá·û∂·ûó·û∂·ûü·û∂·ûÅ·üí·ûò·üÇ·ûö! üí™`,
    );
  } catch (error) {
    console.error("Error handling ready for day 1:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
}

async function handleDayComplete(msg) {
  const dayMatch = msg.text.toUpperCase().match(/DAY\s*(\d+)\s*COMPLETE/);
  if (!dayMatch) return;

  const dayNumber = parseInt(dayMatch[1]);

  const updateField = `day${dayNumber}Completed`;
  const completedAtField = `day${dayNumber}CompletedAt`;
  const nextDay = dayNumber + 1;

  // FIXED: Use correct PostgreSQL field names for Progress table
  await Progress.findOneAndUpdate(
    { user_id: msg.from.id },
    {
      [updateField]: true,
      [completedAtField]: new Date(),
      current_day: nextDay <= 7 ? nextDay : 7,
    },
    { upsert: true },
  );

  const completeReaction = emojiReactions.lessonCompleteReaction(dayNumber);
  await bot.sendMessage(msg.chat.id, completeReaction);

  setTimeout(async () => {
    const celebrationMessage = celebrations.dayCompleteCelebration(dayNumber);
    await sendLongMessage(
      bot,
      msg.chat.id,
      celebrationMessage,
      {},
      MESSAGE_CHUNK_SIZE,
    );
  }, 500);

  setTimeout(async () => {
    await quotesCommands.sendMilestoneQuote(bot, msg.chat.id, "day_complete");
  }, 2000);

  const progressPercentage = (dayNumber / 7) * 100;
  const progressCelebration =
    celebrations.getProgressCelebration(progressPercentage);
  await bot.sendMessage(
    msg.chat.id,
    `üìä ·ûÄ·û∂·ûö·ûä·üÜ·ûé·ûæ·ûö: ${Math.round(progressPercentage)}% - ${progressCelebration}`,
  );

  setTimeout(async () => {
    try {
      const user = await User.findOne({ telegram_id: msg.from.id });
      const progress = await Progress.findOne({ user_id: msg.from.id });

      if (user && progress) {
        const completedDays = [];
        for (let i = 1; i <= 7; i++) {
          if (progress[`day${i}Completed`]) {
            completedDays.push(i);
          }
        }

        const milestone = progressBadges.milestones[`day${dayNumber}`];
        if (milestone) {
          const badgeMessage = progressBadges.createAnimatedBadge(
            "milestone",
            `üèÖ ·ûî·û∂·ûì·ûë·ûë·ûΩ·ûõ: ${milestone.name} ${milestone.emoji}`,
            `${milestone.reward}\n\nüí´ ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè ·û¢·üí·ûì·ûÄ·ûÅ·üí·ûõ·û∂·üÜ·ûÑ!`,
          );
          await sendLongMessage(
            bot,
            msg.chat.id,
            badgeMessage,
            {},
            MESSAGE_CHUNK_SIZE,
          );
        }

        if (completedDays.length === 3) {
          const specialBadge = progressBadges.createAnimatedBadge(
            "special",
            "üî• ·ûò·ûá·üí·ûà·ûò·ûó·û∂·ûñ Badge ·ûî·û∂·ûì·ûë·ûë·ûΩ·ûõ!",
            "·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã ·ü£ ·ûê·üí·ûÑ·üÉ! ·ûÄ·û∂·ûö·ûä·üÜ·ûé·ûæ·ûö·ûÄ·üÜ·ûñ·ûª·ûÑ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò!",
          );
          await sendLongMessage(
            bot,
            msg.chat.id,
            specialBadge,
            {},
            MESSAGE_CHUNK_SIZE,
          );
        } else if (completedDays.length === 5) {
          const specialBadge = progressBadges.createAnimatedBadge(
            "special",
            "üí™ ·û¢·üí·ûì·ûÄ·ûÅ·üí·ûõ·û∂·üÜ·ûÑ Badge ·ûî·û∂·ûì·ûë·ûë·ûΩ·ûõ!",
            "·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã ·ü• ·ûê·üí·ûÑ·üÉ! ·ûü·üí·ûë·ûæ·ûö·ûè·üÇ·ûî·û∂·ûì·û†·ûæ·ûô!",
          );
          await sendLongMessage(
            bot,
            msg.chat.id,
            specialBadge,
            {},
            MESSAGE_CHUNK_SIZE,
          );
        } else if (completedDays.length === 7) {
          const specialBadge = progressBadges.createAnimatedBadge(
            "special",
            "üèÜ Champion Badge ·ûî·û∂·ûì·ûë·ûë·ûΩ·ûõ!",
            "·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã! ·û¢·üí·ûì·ûÄ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö·ûî·û∂·ûì·ûõ·üí·û¢!",
          );
          await sendLongMessage(
            bot,
            msg.chat.id,
            specialBadge,
            {},
            MESSAGE_CHUNK_SIZE,
          );
        }
      }
    } catch (error) {
      console.error("Error showing badge achievement:", error);
    }
  }, 2000);

  if (dayNumber < 7) {
    setTimeout(async () => {
      const nextDay = dayNumber + 1;
      const nextDayMessage = `üåÖ ·ûê·üí·ûÑ·üÉ·ûõ·üí·û¢ ${msg.from.first_name || "·ûò·û∑·ûè·üí·ûè"}!

üéØ DAY ${nextDay} ·ûî·û∂·ûì·ûò·ûÄ·ûä·ûõ·üã! ·ûè·üí·ûö·üÄ·ûò·ûÅ·üí·ûõ·ûΩ·ûì·ûü·ûò·üí·ûö·û∂·ûî·üã·ûò·üÅ·ûö·üÄ·ûì·ûê·üí·ûò·û∏!

·ûÖ·ûª·ûÖ /day${nextDay} ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·üî

·ûö·ûô·üà·ûñ·üÅ·ûõ: ·ûè·üí·ûö·ûπ·ûò·ûè·üÇ ·ü°·ü•-·ü¢·ü† ·ûì·û∂·ûë·û∏·ûî·üâ·ûª·ûé·üí·ûé·üÑ·üá! üí™`;

      await sendLongMessage(
        bot,
        msg.chat.id,
        nextDayMessage,
        {},
        MESSAGE_CHUNK_SIZE,
      );
    }, 86400000);
  }

  if (dayNumber === 3) {
    setTimeout(async () => {
      const user = await User.findOne({ telegram_id: msg.from.id });
      if (!user || user.tier === "premium" || user.tier === "vip") return;

      const upsellMessage = `üî• ${msg.from.first_name || "·ûò·û∑·ûè·üí·ûè"}, ·û¢·üí·ûì·ûÄ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûí·üí·ûú·ûæ·ûî·û∂·ûì·ûõ·üí·û¢!

·ûî·û∂·ûì·ûä·ûπ·ûÑ·ûë·üÅ·ûê·û∂ Premium members ·ûë·ûë·ûΩ·ûõ·ûî·û∂·ûì:
üéØ ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûï·üí·ûë·û∂·ûõ·üã·ûÅ·üí·ûõ·ûΩ·ûì
üìä ·ûß·ûî·ûÄ·ûö·ûé·üç·ûè·û∂·ûò·ûä·û∂·ûì Financial
üí∞ ·ûÄ·û∂·ûö·ûÖ·ûº·ûõ·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö Investment
üèÜ VIP community access

Upgrade ·ûë·üÖ Premium ($97) ·û•·û°·ûº·ûú·ûì·üÅ·üá!

·ûÖ·ûª·ûÖ /pricing ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûî·ûì·üí·ûê·üÇ·ûò`;

      await sendLongMessage(
        bot,
        msg.chat.id,
        upsellMessage,
        {},
        MESSAGE_CHUNK_SIZE,
      );
    }, 3600000);
  }

  if (dayNumber === 7) {
    setTimeout(async () => {
      const followUpMessage = `üëã ${msg.from.first_name || "·ûò·û∑·ûè·üí·ûè"}!

·ûî·û∂·ûì 30 ·ûê·üí·ûÑ·üÉ·û†·ûæ·ûô·ûÖ·û∂·ûî·üã·ûè·û∂·üÜ·ûÑ·ûñ·û∏·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã 7-Day Money Flow Reset‚Ñ¢!

ü§î ·ûè·ûæ·û¢·üí·ûì·ûÄ·ûü·ûì·üí·ûü·üÜ·ûî·û∂·ûì·ûî·üâ·ûª·ûì·üí·ûò·û∂·ûì?

·ûÖ·ûº·ûõ·ûö·ûΩ·ûò·ûÄ·û∂·ûö·ûü·üí·ûë·ûÑ·üã·ûò·ûè·û∑·ûö·û†·üê·ûü (·ü¢ ·ûì·û∂·ûë·û∏):
‚úÖ ·ûÖ·üÇ·ûÄ·ûö·üÜ·ûõ·ûõ·ûë·üí·ûí·ûï·ûõ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ
‚úÖ ·ûë·ûë·ûΩ·ûõ·ûî·û∂·ûì·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûî·ûì·üí·ûê·üÇ·ûò
‚úÖ ·ûá·ûΩ·ûô·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûÄ·û∂·ûì·üã·ûè·üÇ·ûî·üí·ûö·ûü·ûæ·ûö

·ûü·ûö·ûü·üÅ·ûö·ûõ·ûë·üí·ûí·ûï·ûõ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ·ûò·ûÄ·û±·üí·ûô·ûÅ·üí·ûâ·ûª·üÜ! üìä

·ûß·ûë·û∂·û†·ûö·ûé·üç: "·ûÅ·üí·ûâ·ûª·üÜ·ûÄ·üÇ·ûî·üí·ûö·üÇ·ûë·ûò·üí·ûõ·û∂·ûî·üã·ûÄ·û∂·ûö·ûÖ·üÜ·ûé·û∂·ûô·ûî·û∂·ûì·û†·ûæ·ûô!"`;

      await sendLongMessage(
        bot,
        msg.chat.id,
        followUpMessage,
        {},
        MESSAGE_CHUNK_SIZE,
      );
    }, 2592000000);
  }

  if (dayNumber < 7) {
    await bot.sendMessage(
      msg.chat.id,
      `üöÄ ·ûè·üí·ûö·üÄ·ûò·ûö·ûΩ·ûÖ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûê·üí·ûÑ·üÉ·ûë·û∏ ${nextDay}? ·ûÖ·ûª·ûÖ /day${nextDay}`,
    );
  } else {
    setTimeout(async () => {
      await bot.sendMessage(
        msg.chat.id,
        `üéä ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ! ·ûü·ûö·ûü·üÅ·ûö "PROGRAM COMPLETE" ·ûä·ûæ·ûò·üí·ûî·û∏·ûë·ûë·ûΩ·ûõ·ûô·ûÄ·ûõ·ûë·üí·ûí·ûï·ûõ·ûÖ·ûª·ûÑ·ûÄ·üí·ûö·üÑ·ûô!`,
      );
    }, 3000);
  }
}

async function handleProgramComplete(msg) {
  if (isDuplicateMessage(msg)) return;
  try {
    const programCelebration =
      celebrations.programCompleteCelebration(`üéØ ·ûá·üÜ·û†·û∂·ûì·ûî·ûì·üí·ûë·û∂·ûî·üã:
1Ô∏è‚É£ ·û¢·ûì·ûª·ûú·ûè·üí·ûè·ûï·üÇ·ûì·ûÄ·û∂·ûö ·ü£·ü† ·ûê·üí·ûÑ·üÉ
2Ô∏è‚É£ ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûä·üÜ·ûé·ûæ·ûö·ûÄ·û∂·ûö·ûî·üí·ûö·ûÖ·û∂·üÜ·ûü·ûî·üí·ûè·û∂·û†·üç
3Ô∏è‚É£ ·ûò·û∂·ûì·ûü·üÜ·ûé·ûΩ·ûö? ·ûë·û∂·ûÄ·üã·ûë·ûÑ·ûò·ûÄ·ûî·û∂·ûì!

üöÄ ·ûÖ·ûÑ·üã·ûî·ûì·üí·ûè·ûÄ·ûò·üí·ûö·û∑·ûè·ûî·ûì·üí·ûë·û∂·ûî·üã?
VIP Advanced Program ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûÅ·üÇ·ûÄ·üí·ûö·üÑ·ûô!
·ûü·ûΩ·ûö: "VIP PROGRAM INFO"`);

    await sendLongMessage(
      bot,
      msg.chat.id,
      programCelebration,
      {},
      MESSAGE_CHUNK_SIZE,
    );

    setTimeout(async () => {
      await quotesCommands.sendMilestoneQuote(
        bot,
        msg.chat.id,
        "program_complete",
      );
    }, 2000);

    await Progress.findOneAndUpdate(
      { user_id: msg.from.id },
      {
        programCompleted: true,
        programCompletedAt: new Date(),
      },
      { upsert: true },
    );

    setTimeout(async () => {
      const achievement = celebrations.milestoneCelebration(
        "·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·ûá·üÑ·ûÇ·ûá·üê·ûô!",
        "·û¢·üí·ûì·ûÄ·û•·û°·ûº·ûú·ûì·üÅ·üá·ûò·û∂·ûì·ûÖ·üÜ·ûé·üÅ·üá·ûä·ûπ·ûÑ·ûÇ·üí·ûö·ûπ·üá·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûõ·ûª·ûô!",
      );
      await sendLongMessage(
        bot,
        msg.chat.id,
        achievement,
        {},
        MESSAGE_CHUNK_SIZE,
      );
    }, 2000);

    setTimeout(async () => {
      await vipCommands.offer(msg, bot);
    }, 5000);
  } catch (error) {
    console.error("Error handling PROGRAM COMPLETE:", error);
    await bot.sendMessage(msg.chat.id, "‚ùå ·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·üî");
  }
}

// Railway webhook handler
app.post(`/bot${process.env.BOT_TOKEN}`, async (req, res) => {
  try {
    console.log("üîî Webhook received:", JSON.stringify(req.body, null, 2));

    if (req.body && req.body.message) {
      const message = req.body.message;
      console.log(
        "üì® Message from user:",
        message.from.id,
        "text:",
        message.text,
      );

      // SPECIAL DEBUG: Check if this is the "READY FOR DAY 1" message
      if (message.text && message.text.toUpperCase() === "READY FOR DAY 1") {
        console.log(
          "üéØüéØüéØ READY FOR DAY 1 MESSAGE DETECTED IN WEBHOOK! üéØüéØüéØ",
        );
        console.log("User ID:", message.from.id);
        console.log("Chat ID:", message.chat.id);
        console.log("Message text:", message.text);
      }

      // Check if it's a command
      if (message.text && message.text.startsWith("/")) {
        console.log("üéØ Command detected:", message.text);

        // Add a direct test command to verify webhook is working
        if (message.text.toLowerCase() === "/test") {
          console.log("üß™ Direct test command triggered");
          try {
            await bot.sendMessage(
              message.chat.id,
              "‚úÖ Webhook is working! Bot is receiving messages correctly on Railway.",
            );
            res.sendStatus(200);
            return;
          } catch (sendError) {
            console.error("‚ùå Error sending test message:", sendError.message);
          }
        }
      }
    }

    console.log("‚ö° Processing update through bot.processUpdate...");
    await bot.processUpdate(req.body);
    console.log("‚úÖ Update processed successfully");

    res.sendStatus(200);
  } catch (error) {
    console.error("‚ùå Telegram webhook error:", error.message);
    console.error("‚ùå Full error stack:", error.stack);
    res.sendStatus(500);
  }
});

app.get("/analytics", async (req, res) => {
  try {
    const stats = await analytics.getStats();
    res.json(stats);
  } catch (error) {
    res.status(500).json({ error: "Failed to get analytics" });
  }
});

app.get("/api", (req, res) => {
  res.json({
    name: "7-Day Money Flow Reset‚Ñ¢ Telegram Bot",
    description:
      "A Telegram bot that delivers a 7-day financial education program in Khmer language",
    status: "Running on Railway",
    version: "2.0.0",
    domain: getRailwayUrl(),
    timestamp: new Date().toISOString(),
    automation: "Enhanced with 7-Day Money Flow automation features",
    endpoints: {
      health: "/health",
      analytics: "/analytics",
      payment_webhook: "/webhook/payment",
      ping: "/ping",
    },
  });
});

app.get("/", (req, res) => {
  res.status(200).json({
    name: "7-Day Money Flow Reset‚Ñ¢ Telegram Bot",
    description:
      "A Telegram bot that delivers a 7-day financial education program in Khmer language",
    status: "Running on Railway",
    version: "2.0.0",
    domain: getRailwayUrl(),
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    automation: "Enhanced with 7-Day Money Flow automation features",
    endpoints: {
      health: "/health",
      analytics: "/analytics",
      payment_webhook: "/webhook/payment",
      ping: "/ping",
    },
  });
});

app.get("/health", (req, res) => {
  res.status(200).json({
    status: "OK",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    automation: "7-Day automation active",
    webhookUrl: `${getRailwayUrl()}/bot${process.env.BOT_TOKEN}`,
  });
});

// New /ping endpoint for direct server reachability test
app.get("/ping", (req, res) => {
  console.log("üèì /ping endpoint hit!");
  res.status(200).send("Pong from Railway!");
});

app.post("/setup-webhook", async (req, res) => {
  try {
    const railwayBaseUrl = getRailwayUrl();
    const correctWebhookUrl = `${railwayBaseUrl}/bot${process.env.BOT_TOKEN}`;
    console.log("üîß Manual webhook setup to:", correctWebhookUrl);
    await bot.setWebHook(correctWebhookUrl);
    res.json({
      success: true,
      message: "Webhook set successfully",
      url: correctWebhookUrl,
    });
  } catch (error) {
    console.error("Manual webhook setup error:", error);
    res.status(500).json({ error: error.message });
  }
});

app.get("/healthz", (req, res) => {
  res.status(200).json({
    status: "OK",
    timestamp: new Date().toISOString(),
    automation: "Enhanced with 7-Day automation",
  });
});

app.get("/ready", (req, res) => {
  res.status(200).json({
    status: "ready",
    timestamp: new Date().toISOString(),
    features: "7-Day automation enabled",
  });
});

app.get("/webhook-info", async (req, res) => {
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getWebhookInfo`,
    );
    const webhookInfo = await response.json();
    res.json(webhookInfo);
  } catch (error) {
    res
      .status(500)
      .json({ error: "Failed to get webhook info", details: error.message });
  }
});

app.get("/test-bot", async (req, res) => {
  try {
    const botInfo = await bot.getMe();
    res.json({ ok: true, result: botInfo });
  } catch (error) {
    res
      .status(500)
      .json({ error: "Failed to get bot info", details: error.message });
  }
});

app.get("/bot-status", async (req, res) => {
  try {
    const botInfo = await bot.getMe();

    const webhookResponse = await fetch(
      `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getWebhookInfo`,
    );
    const webhookData = await webhookResponse.json();
    const webhookInfo = webhookData.result;

    res.json({
      bot_status: botInfo ? "‚úÖ Online" : "‚ùå Offline",
      webhook_status: webhookInfo.url ? "‚úÖ Active" : "‚ùå Not Set",
      webhook_url: webhookInfo.url || "None",
      pending_updates: webhookInfo.pending_update_count || 0,
      server_uptime: process.uptime(),
      timestamp: new Date().toISOString(),
      bot_info: {
        id: botInfo.id,
        username: botInfo.username,
        first_name: botInfo.first_name,
      },
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post("/webhook/payment", async (req, res) => {
  try {
    const { userId, amount, status, transactionId } = req.body;

    if (status === "completed" && amount >= 97) {
      await paymentCommands.confirmPayment(bot, userId, transactionId);
    }

    res.status(200).json({ success: true });
  } catch (error) {
    console.error("Payment webhook error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.use("/public", express.static("public"));

console.log("ü§ñ Bot started successfully with 7-Day + 30-Day automation!");
console.log("üöÄ Features added:");
console.log("   ‚Ä¢ Auto next-day reminders (24h delay)");
console.log("   ‚Ä¢ Day 3 upsell automation (1h delay)");
console.log("   ‚Ä¢ 30-day follow-up for results");
console.log("   ‚Ä¢ Enhanced welcome sequence");
console.log("   ‚Ä¢ 30-day extended content automation");
console.log("   ‚Ä¢ Daily content delivery (9 AM Cambodia)");
console.log("   ‚Ä¢ Evening motivation (6 PM Cambodia)");
console.log("   ‚Ä¢ Weekly reviews (Sunday 8 PM Cambodia)");
console.log("üî± 7-Day Money Flow Reset‚Ñ¢ + 30-Day Extended Content READY on Railway!");
