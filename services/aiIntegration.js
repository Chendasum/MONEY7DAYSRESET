// Enhanced AI Integration Service with Claude AI - PRODUCTION READY
async initializeAIServices() {
    try {
        console.log('üîç Initializing AI services...');
        console.log('ANTHROPIC_API_KEY exists:', !!process.env.ANTHROPIC_API_KEY);
        console.log('CLAUDE_API_KEY exists:', !!process.env.CLAUDE_API_KEY);
        
        // Check for Claude API
        if (process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY) {
            try {
                console.log('üì¶ Loading Anthropic SDK...');
                const Anthropic = require('@anthropic-ai/sdk');
                console.log('‚úÖ Anthropic SDK loaded successfully');
                
                this.anthropic = new Anthropic({
                    apiKey: process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY,
                });
                
                console.log('üß™ Testing Claude connection...');
                // Test the connection
                await this.anthropic.messages.create({
                    model: "claude-3-sonnet-20240229",
                    max_tokens: 50,
                    messages: [{ role: "user", content: "Test" }]
                });
                
                this.claudeAvailable = true;
                console.log('‚úÖ Claude AI initialized and tested successfully');
            } catch (error) {
                console.log('‚ùå Claude initialization failed:', error.message);
                console.log('Error details:', error);
            }
        } else {
            console.log('‚ö†Ô∏è No Claude API key found');
        }
        
        // ... rest of your initialization code

class EnhancedAIIntegration {
    constructor() {
        this.claudeAvailable = false;
        this.openaiAvailable = false;
        this.isInitialized = false;
        
        this.initializeAIServices();
    }

    async initializeAIServices() {
        try {
            console.log('Initializing AI services...');
            
            // Check for Claude API
            if (process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY) {
                try {
                    const Anthropic = require('@anthropic-ai/sdk');
                    this.anthropic = new Anthropic({
                        apiKey: process.env.ANTHROPIC_API_KEY || process.env.CLAUDE_API_KEY,
                    });
                    this.claudeAvailable = true;
                    console.log('Claude AI initialized successfully');
                } catch (error) {
                    console.log('Claude initialization failed:', error.message);
                }
            }
            
            // Check for OpenAI API as fallback
            if (process.env.OPENAI_API_KEY) {
                try {
                    const OpenAI = require('openai');
                    this.openai = new OpenAI({
                        apiKey: process.env.OPENAI_API_KEY,
                    });
                    this.openaiAvailable = true;
                    console.log('OpenAI initialized as fallback');
                } catch (error) {
                    console.log('OpenAI initialization failed:', error.message);
                }
            }

            this.isInitialized = true;
            console.log(`AI Integration Status: Claude=${this.claudeAvailable}, OpenAI=${this.openaiAvailable}`);
            
        } catch (error) {
            console.error('AI service initialization failed:', error);
        }
    }

    // Main chat assistance
    async handleUserQuestion(question, userContext = {}) {
        try {
            if (!this.isInitialized) {
                await this.initializeAIServices();
            }

            console.log('Processing user question with AI...');
            
            const context = this.buildUserContext(userContext);
            const prompt = this.buildQuestionPrompt(question, context);
            
            // Try Claude first (preferred)
            if (this.claudeAvailable) {
                return await this.askClaude(prompt, 'chat');
            }
            
            // Fallback to OpenAI
            if (this.openaiAvailable) {
                return await this.askOpenAI(prompt, 'chat');
            }
            
            // Ultimate fallback
            return this.getFallbackResponse(question);
            
        } catch (error) {
            console.error('AI question handling failed:', error);
            return this.getErrorResponse();
        }
    }

    // Financial analysis
    async analyzeFinancialSituation(userFinances, currentDay = 1) {
        try {
            console.log(`Analyzing financial situation for day ${currentDay}...`);
            
            const prompt = this.buildFinancialAnalysisPrompt(userFinances, currentDay);
            
            if (this.claudeAvailable) {
                return await this.askClaude(prompt, 'financial_analysis');
            }
            
            if (this.openaiAvailable) {
                return await this.askOpenAI(prompt, 'financial_analysis');
            }
            
            return this.getFallbackFinancialAnalysis(userFinances);
            
        } catch (error) {
            console.error('Financial analysis failed:', error);
            return this.getErrorResponse();
        }
    }

    // Personalized coaching
    async getPersonalizedCoaching(userProgress, dayNumber) {
        try {
            console.log(`Generating personalized coaching for day ${dayNumber}...`);
            
            const prompt = this.buildCoachingPrompt(userProgress, dayNumber);
            
            if (this.claudeAvailable) {
                return await this.askClaude(prompt, 'coaching');
            }
            
            if (this.openaiAvailable) {
                return await this.askOpenAI(prompt, 'coaching');
            }
            
            return this.getFallbackCoaching(dayNumber);
            
        } catch (error) {
            console.error('Coaching generation failed:', error);
            return this.getErrorResponse();
        }
    }

    // Money leak detection
    async detectMoneyLeaks(expenses, income) {
        try {
            console.log('AI-powered money leak detection...');
            
            const prompt = this.buildMoneyLeakPrompt(expenses, income);
            
            if (this.claudeAvailable) {
                return await this.askClaude(prompt, 'money_leak');
            }
            
            if (this.openaiAvailable) {
                return await this.askOpenAI(prompt, 'money_leak');
            }
            
            return this.getFallbackMoneyLeakAnalysis(expenses);
            
        } catch (error) {
            console.error('Money leak detection failed:', error);
            return this.getErrorResponse();
        }
    }

    // Claude AI integration
    async askClaude(prompt, type = 'general') {
        try {
            const modelConfigs = {
                chat: { model: "claude-3-sonnet-20240229", max_tokens: 1000 },
                financial_analysis: { model: "claude-3-sonnet-20240229", max_tokens: 1500 },
                coaching: { model: "claude-3-sonnet-20240229", max_tokens: 1200 },
                money_leak: { model: "claude-3-sonnet-20240229", max_tokens: 1000 },
                general: { model: "claude-3-sonnet-20240229", max_tokens: 800 }
            };

            const config = modelConfigs[type] || modelConfigs.general;

            const message = await this.anthropic.messages.create({
                model: config.model,
                max_tokens: config.max_tokens,
                system: this.getSystemPrompt(type),
                messages: [{
                    role: "user",
                    content: prompt
                }]
            });

            const response = message.content[0].text;
            
            return {
                success: true,
                source: 'claude',
                response: response,
                type: type,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('Claude API error:', error);
            throw error;
        }
    }

    // OpenAI fallback
    async askOpenAI(prompt, type = 'general') {
        try {
            const systemPrompts = {
                chat: "You are a helpful financial coach for the 7-Day Money Flow Reset program in Cambodia.",
                financial_analysis: "You are an expert financial analyst providing advice for Cambodian users.",
                coaching: "You are a motivational financial coach helping users achieve their money goals.",
                money_leak: "You are a financial detective helping users find unnecessary expenses.",
                general: "You are a helpful assistant for financial education."
            };

            const completion = await this.openai.chat.completions.create({
                model: "gpt-3.5-turbo",
                messages: [
                    { role: "system", content: systemPrompts[type] },
                    { role: "user", content: prompt }
                ],
                max_tokens: 1000,
                temperature: 0.7
            });

            return {
                success: true,
                source: 'openai',
                response: completion.choices[0].message.content,
                type: type,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('OpenAI API error:', error);
            throw error;
        }
    }

    // Prompt builders
    buildUserContext(userContext) {
        return `
User Profile:
- Name: ${userContext.name || 'User'}
- Tier: ${userContext.tier || 'Essential'}
- Current Day: ${userContext.currentDay || 1}
- Completed Days: ${userContext.completedDays || 0}
- Country: Cambodia
- Language: Khmer (respond in Khmer)
        `.trim();
    }

    buildQuestionPrompt(question, context) {
        return `
${context}

User Question: "${question}"

Please provide a helpful, practical response in Khmer about financial management, money flow, or the 7-Day Money Flow Reset program. Keep it encouraging and specific to the Cambodian context.

Format your response to be:
1. Clear and easy to understand
2. Practical and actionable
3. Encouraging and motivational
4. Specific to Cambodia's financial environment
5. Maximum 500 words

Response in Khmer:
        `.trim();
    }

    buildFinancialAnalysisPrompt(userFinances, currentDay) {
        return `
Analyze this financial situation for a Cambodian user on Day ${currentDay} of the 7-Day Money Flow Reset:

Income: $${userFinances.monthlyIncome || 0}
Expenses: $${userFinances.monthlyExpenses || 0}
Savings: $${userFinances.currentSavings || 0}
Debts: $${userFinances.totalDebts || 0}

Please provide:
1. Current financial health assessment
2. Specific money leak areas to investigate
3. Day ${currentDay} action items
4. Cambodia-specific advice (USD/KHR, local banks, etc.)
5. Encouraging next steps

Respond in Khmer with practical, actionable advice.
        `.trim();
    }

    buildCoachingPrompt(userProgress, dayNumber) {
        return `
Create personalized coaching for Day ${dayNumber} of the 7-Day Money Flow Reset program.

User Progress:
- Completed Days: ${userProgress.completedDays || 0}
- Current Challenges: ${userProgress.challenges || 'General progress'}
- Goals: ${userProgress.goals || 'Improve money management'}

Provide:
1. Motivation specific to their progress
2. Day ${dayNumber} focus areas
3. Personalized encouragement
4. Next action steps
5. Success reminders

Respond in Khmer with an encouraging, coaching tone.
        `.trim();
    }

    buildMoneyLeakPrompt(expenses, income) {
        return `
Analyze these expenses for money leaks in a Cambodian context:

Monthly Income: $${income}
Expense Categories:
${JSON.stringify(expenses, null, 2)}

Identify:
1. Potential money leaks
2. Unnecessary subscriptions/services
3. Cambodia-specific savings opportunities
4. Small expenses that add up
5. Behavioral patterns to change

Provide specific, actionable recommendations in Khmer.
        `.trim();
    }

    getSystemPrompt(type) {
        const systemPrompts = {
            chat: `You are an expert financial coach for the 7-Day Money Flow Reset program specifically designed for Cambodian users. 

Your role:
- Provide practical financial advice for Cambodia's economy
- Support users through their 7-day transformation journey
- Respond in clear, encouraging Khmer language
- Focus on actionable steps and local context (USD/KHR, ABA/ACLEDA banks, etc.)
- Maintain an encouraging, professional tone`,

            financial_analysis: `You are a financial analyst specializing in the Cambodian market and personal finance.

Your expertise:
- Understanding Cambodia's banking system (ABA, ACLEDA, etc.)
- USD/KHR currency considerations
- Local expense patterns and money leaks
- Practical saving strategies for Cambodian families
- Small business financial management in Cambodia`,

            coaching: `You are a motivational financial coach for the 7-Day Money Flow Reset program.

Your approach:
- Encouraging and supportive tone
- Practical, step-by-step guidance
- Cultural sensitivity to Cambodian values
- Focus on building confidence and financial literacy
- Celebrate small wins and progress`,

            money_leak: `You are a financial detective helping Cambodian users identify money leaks.

Your focus:
- Common expense categories in Cambodia
- Subscription services and recurring payments
- Small daily expenses that accumulate
- Behavioral spending patterns
- Local-specific money-saving opportunities`,

            general: `You are a helpful financial education assistant for Cambodian users of the 7-Day Money Flow Reset program. Always respond in Khmer with practical, encouraging advice.`
        };

        return systemPrompts[type] || systemPrompts.general;
    }

    // Fallback responses
    getFallbackResponse(question) {
        const fallbacks = [
            "·ûü·ûº·ûò·û¢·ûó·üê·ûô·ûë·üÑ·ûü! AI ·ûä·ûæ·ûò·üí·ûî·û∏·ûá·ûΩ·ûô·ûò·û∑·ûì·û¢·û∂·ûÖ·ûÜ·üí·ûõ·ûæ·ûô·ûî·û∂·ûì·üî ·ûü·ûº·ûò·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûá·üÜ·ûì·ûΩ·ûô·ûï·üí·ûë·û∂·ûõ·üã·üî",
            "·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí AI ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûè·üÇ·ûî·ûÖ·üí·ûÖ·ûª·ûî·üí·ûî·ûì·üí·ûì·ûó·û∂·ûñ·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûü·üÜ·ûé·ûΩ·ûö·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·ûÄ·üí·ûö·üÑ·ûô ·û¨·ûî·üí·ûö·ûæ /help ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûá·ûò·üí·ûö·ûæ·ûü·ûï·üí·ûü·üÅ·ûÑ·üó·üî",
            "·ûü·ûò·üí·ûö·û∂·ûî·üã·ûá·üÜ·ûì·ûΩ·ûô·ûá·û∂·ûÄ·üã·ûõ·û∂·ûÄ·üã ·û¢·üí·ûì·ûÄ·û¢·û∂·ûÖ·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ:\n‚Ä¢ /day[1-7] ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûò·üÅ·ûö·üÄ·ûì\n‚Ä¢ /progress ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÄ·û∂·ûö·ûö·û∏·ûÄ·ûÖ·ûò·üí·ûö·ûæ·ûì\n‚Ä¢ /quote ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÄ·û∂·ûö·ûõ·ûæ·ûÄ·ûë·ûπ·ûÄ·ûÖ·û∑·ûè·üí·ûè"
        ];
        
        const randomFallback = fallbacks[Math.floor(Math.random() * fallbacks.length)];
        
        return {
            success: false,
            source: 'fallback',
            response: randomFallback,
            timestamp: new Date().toISOString()
        };
    }

    getFallbackFinancialAnalysis(userFinances) {
        const income = userFinances.monthlyIncome || 0;
        const expenses = userFinances.monthlyExpenses || 0;
        const savings = income - expenses;
        
        let analysis = "·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª·ûò·ûº·ûõ·ûä·üí·ûã·û∂·ûì:\n\n";
        
        if (savings > 0) {
            analysis += `·û¢·üí·ûì·ûÄ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûü·ûì·üí·ûü·üÜ·ûî·û∂·ûì $${savings}/·ûÅ·üÇ - ·ûõ·üí·û¢·ûé·û∂·ûü·üã!\n\n`;
        } else {
            analysis += `·ûÖ·üÜ·ûé·û∂·ûô·ûõ·ûæ·ûü·ûñ·û∏·ûÖ·üÜ·ûé·ûº·ûõ $${Math.abs(savings)}/·ûÅ·üÇ\n\n`;
        }
        
        analysis += `·ûá·üÜ·û†·û∂·ûì·ûî·ûì·üí·ûë·û∂·ûî·üã:\n`;
        analysis += `‚Ä¢ ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûò·ûæ·ûõ·ûÖ·üÜ·ûé·û∂·ûô·ûè·ûº·ûÖ·üó·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ\n`;
        analysis += `‚Ä¢ ·ûö·ûÄ·ûò·ûæ·ûõ subscriptions ·û¨·ûü·üÅ·ûú·û∂·ûÄ·ûò·üí·ûò·ûä·üÇ·ûõ·ûò·û∑·ûì·ûÖ·û∂·üÜ·ûî·û∂·ûÖ·üã\n`;
        analysis += `‚Ä¢ ·ûÄ·üÜ·ûé·ûè·üã·ûê·ûú·û∑·ûÄ·û∂·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÄ·û∂·ûö·ûÖ·üÜ·ûé·û∂·ûô·ûÖ·û∂·üÜ·ûî·û∂·ûÖ·üã\n`;
        analysis += `‚Ä¢ ·ûî·üí·ûö·ûæ /day1 ·ûä·ûæ·ûò·üí·ûî·û∏·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò Money Flow Reset\n\n`;
        analysis += `AI ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ·ûì·ûπ·ûÑ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ·ûî·û∂·ûì·ûÄ·üí·ûì·ûª·ûÑ·ûñ·üÅ·ûõ·ûÜ·û∂·ûî·üã·üó·ûì·üÅ·üá!`;

        return {
            success: true,
            source: 'fallback',
            response: analysis,
            timestamp: new Date().toISOString()
        };
    }

    getFallbackCoaching(dayNumber) {
        const coachingMessages = {
            1: "·ûê·üí·ûÑ·üÉ·ûë·û∏ 1: ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûä·üÑ·ûô·ûÄ·û∂·ûö·ûü·üí·ûÇ·û∂·ûõ·üã Money Flow ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ! ·ûÄ·ûª·üÜ·ûî·û∂·ûö·ûò·üí·ûó - ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûì·û∂·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûñ·û∏·ûÖ·üÜ·ûé·ûª·ûÖ·ûì·üÅ·üá·üî",
            2: "·ûê·üí·ûÑ·üÉ·ûë·û∏ 2: ·ûñ·üÅ·ûõ·ûú·üÅ·ûõ·û∂·ûö·ûÄ·ûÉ·ûæ·ûâ Money Leaks! ·ûò·ûæ·ûõ·ûÖ·üÜ·ûé·û∂·ûô·ûè·ûº·ûÖ·üó·ûä·üÇ·ûõ·û¢·û∂·ûÖ·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûî·û∂·ûì·üî",
            3: "·ûê·üí·ûÑ·üÉ·ûë·û∏ 3: ·ûú·û∂·ûô·ûè·ûò·üí·ûõ·üÉ·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ! ·û¢·üí·ûì·ûÄ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûí·üí·ûú·ûæ·ûî·û∂·ûì·ûõ·üí·û¢·û†·ûæ·ûô·üî",
            4: "·ûê·üí·ûÑ·üÉ·ûë·û∏ 4: ·ûî·ûÑ·üí·ûÄ·ûæ·ûè·ûï·üÇ·ûì·ûë·û∏ Income & Cost ·ûÖ·üí·ûî·û∂·ûü·üã·ûõ·û∂·ûü·üã·üî",
            5: "·ûê·üí·ûÑ·üÉ·ûë·û∏ 5: ·ûô·ûõ·üã·ûñ·û∏ Survival vs Growth - ·ûÄ·ûò·üí·ûö·û∑·ûè·ûÅ·üí·ûñ·ûü·üã!",
            6: "·ûê·üí·ûÑ·üÉ·ûë·û∏ 6: ·ûñ·üÅ·ûõ·ûí·üí·ûú·ûæ Action Plan! ·û¢·üí·ûì·ûÄ·ûü·üí·ûë·ûæ·ûö·ûî·û∂·ûì·û†·ûæ·ûô·üî",
            7: "·ûê·üí·ûÑ·üÉ·ûë·û∏ 7: Integration ·ûì·û∑·ûÑ·ûü·ûò·û∑·ûë·üí·ûí·ûï·ûõ! ·û¢·üí·ûì·ûÄ·û¢·ûü·üí·ûÖ·û∂·ûö·üí·ûô!"
        };

        const message = coachingMessages[dayNumber] || "·ûî·ûì·üí·ûè·ûä·üÜ·ûé·ûæ·ûö·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ!";
        
        return {
            success: true,
            source: 'fallback',
            response: `${message}\n\nAI ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ·ûì·ûπ·ûÑ·û¢·û∂·ûÖ·ûî·üí·ûö·ûæ·ûî·û∂·ûì·ûÄ·üí·ûì·ûª·ûÑ·ûñ·üÅ·ûõ·ûÜ·û∂·ûî·üã·üó·ûì·üÅ·üá!\n\n·ûü·ûò·üí·ûö·û∂·ûî·üã·ûá·üÜ·ûì·ûΩ·ûô·ûî·ûì·üí·ûê·üÇ·ûò: @Chendasum`,
            timestamp: new Date().toISOString()
        };
    }

    getFallbackMoneyLeakAnalysis(expenses) {
        return {
            success: true,
            source: 'fallback',
            response: `·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ Money Leak ·ûò·ûº·ûõ·ûä·üí·ûã·û∂·ûì:

·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûò·ûæ·ûõ·ûè·üÜ·ûî·ûì·üã·ûë·û∂·üÜ·ûÑ·ûì·üÅ·üá:
‚Ä¢ Subscriptions (Netflix, Spotify, Apps)
‚Ä¢ ·ûÄ·û∂·ûö·ûë·û∑·ûâ·ûò·üí·û†·ûº·ûî delivery ·ûâ·ûπ·ûÄ·ûâ·û∂·ûî·üã
‚Ä¢ ·ûÄ·û∂·û†·üí·ûú·üÅ/·ûó·üÅ·ûü·ûá·üí·ûá·üà ·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ
‚Ä¢ Impulse buying
‚Ä¢ ·ûê·üí·ûõ·üÉ·ûü·üÅ·ûú·û∂·ûÄ·ûò·üí·ûò·ûä·üÇ·ûõ·ûò·û∑·ûì·ûî·üí·ûö·ûæ

·ûÄ·û∂·ûö·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûè·ûº·ûÖ·üó = ·ûü·ûì·üí·ûü·üÜ·ûí·üÜ!

AI ·ûñ·üÅ·ûâ·ûõ·üÅ·ûâ·ûì·ûπ·ûÑ·ûï·üí·ûè·ûõ·üã·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ·ûõ·ûò·üí·û¢·û∑·ûè·ûÄ·üí·ûì·ûª·ûÑ·ûñ·üÅ·ûõ·ûÜ·û∂·ûî·üã·üó·ûì·üÅ·üá!`,
            timestamp: new Date().toISOString()
        };
    }

    getErrorResponse() {
        return {
            success: false,
            source: 'error',
            response: "·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûî·ûÖ·üí·ûÖ·üÅ·ûÄ·ûë·üÅ·ûü·üî ·ûü·ûº·ûò·ûü·û∂·ûÄ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè·ûÄ·üí·ûö·üÑ·ûô ·û¨·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum",
            timestamp: new Date().toISOString()
        };
    }

    // AI health check
    async testConnection() {
        try {
            if (this.claudeAvailable) {
                const test = await this.askClaude("Test connection", 'general');
                return { claude: true, test: test.success };
            }
            
            if (this.openaiAvailable) {
                const test = await this.askOpenAI("Test connection", 'general');
                return { openai: true, test: test.success };
            }
            
            return { available: false, message: 'No AI services available' };
            
        } catch (error) {
            return { error: error.message };
        }
    }

    // Send response helper
    async sendAIResponse(bot, chatId, aiResponse) {
        try {
            if (aiResponse.success) {
                await bot.sendMessage(chatId, aiResponse.response);
                
                // Add source indicator
                const sourceEmoji = aiResponse.source === 'claude' ? 'üîÆ' : 
                                  aiResponse.source === 'openai' ? 'üß†' : 'üìö';
                const timestamp = new Date().toLocaleTimeString();
                await bot.sendMessage(chatId, `${sourceEmoji} ·ûá·üÜ·ûì·ûΩ·ûô·ûä·üÑ·ûô AI ‚Ä¢ ${timestamp}`);
            } else {
                await bot.sendMessage(chatId, aiResponse.response);
            }
        } catch (error) {
            console.error('Error sending AI response:', error);
            await bot.sendMessage(chatId, "·ûò·û∂·ûì·ûî·ûâ·üí·û†·û∂·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûï·üí·ûâ·ûæ·ûÖ·ûò·üí·ûõ·ûæ·ûô·üî ·ûü·ûº·ûò·ûë·û∂·ûÄ·üã·ûë·ûÑ @Chendasum");
        }
    }

    // Get AI status
    getStatus() {
        return {
            initialized: this.isInitialized,
            claude_available: this.claudeAvailable,
            openai_available: this.openaiAvailable,
            primary_ai: this.claudeAvailable ? 'Claude' : this.openaiAvailable ? 'OpenAI' : 'None',
            capabilities: {
                chat_assistance: this.claudeAvailable || this.openaiAvailable,
                financial_analysis: this.claudeAvailable || this.openaiAvailable,
                personalized_coaching: this.claudeAvailable || this.openaiAvailable,
                money_leak_detection: this.claudeAvailable || this.openaiAvailable
            },
            last_check: new Date().toISOString()
        };
    }
}

// Export singleton
module.exports = new EnhancedAIIntegration();
