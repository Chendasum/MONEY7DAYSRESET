// Enhanced AI Integration Service - Claude Only Version
class ClaudeAIIntegration {
    constructor() {
        this.claudeAvailable = false;
        this.isInitialized = false;
        
        this.initializeClaudeService();
    }

    async initializeClaudeService() {
        try {
            console.log('Initializing Claude AI service...');
            console.log('ANTHROPIC_API_KEY exists:', !!process.env.ANTHROPIC_API_KEY);
            
            if (process.env.ANTHROPIC_API_KEY) {
                try {
                    console.log('üì¶ Loading Anthropic SDK...');
                    const Anthropic = require('@anthropic-ai/sdk');
                    
                    this.anthropic = new Anthropic({
                        apiKey: process.env.ANTHROPIC_API_KEY,
                    });
                    
                    console.log('üß™ Testing Claude connection...');
                    
                    // Simple test call
                    const testMessage = await this.anthropic.messages.create({
                        model: "claude-3-sonnet-20240229",
                        max_tokens: 50,
                        messages: [
                            {
                                role: "user",
                                content: "Hello"
                            }
                        ]
                    });
                    
                    if (testMessage && testMessage.content) {
                        this.claudeAvailable = true;
                        console.log('‚úÖ Claude AI initialized and tested successfully');
                    } else {
                        throw new Error('Invalid response from Claude');
                    }
                    
                } catch (error) {
                    console.log('‚ùå Claude initialization failed:', error.message);
                    console.log('Full error:', error);
                    this.claudeAvailable = false;
                }
            } else {
                console.log('‚ö†Ô∏è No ANTHROPIC_API_KEY found');
                this.claudeAvailable = false;
            }

            this.isInitialized = true;
            console.log(`üéØ Claude Status: Available=${this.claudeAvailable}`);
            
        } catch (error) {
            console.error('‚ùå Claude service initialization failed:', error);
            this.isInitialized = true;
            this.claudeAvailable = false;
        }
    }

    // Main chat assistance
    async handleUserQuestion(question, userContext = {}) {
        try {
            console.log('ü§ñ Processing user question:', question.substring(0, 50) + '...');
            
            if (!this.isInitialized) {
                console.log('üîÑ Re-initializing Claude service...');
                await this.initializeClaudeService();
            }

            if (this.claudeAvailable) {
                console.log('üîÆ Using Claude AI...');
                const response = await this.askClaude(question, userContext, 'chat');
                if (response.success) {
                    console.log('‚úÖ Claude responded successfully');
                    return response;
                }
                console.log('‚ö†Ô∏è Claude response failed, using fallback');
            } else {
                console.log('üìö Claude not available, using fallback');
            }
            
            return this.getFallbackResponse(question);
            
        } catch (error) {
            console.error('‚ùå handleUserQuestion error:', error);
            return this.getFallbackResponse(question);
        }
    }

    // Financial analysis
    async analyzeFinancialSituation(userFinances, currentDay = 1) {
        try {
            console.log(`üßÆ Analyzing financial situation for day ${currentDay}...`);
            
            if (this.claudeAvailable) {
                const prompt = this.buildFinancialAnalysisPrompt(userFinances, currentDay);
                const response = await this.askClaude(prompt, {currentDay}, 'financial_analysis');
                if (response.success) return response;
            }
            
            return this.getFallbackFinancialAnalysis(userFinances);
            
        } catch (error) {
            console.error('‚ùå Financial analysis failed:', error);
            return this.getFallbackFinancialAnalysis(userFinances);
        }
    }

    // Personalized coaching
    async getPersonalizedCoaching(userProgress, dayNumber) {
        try {
            console.log(`üéØ Generating coaching for day ${dayNumber}...`);
            
            if (this.claudeAvailable) {
                const prompt = this.buildCoachingPrompt(userProgress, dayNumber);
                const response = await this.askClaude(prompt, {dayNumber}, 'coaching');
                if (response.success) return response;
            }
            
            return this.getFallbackCoaching(dayNumber);
            
        } catch (error) {
            console.error('‚ùå Coaching generation failed:', error);
            return this.getFallbackCoaching(dayNumber);
        }
    }

    // Money leak detection
    async detectMoneyLeaks(expenses, income) {
        try {
            console.log('üîç Detecting money leaks...');
            
            if (this.claudeAvailable) {
                const prompt = this.buildMoneyLeakPrompt(expenses, income);
                const response = await this.askClaude(prompt, {}, 'money_leak');
                if (response.success) return response;
            }
            
            return this.getFallbackMoneyLeakAnalysis(expenses);
            
        } catch (error) {
            console.error('‚ùå Money leak detection failed:', error);
            return this.getFallbackMoneyLeakAnalysis(expenses);
        }
    }

    // Claude API integration with detailed logging
    async askClaude(prompt, userContext = {}, type = 'general') {
        try {
            console.log(`üî• Making Claude API call for type: ${type}`);
            
            const fullPrompt = this.buildFullPrompt(prompt, userContext, type);
            console.log('üì§ Sending to Claude (first 100 chars):', fullPrompt.substring(0, 100) + '...');

            const message = await this.anthropic.messages.create({
                model: "claude-3-sonnet-20240229",
                max_tokens: this.getMaxTokens(type),
                system: this.getSystemPrompt(type),
                messages: [
                    {
                        role: "user",
                        content: fullPrompt
                    }
                ]
            });

            if (!message || !message.content || !message.content[0] || !message.content[0].text) {
                throw new Error('Invalid response structure from Claude');
            }

            const responseText = message.content[0].text;
            console.log('‚úÖ Claude responded with', responseText.length, 'characters');
            console.log('üì• Response preview:', responseText.substring(0, 100) + '...');
            
            return {
                success: true,
                source: 'claude',
                response: responseText,
                type: type,
                timestamp: new Date().toISOString()
            };

        } catch (error) {
            console.error('‚ùå Claude API call failed:', error.message);
            console.error('Error type:', error.constructor.name);
            console.error('Error details:', {
                status: error.status,
                message: error.message,
                code: error.code
            });
            
            return {
                success: false,
                error: error.message,
                source: 'claude_error'
            };
        }
    }

    // Prompt builders
    buildFullPrompt(prompt, userContext, type) {
        const contextString = `
User Context:
- Name: ${userContext.name || 'User'}
- Current Day: ${userContext.currentDay || 1}
- Country: Cambodia
- Program: 7-Day Money Flow Reset
- Language: Respond in Khmer

Request: ${prompt}`;

        return contextString;
    }

    buildFinancialAnalysisPrompt(userFinances, currentDay) {
        return `Analyze this financial situation for a Cambodian user on Day ${currentDay}:

Income: $${userFinances.monthlyIncome || 0}
Expenses: $${userFinances.monthlyExpenses || 0}
Savings: $${userFinances.currentSavings || 0}
Debts: $${userFinances.totalDebts || 0}

Provide practical financial advice in Khmer for Cambodia context (USD/KHR, ABA/ACLEDA banks).`;
    }

    buildCoachingPrompt(userProgress, dayNumber) {
        return `Create personalized coaching for Day ${dayNumber} of 7-Day Money Flow Reset:

User Progress: ${userProgress.completedDays || 0} days completed
Current Day: ${dayNumber}

Provide encouraging coaching in Khmer with specific action items for today.`;
    }

    buildMoneyLeakPrompt(expenses, income) {
        return `Money leak analysis for Cambodian user:

Monthly Income: $${income}
Expenses: ${JSON.stringify(expenses)}

Identify money leaks and provide savings recommendations in Khmer.`;
    }

    getSystemPrompt(type) {
        const prompts = {
            chat: "You are an expert financial coach for the 7-Day Money Flow Reset program in Cambodia. Respond in clear Khmer with practical advice.",
            financial_analysis: "You are a financial analyst specializing in Cambodia. Provide analysis in Khmer with local context (USD/KHR, ABA/ACLEDA banks).",
            coaching: "You are a motivational coach for Cambodian users. Provide encouraging guidance in Khmer.",
            money_leak: "You are a financial detective helping Cambodians find money leaks. Respond in Khmer with practical savings tips.",
            general: "You are a helpful financial assistant for Cambodian users. Always respond in Khmer."
        };
        return prompts[type] || prompts.general;
    }

    getMaxTokens(type) {
        const tokens = {
            chat: 800,
            financial_analysis: 1200,
            coaching: 1000,
            money_leak: 800,
            general: 600
        };
        return tokens[type] || 600;
    }

    // Fallback responses
    getFallbackResponse(question) {
        const questionLower = question.toLowerCase();
        let response = "ü§ñ AI ·ûá·üÜ·ûì·ûΩ·ûô:\n\n";
        
        if (questionLower.includes('·ûü·ûì·üí·ûü·üÜ') || questionLower.includes('save')) {
            response += `üí∞ ·ûÇ·ûì·üí·ûõ·ûπ·üá·ûü·ûì·üí·ûü·üÜ·ûõ·ûª·ûô:\n`;
            response += `‚Ä¢ ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò·ûñ·û∏ 10% ·ûì·üÉ·ûÖ·üÜ·ûé·ûº·ûõ\n`;
            response += `‚Ä¢ ·ûî·ûÑ·üí·ûÄ·ûæ·ûè·ûò·üí·û†·ûº·ûî·û¢·ûÇ·û∂·ûö 3-6 ·ûÅ·üÇ\n`;
            response += `‚Ä¢ ·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûÖ·üÜ·ûé·û∂·ûô·ûò·û∑·ûì·ûÖ·û∂·üÜ·ûî·û∂·ûÖ·üã\n`;
            response += `‚Ä¢ ·ûî·üí·ûö·ûæ·ûú·û∑·ûí·û∏ 50/30/20 rule\n\n`;
        } else {
            response += `·ûü·üÜ·ûé·ûΩ·ûö: "${question}"\n\n`;
            response += `üí° ·ûÄ·û∂·ûö·ûé·üÇ·ûì·û∂·üÜ·ûë·ûº·ûë·üÖ:\n`;
            response += `‚Ä¢ ·ûÄ·ûè·üã·ûè·üí·ûö·û∂·ûÖ·üÜ·ûé·ûº·ûõ-·ûÖ·üÜ·ûé·û∂·ûô\n`;
            response += `‚Ä¢ ·ûÄ·üÜ·ûé·ûè·üã·ûÇ·üÑ·ûõ·ûä·üÖ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª\n`;
            response += `‚Ä¢ ·ûî·üí·ûö·ûæ /day1-7 ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûò·üÅ·ûö·üÄ·ûì\n\n`;
        }
        
        response += `üîÆ Claude AI ·ûì·ûπ·ûÑ·ûè·üí·ûö·ûõ·ûî·üã·ûò·ûÄ·ûÄ·üí·ûì·ûª·ûÑ·ûñ·üÅ·ûõ·ûÜ·û∂·ûî·üã·üó!\nüí¨ @Chendasum`;
        
        return {
            success: true,
            source: 'fallback',
            response: response,
            timestamp: new Date().toISOString()
        };
    }

    getFallbackFinancialAnalysis(userFinances) {
        const income = userFinances.monthlyIncome || 1000;
        const expenses = userFinances.monthlyExpenses || 800;
        const savings = income - expenses;
        const savingsRate = income > 0 ? ((savings / income) * 100).toFixed(1) : 0;
        
        let analysis = `üìä ·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª:\n\n`;
        analysis += `üí∞ ·ûÖ·üÜ·ûé·ûº·ûõ: $${income}\nüí∏ ·ûÖ·üÜ·ûé·û∂·ûô: $${expenses}\nüíé ·ûü·ûì·üí·ûü·üÜ: $${savings} (${savingsRate}%)\n\n`;
        
        if (savingsRate < 10) {
            analysis += `‚ö†Ô∏è ·û¢·ûè·üí·ûö·û∂·ûü·ûì·üí·ûü·üÜ·ûë·û∂·ûî - ·ûè·üí·ûö·ûº·ûú·ûÄ·üÇ·ûõ·ûò·üí·û¢:\n‚Ä¢ ·ûÇ·üÑ·ûõ·ûä·üÖ: 10-20%\n‚Ä¢ ·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûÖ·üÜ·ûé·û∂·ûô\n‚Ä¢ ·ûî·ûÑ·üí·ûÄ·ûæ·ûì·ûÖ·üÜ·ûé·ûº·ûõ\n\n`;
        } else {
            analysis += `‚úÖ ·û¢·ûè·üí·ûö·û∂·ûü·ûì·üí·ûü·üÜ·ûõ·üí·û¢ - ·ûî·ûì·üí·ûè·ûë·ûò·üí·ûõ·û∂·ûî·üã·ûì·üÅ·üá!\n\n`;
        }
        
        analysis += `üéØ /day3 ·ûÄ·û∂·ûö·ûú·û∑·ûó·û∂·ûÇ·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí\nüí¨ @Chendasum`;
        
        return {
            success: true,
            source: 'fallback',
            response: analysis,
            timestamp: new Date().toISOString()
        };
    }

    getFallbackCoaching(dayNumber) {
        const messages = {
            1: "üåä ·ûê·üí·ûÑ·üÉ·ûë·û∏ 1: ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò Money Flow! ·û¢·üí·ûì·ûÄ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûí·üí·ûú·ûæ·ûá·üÜ·û†·û∂·ûì·ûü·üÜ·ûÅ·û∂·ûì·üã",
            2: "üîç ·ûê·üí·ûÑ·üÉ·ûë·û∏ 2: ·ûö·ûÄ·ûÉ·ûæ·ûâ Money Leaks! ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûÖ·üÜ·ûé·û∂·ûô·ûè·ûº·ûÖ·üó",
            3: "‚öñÔ∏è ·ûê·üí·ûÑ·üÉ·ûë·û∏ 3: ·ûú·û∂·ûô·ûè·ûò·üí·ûõ·üÉ·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí! ·û¢·üí·ûì·ûÄ·ûÄ·üÜ·ûñ·ûª·ûÑ·ûö·üÄ·ûì·ûõ·üí·û¢",
            4: "üó∫Ô∏è ·ûê·üí·ûÑ·üÉ·ûë·û∏ 4: ·ûî·ûÑ·üí·ûÄ·ûæ·ûè·ûï·üÇ·ûì·ûë·û∏! ·ûë·ûü·üí·ûü·ûì·ûú·û∑·ûü·üê·ûô·ûÄ·û∂·ûì·üã·ûè·üÇ·ûÖ·üí·ûî·û∂·ûü·üã",
            5: "‚ö° ·ûê·üí·ûÑ·üÉ·ûë·û∏ 5: Survival vs Growth! ·ûÄ·ûò·üí·ûö·û∑·ûè·ûÄ·û∂·ûì·üã·ûè·üÇ·ûÅ·üí·ûñ·ûü·üã",
            6: "üéØ ·ûê·üí·ûÑ·üÉ·ûë·û∏ 6: Action Plan! ·ûü·üí·ûë·ûæ·ûö·ûî·û∂·ûì·û†·ûæ·ûô",
            7: "üèÜ ·ûê·üí·ûÑ·üÉ·ûë·û∏ 7: ·ûá·üÑ·ûÇ·ûá·üê·ûô! ·û¢·üí·ûì·ûÄ·û¢·ûü·üí·ûÖ·û∂·ûö·üí·ûô!"
        };
        
        const message = messages[dayNumber] || "üí™ ·ûî·ûì·üí·ûè·ûä·üÜ·ûé·ûæ·ûö·û†·û∑·ûö·ûâ·üí·ûâ·ûú·ûè·üí·ûê·ûª!";
        
        return {
            success: true,
            source: 'fallback',
            response: `üéØ AI Coach:\n\n${message}\n\nüìö /day${dayNumber} ·ûò·üÅ·ûö·üÄ·ûì·ûê·üí·ûÑ·üÉ·ûì·üÅ·üá\nüìà /progress ·ûú·ûå·üí·ûç·ûì·ûó·û∂·ûñ\nüí¨ @Chendasum`,
            timestamp: new Date().toISOString()
        };
    }

    getFallbackMoneyLeakAnalysis(expenses) {
        return {
            success: true,
            source: 'fallback',
            response: `üîç Money Leak Analysis:\n\nüéØ ·ûñ·û∑·ûì·û∑·ûè·üí·ûô·ûè·üÜ·ûî·ûì·üã·ûë·û∂·üÜ·ûÑ·ûì·üÅ·üá:\n‚Ä¢ Subscriptions ·ûò·û∑·ûì·ûî·üí·ûö·ûæ\n‚Ä¢ ·ûò·üí·û†·ûº·ûî delivery ·ûâ·ûπ·ûÄ·ûâ·û∂·ûî·üã\n‚Ä¢ ·ûÄ·û∂·û†·üí·ûú·üÅ/·ûó·üÅ·ûü·ûá·üí·ûá·üà ·ûî·üí·ûö·ûÖ·û∂·üÜ·ûê·üí·ûÑ·üÉ\n‚Ä¢ Impulse buying\n\nüí° ·ûÄ·û∂·ûö·ûÄ·û∂·ûè·üã·ûî·ûì·üí·ûê·ûô·ûè·ûº·ûÖ·üó = ·ûü·ûì·üí·ûü·üÜ·ûí·üÜ!\n\nüìö /day2 Money Leak Detection\nüí¨ @Chendasum`,
            timestamp: new Date().toISOString()
        };
    }

    // Status and utilities
    getStatus() {
        return {
            initialized: this.isInitialized,
            claude_available: this.claudeAvailable,
            primary_ai: 'Claude',
            last_check: new Date().toISOString()
        };
    }

    async testConnection() {
        try {
            if (this.claudeAvailable) {
                const test = await this.askClaude("Test", {}, 'general');
                return { claude: true, test: test.success };
            }
            return { available: false, message: 'Claude not available' };
        } catch (error) {
            return { error: error.message };
        }
    }
}

async debugClaudeConnection() {
    try {
        console.log('üß™ Testing Claude with minimal request...');
        
        const message = await this.anthropic.messages.create({
            model: "claude-3-5-sonnet-20241022",
            max_tokens: 100,
            messages: [
                {
                    role: "user", 
                    content: "Say hello in Khmer"
                }
            ]
        });
        
        console.log('‚úÖ Debug test successful:', message.content[0].text);
        return true;
    } catch (error) {
        console.error('‚ùå Debug test failed:', error.message);
        console.error('Status:', error.status);
        console.error('Type:', error.type);
        return false;
    }
}

module.exports = new ClaudeAIIntegration();
